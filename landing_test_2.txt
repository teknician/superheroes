settings
{
	modes
	{
		Deathmatch
		{
			enabled maps
			{
				Workshop Chamber
			}
		}
		General
		{
			Game Mode Start: Manual
			Limit Roles: 2 Of Each Role Per Team
		}
	}
	heroes
	{
		General
		{
			Mercy
			{
				Health: 500%
				Movement Speed: 200%
				Spawn With Ultimate Ready: On
				Ultimate Generation - Combat Valkyrie: 500%
				Ultimate Generation - Passive Valkyrie: 500%
				Ultimate Generation Valkyrie: 500%
			}
		}
	}
	extensions
	{
		Kinetic Explosion Effects
		Explosion Sounds
		Energy Explosion Effects
	}
}
variables {
    global:
        0: View_Bool
        1: View_Angle
    player:
        0: Scalar_2
        1: Scalar_1
        2: Players_Behind
        3: Passive_Index
        4: View_Bool
}
rule ("Init") {
    event {
        Ongoing - Global;
    }
    actions {
        Set Global Variable(View_Angle, 180);
    }
}

rule ("Player in air") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        Is In Air(Event Player) == True;
    }
    actions {
        While(Is In Air(Event Player));
            If(Compare(Y Component Of(Velocity Of(Event Player)), <, 0));
                "chase(eventPlayer.Scalar_1, 2, rate=0.25, ChaseReeval.DESTINATION_AND_RATE) # whats the point of it???\ndamage scalar + radius"
                Chase Player Variable At Rate(Event Player, Scalar_2, 4, 0.5, Destination and Rate);
            Else If(Compare(Y Component Of(Velocity Of(Event Player)), >=, 0));
                "eventPlayer.Scalar_1 = 0"
                Set Player Variable(Event Player, Scalar_2, 0);
                "stopChasingVariable(eventPlayer.Scalar_1)"
                Stop Chasing Player Variable(Event Player, Scalar_2);
            End;
            Wait(0.116, Ignore Condition);
        End;
        "waitUntil(not eventPlayer.isInAir(), 90) #useless"
        If(Compare((Event Player).Scalar_2, >, 3));
            Play Effect(All Players(All Teams), Winston Jump Pack Landing Effect, Team Of(Event Player), Position Of(Event Player), 1);
            Play Effect(All Players(All Teams), Winston Jump Pack Landing Effect, Team Of(Event Player), Position Of(Event Player), 200);
        Else If(Compare((Event Player).Scalar_2, >, 2));
            Play Effect(All Players(All Teams), Sigma Accretion Impact Effect, Team Of(Event Player), Position Of(Event Player), 1);
            Play Effect(All Players(All Teams), Pharah Rocket Launcher Explosion Sound, Team Of(Event Player), Position Of(Event Player), 100);
        Else If(Compare((Event Player).Scalar_2, >, 0.5));
            Play Effect(All Players(All Teams), Orisa Halt Implosion Effect, Team Of(Event Player), Position Of(Event Player), 1);
            Play Effect(All Players(All Teams), Pharah Concussive Blast Sound, Team Of(Event Player), Position Of(Event Player), 25);
        End;
        Damage(Remove From Array(Players Within Radius(Event Player, Min(4, Multiply((Event Player).Scalar_2, 30)), Opposite Team Of(Team Of(Event Player)), Surfaces And Enemy Barriers), Event Player), Event Player, Max(15, Multiply((Event Player).Scalar_2, 30)));
        Set Status(Remove From Array(Players Within Radius(Event Player, Min(4, Multiply((Event Player).Scalar_2, 1.5)), Opposite Team Of(Team Of(Event Player)), Surfaces And Enemy Barriers), Event Player), Event Player, Knocked Down, Min(Multiply(0.25, (Event Player).Scalar_1), 2));
        Wait(2, Ignore Condition);
    }
}

rule ("Player init") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        Has Spawned(Event Player) == True;
    }
    actions {
        If(Compare(Event Player, ==, Host Player));
            Create HUD Text(All Players(All Teams), Custom String("sc1: {0}, sc2: {1}", (Event Player).Scalar_1, (Event Player).Scalar_2, Null), Null, Null, Left, 0, Color(White), Null, Null, Visible To and String, Default Visibility);
            Create HUD Text(All Players(All Teams), Custom String("In backwards view: {0}, View Angle: {1}", (Event Player).View_Bool, Global.View_Angle, Null), Null, Null, Left, 0, Color(White), Null, Null, Visible To and String, Default Visibility);
            Create Dummy Bot(Hero(Roadhog), All Teams, -1, Up, Up);
        Else;
            Set Max Health(Event Player, 999);
            Disable Nameplates(Event Player, Host Player);
            Create In-World Text(Host Player, Health(Event Player), Event Player, 1, Do Not Clip, Visible To Position String and Color, Color(Blue), Default Visibility);
    }
}

rule ("On damage") {
    event {
        Player Took Damage;
        All;
        All;
    }
    conditions {
        Is Dummy Bot(Event Player) == True;
    }
    actions {
        Small Message(Host Player, Custom String("Damage: {0}", Event Damage, Null, Null));
    }
}

rule ("Change View angle up") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        Is Button Held(Event Player, Button(Jump)) == True;
    }
    actions {
        While(And(Is Button Held(Event Player, Button(Jump)), Compare(Global.View_Angle, <, 359)));
            Modify Global Variable(View_Angle, Add, 1);
            Wait(0.05, Ignore Condition);
        End;
    }
}

rule ("Change View angle down") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        Is Button Held(Event Player, Button(Crouch)) == True;
    }
    actions {
        While(And(Is Button Held(Event Player, Button(Crouch)), Compare(Global.View_Angle, >, 1)));
            Modify Global Variable(View_Angle, Subtract, 1);
            Wait(0.05, Ignore Condition);
        End;
    }
}

rule ("FoV") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        Has Spawned(Event Player) == True;
    }
    actions {
        Set Player Variable(Event Player, Players_Behind, Players Within Radius(Event Player, 10, All Teams, Surfaces));
        For Player Variable(Event Player, Passive_Index, 0, Count Of((Event Player).Players_Behind), 1);
            If(Is In View Angle(Value In Array((Event Player).Players_Behind, (Event Player).Passive_Index), Event Player, Global.View_Angle));
                Set Global Variable(View_Bool, True);
                Small Message(Event Player, Custom String("In back view", Null, Null, Null));
            Else;
                Set Global Variable(View_Bool, False);
            End;
        End;
        Wait(0.5, Ignore Condition);
        Loop;
    }
}

