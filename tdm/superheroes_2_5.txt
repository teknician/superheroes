settings
{
	main
	{
		Description: "Code: 33CCY. Superpowers TDM - V2.1.9, by ĿUCKYNUMBER. Players pick an Active and Passive mod that benefits them and their team. There's plenty of OP ways to mix and match your mods! Original Author: PainRelievers."
	}
	lobby
	{
		Allow Players Who Are In Queue: Yes
		Match Voice Chat: Enabled
		Map Rotation: After A Game
		Max Spectators: 8
		Max Team 1 Players: 4
		Max Team 2 Players: 4
		Return To Lobby: Never
		Team Balancing: After A Game
	}
	modes
	{
		Team Deathmatch
		{
			enabled maps
			{
				Black Forest
				Blizzard World
				Dorado
				Château Guillard
				Ecopoint: Antarctica
				Eichenwalde
				Hanamura
				Kanezaka
				King's Row
				Petra
			}
			Game Length In Minutes: 15
		}
		General
		{
			Game Mode Start: Immediately
			Hero Limit: Off
			Respawn Time Scalar: 100%
			Score To Win: 30
		}
	}
	heroes
	{
		General
		{
			Ashe
			{
				Ultimate Duration: 50%
			}
			Junkrat
			{
				Ultimate Duration: 25%
			}
		}
	}
	extensions
	{
		Beam Effects
		Buff Status Effects
		Buff and Debuff Sounds
		Kinetic Explosion Effects
		Energy Explosion Effects
		Explosion Sounds
	}
}
variables {
    global:
        0: Debug
        1: Passive_Mod_Strings
        2: Active_Mod_Strings
        3: Global_Index
        4: Team_1_Spawns
        5: Team_2_Spawns
        6: Start_Intermission
        7: Intermission_Duration
        8: Time_To_Intermission
        9: Intermission_In_Progress
        10: Intermission_Array
    player:
        0: Cd_Visible_To
        1: Cd_Color
        2: Cooldown_Indicator
        3: Cooldown_Chase
        4: Cooldown_String_1
        5: Damage_Chase
        6: Is_In_Combat
        7: Health_Temp
        8: Mod_Menu_Select
        9: Mod_Menu_Text
        10: Menu_Misc
        11: Page_Number
        12: Menu_Element
        13: Choice_Color_P
        14: Choice_Color_A
        15: Passive_Mod
        16: Passive_Mod_Index
        17: Passive_Mod_FX
        18: Passive_Mod_FX_Array
        19: Passive_Mod_Skill_Toggle
        20: Passive_Time
        21: Passive_Index
        22: Current_Target_P
        23: Old_Target_P
        24: Active_Mod
        25: Active_Mod_Index
        26: Active_Mod_FX
        27: Active_Mod_FX_Array
        28: Active_Mod_Skill_Toggle
        29: Active_Index
        30: Active_Index_1
        31: Active_Index_2
        32: Active_Index_3
        33: Active_Index_4
        34: Active_Index_5
        35: Active_String
        36: Active_String_2
        37: Active_Time
        38: Current_Target_A
        39: Old_Target_A
        40: Index
        41: Num_0
        42: Num_1
        43: Num_2
        44: Num_3
        45: Num_4
        46: Radius
        47: Mod_Effect_Caster
        48: Mod_Effect_Target
        49: CastMelee_Mod_Conditions
        50: CastMelee_Mod_Conditions_Ally
        51: CastUltimate_Mod_Conditions_Ally
        52: LoS_Mod_Conditions
        53: Third_Person_Camera_Toggle
        54: Player_ATK_SPD_HP
        55: Player_Position
        56: Player_Foot_Position
        57: Player_Health
        58: Vertical_Speed
        59: Affected_Players
        60: Active_Affected_Players
        61: Other_Players
        62: Current_Hero
        63: Current_Hero_2
        64: Current_Hero_3
        65: Distance_Num
        66: Temp_Index
        67: Facing_Direction
        68: Is_Colossus
        69: Is_Blind
        70: Is_Visible
        71: Target
        72: Target_Area_A
        73: Target_Position
        74: Boolean
        75: Railgun_Charge
        76: OraOra
        77: Omega_Charge
        78: Blade_Chase
        79: Blade_Victim
        80: Victim_Chain
        81: Projectile
        82: Projectile_Position
        83: Projectile_Duration
        84: DoT_Var
        85: DoT_Boolean
        86: HoT_Var
        87: Linked
        88: Optimize
        89: Null_Zone
}
subroutines {
    0: MoveSpeed160
    1: Health150
    2: SmolMode
    3: SmolModeFX
    4: ImmolationAura
    5: Spellslinger1
    6: Spellslinger2
    7: Spellslinger3
    8: Spellslinger4
    9: Spellslinger5
    10: Spellslinger6
    11: Rejuvenation
    12: RejuvenationFX
    13: Archmage1
    14: Archmage2
    15: Archmage3
    16: Archmage4
    17: Archmage5
    18: Archmage6
    19: LevelUp
    20: Aimbot
    21: CheatDeath
    22: RaidBoss
    23: DarkRitual
    24: ManaShield
    25: UltimatePerSec2
    26: ThornsFX
    27: FrostArmorFX
    28: BootsOfMobility
    29: MaxMight
    30: Boxer
    31: Forcefield
    32: ForcefieldFX
    33: SuperheroLanding
    34: EvilEye
    35: OmegaBoostUlt
    36: OmegaBoostFX
    37: OmegaBoost
    38: Killstreak
    39: PowerPoints
    40: NullZone
    41: Blink
    42: DeathGrip
    43: Preparation
    44: ZeroG
    45: Corruption
    46: Translocate
    47: EntanglingRoots
    48: Blind
    49: Fear
    50: Shadowstep
    51: GoombaStomp
    52: SaveDisc
    53: SaveDiscTeleport
    54: Telekinesis
    55: FeignDeath
    56: Sneak
    57: Hex
    58: Taunt
    59: Cleanse
    60: LifeTap
    61: LightningBolt
    62: HealthingHand
    63: Colossus_Reset
    64: Colossus
    65: ColossusFX
    66: Railgun
    67: ArmorField
    68: Immolation
    69: Ambush
    70: Knockout
    71: BoxerDealtDmg
    72: Devour
    73: Infection
    74: BoxerBrig
    75: BoxerRein
    76: SneakDealtDmg
    77: Disruption
    78: Lifesteal
    79: OraOra
    80: BouncingBlade
    81: Lifesplit
    82: PowerGlove
    83: ElementalCharge
    84: VsGoliathDealtDmg
    85: Mastery
    86: ManaShieldDamaged
    87: ThornsDamaged
    88: FrostArmorDamaged
    89: BootsOfMobilityDamaged
    90: InfectionDamaged
    91: SneakDamaged
    92: ColossusHookDamaged
    93: FuryDamaged
    94: ResilientDamaged
    95: VsGoliathDamaged
    96: SoulLinkDamaged
    97: RemoveFXOnDeath
    98: SmolModeDeath
    99: CorpseExplosion
    100: Revenge
    101: GetBehindMeDeath
    102: ZeroGDeath
    103: ColossusDeath
    104: KillstreakDeath
    105: NullZoneDeath
    106: LevelUpDing
    107: KillstreakFinalBlow
    108: VictoryRush
    109: RandomPassive
    110: RandomActive
    111: PlayerReset
    112: MovementReset
}
rule ("Initialize intermission") {
    event {
        Ongoing - Global;
    }
    actions {
        Set Global Variable(Start_Intermission, 1);
        Set Global Variable(Intermission_Array, Array(Custom String("Game start! Time to choose your abilities!", Null, Null, Null), Custom String("yet... You can still change abilities!", Null, Null, Null), 60, 57, Custom String("   Game starts", Null, Null, Null), Null, Null, Null, Null, Null, Custom String("Match hasn't started", Null, Null, Null), Custom String("Match setup", Null, Null, Null)));
    }
}

rule ("Initialize Mod Menu (Joined)") {
    event {
        Player Joined Match;
        All;
        All;
    }
    actions {
        Set Player Variable At Index(Event Player, Null_Zone, 0, Vector(0, -400, 0));
        Set Player Variable At Index(Event Player, Null_Zone, 1, Vector(0, -400, 0));
        Set Player Variable At Index(Event Player, Null_Zone, 2, Vector(0, -400, 0));
        Set Player Variable(Event Player, Mod_Menu_Select, 0);
        Set Player Variable At Index(Event Player, Menu_Misc, 5, 0);
        Set Player Variable(Event Player, Passive_Mod_Index, 0);
        Set Player Variable(Event Player, Active_Mod_Index, 0);
        Set Player Variable(Event Player, Passive_Mod, 0);
        Set Player Variable(Event Player, Active_Mod, 0);
        Set Player Variable At Index(Event Player, Page_Number, 0, 0);
        Set Player Variable At Index(Event Player, Page_Number, 1, 0);
        Set Player Variable At Index(Event Player, Menu_Element, 0, 0);
        Set Player Variable At Index(Event Player, Menu_Element, 1, 0);
        Set Player Variable At Index(Event Player, Choice_Color_P, 0, Color(Lime Green));
        Set Player Variable At Index(Event Player, Choice_Color_P, 1, Color(Lime Green));
        Set Player Variable At Index(Event Player, Choice_Color_P, 2, Color(Lime Green));
        Set Player Variable At Index(Event Player, Choice_Color_P, 3, Color(Lime Green));
        Set Player Variable At Index(Event Player, Choice_Color_P, 4, Color(Lime Green));
        Set Player Variable At Index(Event Player, Choice_Color_A, 0, Color(Orange));
        Set Player Variable At Index(Event Player, Choice_Color_A, 1, Color(Orange));
        Set Player Variable At Index(Event Player, Choice_Color_A, 2, Color(Orange));
        Set Player Variable At Index(Event Player, Choice_Color_A, 3, Color(Orange));
        Set Player Variable At Index(Event Player, Choice_Color_A, 4, Color(Orange));
        Disallow Button(Event Player, Button(Reload));
        Disallow Button(Event Player, Button(Interact));
        Wait(3, Ignore Condition);
        Allow Button(Event Player, Button(Reload));
        Allow Button(Event Player, Button(Interact));
    }
}

rule ("Reset Player Parameters") {
    event {
        Subroutine;
        PlayerReset;
    }
    actions {
        Allow Button(Event Player, Button(Reload));
        Allow Button(Event Player, Button(Interact));
        Allow Button(Event Player, Button(Melee));
        Allow Button(Event Player, Button(Crouch));
        Allow Button(Event Player, Button(Primary Fire));
        Allow Button(Event Player, Button(Secondary Fire));
        Allow Button(Event Player, Button(Ability 1));
        Allow Button(Event Player, Button(Ability 2));
        Set Move Speed(Event Player, 100);
        Set Damage Dealt(Event Player, 100);
        Set Damage Received(Event Player, 100);
        Set Max Health(Event Player, 100);
        Set Healing Received(Event Player, 100);
        Set Healing Dealt(Event Player, 100);
        Set Ability 1 Enabled(Event Player, True);
        Set Ability 2 Enabled(Event Player, True);
        Set Ultimate Ability Enabled(Event Player, True);
        Set Gravity(Event Player, 100);
        Set Primary Fire Enabled(Event Player, True);
        Set Secondary Fire Enabled(Event Player, True);
        Set Projectile Gravity(Event Player, 100);
        Set Projectile Speed(Event Player, 100);
        Set Aim Speed(Event Player, 100);
        Start Scaling Player(Event Player, 1, False);
        Stop Modifying Hero Voice Lines(Event Player);
        Stop Forcing Player Outlines(Event Player, All Players(All Teams));
        Stop Forcing Player To Be Hero(Event Player);
        Stop Camera(Event Player);
        Stop All Heal Over Time(Event Player);
        Stop All Damage Over Time(Event Player);
        Remove All Health Pools From Player(Event Player);
        Set Player Variable(Event Player, Optimize, 0);
        Set Player Variable(Event Player, Cd_Visible_To, Array(Null));
        Set Player Variable(Event Player, Radius, 0);
        Set Player Variable At Index(Event Player, Num_0, 0, 0);
        Set Player Variable At Index(Event Player, Num_0, 1, 0);
        Set Player Variable At Index(Event Player, Num_0, 2, 0);
        Set Player Variable At Index(Event Player, Num_0, 3, 0);
        Set Player Variable At Index(Event Player, Num_0, 4, 0);
        Set Player Variable(Event Player, Num_1, 0);
        Set Player Variable(Event Player, Num_2, 0);
        Set Player Variable At Index(Event Player, Num_3, 0, Custom String("0", Null, Null, Null));
        Set Player Variable At Index(Event Player, Num_3, 1, Custom String("", Null, Null, Null));
        Set Player Variable At Index(Event Player, Num_3, 2, Custom String("", Null, Null, Null));
        Set Player Variable(Event Player, Boolean, False);
        Set Player Variable(Event Player, Active_Index, 0);
        Set Player Variable(Event Player, Active_Index_1, 0);
        Set Player Variable(Event Player, Active_Index_2, 0);
        Set Player Variable(Event Player, Active_Index_3, 0);
        Set Player Variable(Event Player, Active_Index_4, 0);
        Set Player Variable(Event Player, Active_Index_5, 0);
        Set Player Variable(Event Player, Active_String, Null);
        Set Player Variable(Event Player, Active_String_2, Null);
        Set Player Variable(Event Player, Omega_Charge, 0);
        Set Player Variable(Event Player, Affected_Players, 0);
        Set Player Variable(Event Player, Passive_Mod_Skill_Toggle, 0);
        Set Player Variable(Event Player, Active_Mod_Skill_Toggle, 0);
        Set Player Variable(Event Player, Player_ATK_SPD_HP, 0);
        Destroy Effect((Event Player).Passive_Mod_FX);
        Destroy In-World Text((Event Player).Passive_Mod_FX);
        Destroy Icon((Event Player).Passive_Mod_FX);
        Destroy Effect((Event Player).Active_Mod_FX);
        Destroy In-World Text((Event Player).Active_Mod_FX);
        Destroy Icon((Event Player).Active_Mod_FX);
        If(Entity Exists((Event Player).Passive_Mod_FX_Array));
            For Player Variable(Event Player, Index, 0, Count Of((Event Player).Passive_Mod_FX_Array), 1);
                Destroy Effect(Value In Array((Event Player).Passive_Mod_FX_Array, (Event Player).Index));
                Destroy In-World Text(Value In Array((Event Player).Passive_Mod_FX_Array, (Event Player).Index));
                Destroy Icon(Value In Array((Event Player).Passive_Mod_FX_Array, (Event Player).Index));
            End;
        End;
        If(Entity Exists((Event Player).Active_Mod_FX_Array));
            For Player Variable(Event Player, Index, 0, Count Of((Event Player).Active_Mod_FX_Array), 1);
                Destroy Effect(Value In Array((Event Player).Active_Mod_FX_Array, (Event Player).Index));
                Destroy In-World Text(Value In Array((Event Player).Active_Mod_FX_Array, (Event Player).Index));
                Destroy Icon(Value In Array((Event Player).Active_Mod_FX_Array, (Event Player).Index));
            End;
        End;
        Clear Status(Event Player, Frozen);
        Clear Status(Event Player, Burning);
        Clear Status(Event Player, Hacked);
        Clear Status(Event Player, Invincible);
        Clear Status(Event Player, Knocked Down);
        Clear Status(Event Player, Rooted);
        Clear Status(Event Player, Stunned);
        Clear Status(Event Player, Unkillable);
    }
}

rule ("Reset player movespeed when called") {
    event {
        Subroutine;
        MovementReset;
    }
    actions {
        If(Compare((Event Player).Passive_Mod, ==, 3));
            Set Move Speed(Event Player, 160);
        Else If(And(Compare((Event Player).Passive_Mod, ==, 18), Compare((Event Player).Passive_Mod_Skill_Toggle, ==, 1)));
            Set Move Speed(Event Player, 150);
        Else If(Compare((Event Player).Passive_Mod, ==, 4));
            Set Move Speed(Event Player, 133);
        Else If(Compare((Event Player).Passive_Mod, ==, 5));
            Set Move Speed(Event Player, 160);
        Else If(Compare((Event Player).Passive_Mod, ==, 25));
            Set Move Speed(Event Player, Add(100, (Event Player).Player_ATK_SPD_HP));
        Else If(Compare((Event Player).Passive_Mod, ==, 8));
            Set Move Speed(Event Player, 75);
        Else If(Compare((Event Player).Passive_Mod, ==, 30));
            Set Move Speed(Event Player, 130);
        Else;
            Set Move Speed(Event Player, 100);
    }
}

rule ("Passive Mods 2 - 160% Movement Speed") {
    event {
        Subroutine;
        MoveSpeed160;
    }
    actions {
        Abort If(Entity Exists((Event Player).Passive_Mod_FX_Array));
        Set Move Speed(Event Player, 160);
        Create Effect(All Players(All Teams), Soldier: 76 Sprinting Effect, Team Of(Event Player), Event Player, 1, Position and Radius);
        Set Player Variable(Event Player, Passive_Mod_FX, Last Created Entity);
        Wait Until(Compare((Event Player).Mod_Menu_Select, !=, 3), 99999);
        Destroy Effect((Event Player).Passive_Mod_FX);
    }
}

rule ("Passive Mods 5 - Boots of Mobility") {
    event {
        Subroutine;
        BootsOfMobility;
    }
    actions {
        Set Move Speed(Event Player, 200);
        Start Heal Over Time(Event Player, Event Player, 9999, Multiply(Max Health(Event Player), 0.05));
        Set Player Variable(Event Player, Player_Health, Health(Event Player));
        Wait Until(Compare(Health(Event Player), <, (Event Player).Player_Health), 99999);
        Set Move Speed(Event Player, 100);
        Stop All Heal Over Time(Event Player);
        Wait(3, Ignore Condition);
    }
}

rule ("Passive Mods 7 - Raid Boss") {
    event {
        Subroutine;
        RaidBoss;
    }
    actions {
        If(Is Alive(Event Player));
            Abort If(Entity Exists((Event Player).Passive_Mod_FX));
            Create Icon(All Players(All Teams), World Vector Of(Vector(0, 0.5, 0), Event Player, Rotation And Translation), Skull, Visible To and Position, Color(Purple), False);
            Set Player Variable(Event Player, Passive_Mod_FX, Last Created Entity);
            Start Forcing Player Outlines(Event Player, All Players(All Teams), True, Color(Purple), Always);
            Set Move Speed(Event Player, 75);
            Set Max Health(Event Player, 225);
            Set Damage Dealt(Event Player, 125);
    }
}

rule ("Passive Mods 10 - Rejuvenation") {
    event {
        Subroutine;
        Rejuvenation;
    }
    actions {
        If(Is Alive(Event Player));
            Start Heal Over Time(Event Player, Event Player, 9999, Multiply(Max Health(Event Player), 0.1));
        End;
        Wait Until(Compare((Event Player).Mod_Menu_Select, !=, 3), 99999);
        Stop All Heal Over Time(Event Player);
    }
}

rule ("Passive Mods 10 - Rejuvenation FX") {
    event {
        Subroutine;
        RejuvenationFX;
    }
    actions {
        If(Is Alive(Event Player));
            Abort If(Entity Exists((Event Player).Passive_Mod_FX));
            Create Effect(All Players(All Teams), Sparkles, Color(Green), Event Player, 1, Visible To Position and Radius);
            Set Player Variable(Event Player, Passive_Mod_FX, Last Created Entity);
    }
}

rule ("Passive Mods 13- Spellslinger (Ability 1)") {
    event {
        Subroutine;
        Spellslinger1;
    }
    actions {
        If(Compare((Event Player).Passive_Mod, ==, 14));
            While(And(Compare(Ability Cooldown(Event Player, Button(Ability 1)), >, 0), Compare((Event Player).Passive_Mod, ==, 14)));
                If(Compare(Hero Of(Event Player), ==, Hero(Ana)));
                    Wait(7.5, Ignore Condition);
                Else;
                    Wait(3, Ignore Condition);
                End;
                Set Ability Cooldown(Event Player, Button(Ability 1), 0);
                Wait(0.05, Ignore Condition);
            End;
    }
}

rule ("Passive Mods 13 - Spellslinger (Ability 2)") {
    event {
        Subroutine;
        Spellslinger2;
    }
    actions {
        If(Compare((Event Player).Passive_Mod, ==, 14));
            While(And(Compare(Ability Cooldown(Event Player, Button(Ability 2)), >, 0), Compare((Event Player).Passive_Mod, ==, 14)));
                If(Compare(Hero Of(Event Player), ==, Hero(Baptiste)));
                    Wait(15, Ignore Condition);
                Else;
                End;
                Wait(3, Ignore Condition);
                Set Ability Cooldown(Event Player, Button(Ability 2), 0);
                Wait(0.05, Ignore Condition);
            End;
    }
}

rule ("Passive Mods 13 - Spellslinger (Resource)") {
    event {
        Subroutine;
        Spellslinger3;
    }
    actions {
        If(Compare((Event Player).Passive_Mod, ==, 14));
            While(And(Compare(Ability Resource(Event Player, Button(Secondary Fire)), <, 100), Compare((Event Player).Passive_Mod, ==, 14)));
                Wait(3, Ignore Condition);
                If(Compare(Hero Of(Event Player), ==, Hero(D.Va)));
                    Set Ability Resource(Event Player, Button(Secondary Fire), 100);
                    Wait(4, Ignore Condition);
                End;
                If(Compare(Hero Of(Event Player), ==, Hero(Bastion)));
                    Set Ability Resource(Event Player, Button(Secondary Fire), 100);
                    Wait(4, Ignore Condition);
                End;
                If(Compare(Hero Of(Event Player), ==, Hero(Moira)));
                    Set Ability Resource(Event Player, Button(Primary Fire), 100);
                    Wait(13.5, Ignore Condition);
                End;
                Wait(0.05, Ignore Condition);
            End;
    }
}

rule ("Passive Mods 13 - Spellslinger (Ability Charge)") {
    event {
        Subroutine;
        Spellslinger4;
    }
    actions {
        If(Compare((Event Player).Passive_Mod, ==, 14));
            While(And(Or(Compare(Ability Charge(Event Player, Button(Ability 1)), <, 3), Compare(Ability Charge(Event Player, Button(Ability 2)), <, 3)), Compare((Event Player).Passive_Mod, ==, 14)));
                Wait(2, Ignore Condition);
                If(Compare(Hero Of(Event Player), ==, Hero(Brigitte)));
                    Wait(1, Ignore Condition);
                    Set Ability Charge(Event Player, Button(Ability 2), If-Then-Else(Compare(Ability Charge(Event Player, Button(Ability 2)), <, 3), Add(Ability Charge(Event Player, Button(Ability 2)), 1), 3));
                End;
                If(Compare(Hero Of(Event Player), ==, Hero(Junkrat)));
                    Wait(1, Ignore Condition);
                    Set Ability Charge(Event Player, Button(Ability 1), If-Then-Else(Compare(Ability Charge(Event Player, Button(Ability 1)), <, 2), Add(Ability Charge(Event Player, Button(Ability 1)), 1), 2));
                End;
                If(Compare(Hero Of(Event Player), ==, Hero(Symmetra)));
                    Wait(1, Ignore Condition);
                    Set Ability Charge(Event Player, Button(Ability 1), If-Then-Else(Compare(Ability Charge(Event Player, Button(Ability 1)), <, 3), Add(Ability Charge(Event Player, Button(Ability 1)), 1), 3));
                End;
                If(Compare(Hero Of(Event Player), ==, Hero(Tracer)));
                    Set Ability Charge(Event Player, Button(Ability 1), If-Then-Else(Compare(Ability Charge(Event Player, Button(Ability 2)), <, 3), Add(Ability Charge(Event Player, Button(Ability 2)), 1), 3));
                End;
                Wait(0.05, Ignore Condition);
            End;
    }
}

rule ("Passive Mods 13 - Spellslinger (Secondary Fire)") {
    event {
        Subroutine;
        Spellslinger5;
    }
    actions {
        If(Compare((Event Player).Passive_Mod, ==, 14));
            While(Compare(Ability Cooldown(Event Player, Button(Secondary Fire)), >, 0));
                Wait(3, Ignore Condition);
                Set Ability Cooldown(Event Player, Button(Secondary Fire), 0);
                Wait(0.05, Ignore Condition);
            End;
    }
}

rule ("Passive Mods 13 - Spellslinger (Primary Fire)") {
    event {
        Subroutine;
        Spellslinger6;
    }
    actions {
        If(Compare((Event Player).Passive_Mod, ==, 14));
            While(Compare(Ability Cooldown(Event Player, Button(Primary Fire)), >, 0));
                Wait(3, Ignore Condition);
                Set Ability Cooldown(Event Player, Button(Primary Fire), 0);
                Wait(0.05, Ignore Condition);
            End;
    }
}

rule ("Passive Mods 14 - Archmage (Ability 1)") {
    event {
        Subroutine;
        Archmage1;
    }
    actions {
        If(Compare((Event Player).Passive_Mod, ==, 15));
            While(And(Compare(Ability Cooldown(Event Player, Button(Ability 1)), >, 0), Compare((Event Player).Passive_Mod, ==, 15)));
                If(Compare(Hero Of(Event Player), ==, Hero(Ana)));
                    Wait(6, Ignore Condition);
                Else;
                    Wait(1.25, Ignore Condition);
                End;
                Set Ability Cooldown(Event Player, Button(Ability 1), 0);
                Wait(0.032, Ignore Condition);
            End;
    }
}

rule ("Passive Mods 14 - Archmage (Ability 2)") {
    event {
        Subroutine;
        Archmage2;
    }
    actions {
        If(Compare((Event Player).Passive_Mod, ==, 15));
            While(And(Compare(Ability Cooldown(Event Player, Button(Ability 2)), >, 0), Compare((Event Player).Passive_Mod, ==, 15)));
                If(Compare(Hero Of(Event Player), ==, Hero(Baptiste)));
                    Wait(10, Ignore Condition);
                Else;
                    Wait(1.25, Ignore Condition);
                End;
                Set Ability Cooldown(Event Player, Button(Ability 2), 0);
                Wait(0.032, Ignore Condition);
            End;
    }
}

rule ("Passive Mods 14 - Archmage (Resource)") {
    event {
        Subroutine;
        Archmage3;
    }
    actions {
        If(Compare((Event Player).Passive_Mod, ==, 15));
            While(And(Or(Compare(Ability Cooldown(Event Player, Button(Secondary Fire)), >, 0), Compare(Ability Resource(Event Player, Button(Secondary Fire)), <, 100)), Compare((Event Player).Passive_Mod, ==, 15)));
                Wait(1.25, Ignore Condition);
                If(Compare(Hero Of(Event Player), ==, Hero(D.Va)));
                    Set Ability Resource(Event Player, Button(Secondary Fire), 100);
                    Wait(1.25, Ignore Condition);
                End;
                If(Compare(Hero Of(Event Player), ==, Hero(Bastion)));
                    Set Ability Resource(Event Player, Button(Secondary Fire), 100);
                    Wait(1.25, Ignore Condition);
                End;
                If(Compare(Hero Of(Event Player), ==, Hero(Moira)));
                    Set Ability Resource(Event Player, Button(Primary Fire), 100);
                    Wait(5.5, Ignore Condition);
                End;
                Wait(0.032, Ignore Condition);
            End;
    }
}

rule ("Passive Mods 14 - Archmage (Ability Charge)") {
    event {
        Subroutine;
        Archmage4;
    }
    actions {
        If(Compare((Event Player).Passive_Mod, ==, 15));
            While(And(Or(Compare(Ability Charge(Event Player, Button(Ability 1)), <, 3), Compare(Ability Charge(Event Player, Button(Ability 2)), <, 3)), Compare((Event Player).Passive_Mod, ==, 14)));
                Wait(1.25, Ignore Condition);
                If(Compare(Hero Of(Event Player), ==, Hero(Brigitte)));
                    Set Ability Charge(Event Player, Button(Ability 2), If-Then-Else(Compare(Ability Charge(Event Player, Button(Ability 2)), <, 3), Add(Ability Charge(Event Player, Button(Ability 2)), 1), 3));
                End;
                If(Compare(Hero Of(Event Player), ==, Hero(Junkrat)));
                    Set Ability Charge(Event Player, Button(Ability 1), If-Then-Else(Compare(Ability Charge(Event Player, Button(Ability 1)), <, 2), Add(Ability Charge(Event Player, Button(Ability 1)), 1), 2));
                End;
                If(Compare(Hero Of(Event Player), ==, Hero(Symmetra)));
                    Set Ability Charge(Event Player, Button(Ability 1), If-Then-Else(Compare(Ability Charge(Event Player, Button(Ability 1)), <, 3), Add(Ability Charge(Event Player, Button(Ability 1)), 1), 3));
                End;
                If(Compare(Hero Of(Event Player), ==, Hero(Tracer)));
                    Set Ability Charge(Event Player, Button(Ability 1), If-Then-Else(Compare(Ability Charge(Event Player, Button(Ability 2)), <, 3), Add(Ability Charge(Event Player, Button(Ability 2)), 1), 3));
                End;
                Wait(0.05, Ignore Condition);
            End;
    }
}

rule ("Passive Mods 14 - Archmage (Secondary Fire)") {
    event {
        Subroutine;
        Archmage5;
    }
    actions {
        If(Compare((Event Player).Passive_Mod, ==, 15));
            While(And(Compare(Ability Cooldown(Event Player, Button(Secondary Fire)), >, 0), Compare((Event Player).Passive_Mod, ==, 15)));
                Wait(1.25, Ignore Condition);
                Set Ability Cooldown(Event Player, Button(Secondary Fire), 0);
                Wait(0.05, Ignore Condition);
            End;
    }
}

rule ("Passive Mods 14 - Archmage (Primary Fire)") {
    event {
        Subroutine;
        Archmage6;
    }
    actions {
        If(Compare((Event Player).Passive_Mod, ==, 15));
            While(Compare(Ability Cooldown(Event Player, Button(Primary Fire)), >, 0));
                Wait(1.25, Ignore Condition);
                Set Ability Cooldown(Event Player, Button(Primary Fire), 0);
                Wait(0.05, Ignore Condition);
            End;
    }
}

rule ("Passive Mods 16 - Aimbot") {
    event {
        Subroutine;
        Aimbot;
    }
    actions {
        While(And(And(And(And(And(And(Compare(Normalized Health(Player Closest To Reticle(Event Player, Opposite Team Of(Team Of(Event Player)))), <, 0.5), Is In View Angle(Event Player, Player Closest To Reticle(Event Player, Opposite Team Of(Team Of(Event Player))), 25)), Is In Line of Sight(Event Player, Player Closest To Reticle(Event Player, Opposite Team Of(Team Of(Event Player))), Enemy Barriers Block LOS)), Not(Has Status(Player Closest To Reticle(Event Player, Opposite Team Of(Team Of(Event Player))), Phased Out))), Not(Has Status(Player Closest To Reticle(Event Player, Opposite Team Of(Team Of(Event Player))), Invincible))), Is Alive(Player Closest To Reticle(Event Player, Opposite Team Of(Team Of(Event Player))))), Has Spawned(Player Closest To Reticle(Event Player, Opposite Team Of(Team Of(Event Player))))));
            Start Facing(Event Player, Direction Towards(Eye Position(Event Player), Update Every Frame(Add(Eye Position(Player Closest To Reticle(Event Player, Opposite Team Of(Team Of(Event Player)))), Vector(0, 0.1, 0)))), 2000, To World, Direction and Turn Rate);
            Wait(0.05, Ignore Condition);
        End;
        Stop Facing(Event Player);
    }
}

rule ("Passive Mods 17 - Smol Mode") {
    event {
        Subroutine;
        SmolMode;
    }
    actions {
        If(And(Not(Array Contains(Array(19, 24), (Event Player).Active_Mod)), Is Crouching(Event Player)));
            Wait(0.1, Ignore Condition);
            Start Scaling Player(Event Player, 0.4, True);
            Set Damage Dealt(Event Player, 35);
            Set Move Speed(Event Player, 150);
            Start Modifying Hero Voice Lines(Event Player, 1.5, True);
            Set Max Health(Event Player, 50);
            Set Player Variable(Event Player, Passive_Mod_Skill_Toggle, 1);
            Set Crouch Enabled(Event Player, False);
            Wait(0.75, Ignore Condition);
            Set Crouch Enabled(Event Player, True);
            Wait Until(Or(Is Button Held(Event Player, Button(Crouch)), Is Dead(Event Player)), 99999);
            Wait(0.1, Ignore Condition);
            Set Crouch Enabled(Event Player, False);
            Start Scaling Player(Event Player, 1, True);
            Set Damage Dealt(Event Player, 100);
            Set Move Speed(Event Player, 100);
            Start Modifying Hero Voice Lines(Event Player, 1, True);
            Set Max Health(Event Player, 100);
            Set Player Variable(Event Player, Passive_Mod_Skill_Toggle, 0);
            Wait(0.75, Ignore Condition);
            Set Crouch Enabled(Event Player, True);
        End;
        If(Compare((Event Player).Mod_Menu_Select, !=, 3));
            Set Max Health(Event Player, 100);
    }
}

rule ("Passive Mods 17 - Smol Mode FX") {
    event {
        Subroutine;
        SmolModeFX;
    }
    actions {
        Abort If(Entity Exists((Event Player).Passive_Mod_FX));
        Create Icon(All Players(All Teams), World Vector Of(Vector(0, 0.5, 0), Event Player, Rotation And Translation), Happy, Visible To and Position, Color(Turquoise), False);
        Set Player Variable(Event Player, Passive_Mod_FX, Last Created Entity);
    }
}

rule ("Passive Mods 18 - Immolation Aura") {
    event {
        Subroutine;
        ImmolationAura;
    }
    actions {
        While(Compare((Event Player).Mod_Menu_Select, ==, 3));
            Set Status(Event Player, Null, Burning, 1.25);
            If(Is Alive(Event Player));
                Damage(Remove From Array(Players Within Radius(Event Player, 6, Opposite Team Of(Team Of(Event Player)), Surfaces And Enemy Barriers), Event Player), Event Player, 50);
                Set Status(Remove From Array(Players Within Radius(Event Player, 6, Opposite Team Of(Team Of(Event Player)), Surfaces And Enemy Barriers), Event Player), Event Player, Burning, 1.25);
            End;
            Wait(1, Ignore Condition);
        End;
    }
}

rule ("Passive Mods 19 - Forcefield") {
    event {
        Subroutine;
        Forcefield;
    }
    actions {
        While(Compare((Event Player).Passive_Mod, ==, 20));
            Set Player Variable(Event Player, Affected_Players, Players Within Radius(Event Player, 6.5, Opposite Team Of(Team Of(Event Player)), Surfaces And Enemy Barriers));
            For Player Variable(Event Player, Passive_Index, 0, Count Of((Event Player).Affected_Players), 1);
                Apply Impulse(Value In Array((Event Player).Affected_Players, (Event Player).Passive_Index), Direction Towards(Add(Position Of(Event Player), Vector(0, -2, 0)), Add(Position Of(Value In Array((Event Player).Affected_Players, (Event Player).Passive_Index)), Vector(0, 0.75, 0))), 13, To World, Cancel Contrary Motion);
                "angleToDirection(horizontalAngleOfDirection(eventPlayer.getFacingDirection()), 30)"
                Play Effect(All Players(All Teams), Echo Sticky Bomb Explosion Effect, Null, Event Player, 0.5);
                Wait(0.116, Ignore Condition);
            End;
            Wait(0.116, Ignore Condition);
        End;
    }
}

rule ("Passive Mods 19 - Forcefield FX") {
    event {
        Subroutine;
        ForcefieldFX;
    }
    actions {
        Abort If(Entity Exists((Event Player).Passive_Mod_FX_Array));
        Create Effect(All Players(All Teams), Ring, Color(Aqua), Event Player, 6.5, Visible To Position and Radius);
        Set Player Variable At Index(Event Player, Passive_Mod_FX_Array, 0, Last Created Entity);
        Create Effect(All Players(All Teams), Lúcio Sound Barrier Protected Sound, Color(Team 1), Event Player, 22.5, Visible To Position and Radius);
        Set Player Variable At Index(Event Player, Passive_Mod_FX_Array, 1, Last Created Entity);
    }
}

rule ("Passive Mods 22 - Cheat Death (On)") {
    event {
        Subroutine;
        CheatDeath;
    }
    actions {
        If(Compare(Health(Event Player), !=, 1));
            Set Status(Event Player, Null, Unkillable, 9999);
            Set Player Variable(Event Player, Passive_Mod_Skill_Toggle, 1);
        End;
        Wait(1, Ignore Condition);
        Wait Until(Or(Compare(Health(Event Player), ==, 1), Compare((Event Player).Mod_Menu_Select, !=, 3)), 99999);
        Abort If(Compare((Event Player).Mod_Menu_Select, !=, 3));
        Create Effect(All Players(All Teams), Good Aura, Color(Purple), Event Player, 0.75, Visible To Position and Radius);
        Set Player Variable At Index(Event Player, Passive_Mod_FX_Array, 0, Last Created Entity);
        Create Effect(All Players(All Teams), Baptiste Immortality Field Protected Sound, Null, Event Player, 75, Visible To Position and Radius);
        Set Player Variable At Index(Event Player, Passive_Mod_FX_Array, 1, Last Created Entity);
        Wait(3, Ignore Condition);
        Destroy Effect((Event Player).Passive_Mod_FX_Array);
        Clear Status(Event Player, Unkillable);
        Set Player Variable(Event Player, Passive_Mod_Skill_Toggle, 0);
        Wait(10, Ignore Condition);
    }
}

rule ("Passive Mods 24 - Level Up") {
    event {
        Subroutine;
        LevelUp;
    }
    actions {
        Set Damage Dealt(Event Player, Add(100, (Event Player).Player_ATK_SPD_HP));
        Set Move Speed(Event Player, Add(100, (Event Player).Player_ATK_SPD_HP));
        Set Max Health(Event Player, Add(100, (Event Player).Player_ATK_SPD_HP));
        Create In-World Text(All Players(All Teams), Custom String("{0} {1}", Custom String("Level: ", Null, Null, Null), Divide((Event Player).Player_ATK_SPD_HP, 4), Null), Event Player, 1, Clip Against Surfaces, Visible To Position and String, Color(White), Default Visibility);
        Set Player Variable(Event Player, Passive_Mod_FX, Last Text ID);
        Wait Until(Compare((Event Player).Mod_Menu_Select, !=, 3), 99999);
        Destroy In-World Text((Event Player).Passive_Mod_FX);
    }
}

rule ("Passive Mods 25 - Killstreak") {
    event {
        Subroutine;
        Killstreak;
    }
    actions {
        If(Not(Entity Exists((Event Player).Passive_Mod_FX_Array)));
            Create In-World Text(Event Player, Custom String("Killstreak: {0} {1} {2}", First Of((Event Player).Num_3), Value In Array((Event Player).Num_3, 1), Value In Array((Event Player).Num_3, 2)), Update Every Frame(Add(Eye Position(Event Player), Multiply(100, Add(Add(Multiply(2.5, World Vector Of(Right, Event Player, Rotation)), Multiply(-1.3, Direction From Angles(Horizontal Angle From Direction(Facing Direction Of(Event Player)), Subtract(Vertical Angle From Direction(Facing Direction Of(Event Player)), 90)))), Multiply(3, Facing Direction Of(Event Player)))))), 2, Do Not Clip, Visible To Position and String, Color(Red), Default Visibility);
            Set Player Variable At Index(Event Player, Passive_Mod_FX_Array, 0, Last Text ID);
        End;
        Set Max Health(Event Player, 75);
        Set Damage Dealt(Event Player, 75);
        Set Healing Received(Event Player, 75);
        Wait Until(Compare((Event Player).Mod_Menu_Select, !=, 3), 99999);
        Destroy In-World Text(First Of((Event Player).Passive_Mod_FX_Array));
    }
}

rule ("Passive Mods 26 - Dark Ritual") {
    event {
        Subroutine;
        DarkRitual;
    }
    actions {
        Set Max Health(Event Player, 75);
        While(And(And(And(And(Compare(Ultimate Charge Percent(Event Player), !=, 100), Not(Is Using Ultimate(Event Player))), Compare((Event Player).Passive_Mod, ==, 27)), Not(Is In Setup)), Not(Is Duplicating(Event Player))));
            Set Ultimate Charge(Event Player, Add(Ultimate Charge Percent(Event Player), 15));
            Wait(4, Ignore Condition);
            If(Compare((Event Player).Mod_Menu_Select, ==, 1));
                Wait Until(Compare((Event Player).Mod_Menu_Select, ==, 3), 99999);
            End;
        End;
    }
}

rule ("Passive Mods 27 - 5% Ultimate / sec") {
    event {
        Subroutine;
        UltimatePerSec2;
    }
    actions {
        While(And(Compare(Ultimate Charge Percent(Event Player), <, 100), Compare((Event Player).Passive_Mod, ==, 28)));
            Set Ultimate Charge(Event Player, Add(Ultimate Charge Percent(Event Player), 2.5));
            Wait(1, Ignore Condition);
        End;
    }
}

rule ("Passive Mods 28 - Omega Boost Ult Tracker") {
    event {
        Subroutine;
        OmegaBoostUlt;
    }
    actions {
        "keep track of omega ult charge respective to normal ult charge (almost half as fast to charge)"
        While(And(Compare((Event Player).Omega_Charge, !=, 100), Compare((Event Player).Passive_Mod, ==, 29)));
            Wait Until(Or(Compare(Ultimate Charge Percent(Event Player), >=, 5), Compare((Event Player).Mod_Menu_Select, !=, 3)), 99999);
            Abort If(Compare((Event Player).Mod_Menu_Select, !=, 3));
            If(Compare((Event Player).Omega_Charge, !=, 100));
                Modify Player Variable(Event Player, Omega_Charge, Add, 4);
                Set Ultimate Charge(Event Player, 0);
                If(Compare((Event Player).Omega_Charge, >, 100));
                    Set Player Variable(Event Player, Omega_Charge, 100);
                End;
            End;
            Wait(0.05, Ignore Condition);
        End;
        Set Ultimate Ability Enabled(Event Player, False);
    }
}

rule ("Passive Mods 28 - Omega Boost") {
    event {
        Subroutine;
        OmegaBoost;
    }
    actions {
        "check if HUD exists:\n If it does not and you are below 100% ult charge, create charge HUD"
        Set Player Variable(Event Player, Current_Hero, Hero Of(Event Player));
        "some stuff to make the hud work if you change heroes"
        If(Compare((Event Player).Current_Hero, !=, Hero Of(Event Player)));
            Destroy In-World Text((Event Player).Passive_Mod_FX);
            Loop;
        End;
        If(And(Not(Entity Exists((Event Player).Passive_Mod_FX)), Compare((Event Player).Omega_Charge, !=, 100)));
            Create In-World Text(Event Player, Custom String("                  {0}\nOmega Boost Charge: {1}", Icon String(Bolt), (Event Player).Omega_Charge, Null), Update Every Frame(Add(Eye Position(Event Player), Multiply(100, Add(Add(Multiply(2.5, World Vector Of(Right, Event Player, Rotation)), Multiply(-1.3, Direction From Angles(Horizontal Angle From Direction(Facing Direction Of(Event Player)), Subtract(Vertical Angle From Direction(Facing Direction Of(Event Player)), 90)))), Multiply(3, Facing Direction Of(Event Player)))))), 2, Do Not Clip, Visible To Position and String, Color(Orange), Default Visibility);
            Set Player Variable(Event Player, Passive_Mod_FX, Last Text ID);
            Wait Until(Or(Compare((Event Player).Omega_Charge, ==, 100), Compare((Event Player).Mod_Menu_Select, !=, 3)), 99999);
            Abort If(Compare((Event Player).Mod_Menu_Select, !=, 3));
            Destroy In-World Text((Event Player).Passive_Mod_FX);
            Play Effect(Event Player, Good Pickup Effect, Null, Event Player, 75);
            Create In-World Text(Event Player, Custom String("                  {0}\nOmega Boost Ready {1}", Icon String(Bolt), Icon String(Checkmark), Null), Update Every Frame(Add(Eye Position(Event Player), Multiply(100, Add(Add(Multiply(2.5, World Vector Of(Right, Event Player, Rotation)), Multiply(-1.3, Direction From Angles(Horizontal Angle From Direction(Facing Direction Of(Event Player)), Subtract(Vertical Angle From Direction(Facing Direction Of(Event Player)), 90)))), Multiply(3, Facing Direction Of(Event Player)))))), 2, Do Not Clip, Visible To Position and String, Color(Orange), Default Visibility);
            Set Player Variable(Event Player, Passive_Mod_FX, Last Text ID);
            Wait(0.016, Ignore Condition);
        End;
        "wait for player to press Q"
        Wait Until(Or(And(And(Compare((Event Player).CastUltimate_Mod_Conditions_Ally, ==, 1), Is Button Held(Event Player, Button(Ultimate))), Compare((Event Player).Omega_Charge, ==, 100)), Compare((Event Player).Mod_Menu_Select, !=, 3)), 99999);
        Abort If(Compare((Event Player).Mod_Menu_Select, !=, 3));
        "determine the target of the ultimate (teammate)"
        Set Player Variable(Event Player, Mod_Effect_Target, Player Closest To Reticle(Event Player, Team Of(Event Player)));
        Wait(0.016, Ignore Condition);
        "player can't press ultimate again until more things have happened"
        Disallow Button(Event Player, Button(Ultimate));
        "targeting effects, visible to you only"
        Play Effect(Event Player, Bad Explosion, Color(Orange), Position Of((Event Player).Mod_Effect_Target), 0.75);
        Create Icon(Event Player, (Event Player).Mod_Effect_Target, Ring Thin, Visible To and Position, Color(Orange), False);
        Set Player Variable At Index(Event Player, Passive_Mod_FX_Array, 0, Last Created Entity);
        Create Icon(Event Player, (Event Player).Mod_Effect_Target, Bolt, Visible To and Position, Color(Yellow), False);
        Set Player Variable At Index(Event Player, Passive_Mod_FX_Array, 1, Last Created Entity);
        Create Icon(Event Player, Subtract((Event Player).Mod_Effect_Target, Vector(0, 0.1, 0)), Arrow: Up, Visible To and Position, Color(Yellow), False);
        Set Player Variable At Index(Event Player, Passive_Mod_FX_Array, 2, Last Created Entity);
        Start Forcing Player Outlines((Event Player).Mod_Effect_Target, Event Player, True, Color(Orange), Default);
        "you must now choose... press Q or wait for timeout"
        Small Message(Event Player, Custom String("Ultimate again to confirm target. Times out after 2.5 sec.", Null, Null, Null));
        Wait(0.5, Ignore Condition);
        Allow Button(Event Player, Button(Ultimate));
        "u have to be awake/not CC'd to follow through on your ult. timeout is 2.5."
        Wait Until(And(And(Is Button Held(Event Player, Button(Ultimate)), Compare((Event Player).CastUltimate_Mod_Conditions_Ally, ==, 1)), And(And(And(And(And(Not(Has Status(Event Player, Asleep)), Not(Has Status(Event Player, Frozen))), Not(Has Status(Event Player, Hacked))), Not(Has Status(Event Player, Knocked Down))), Not(Has Status(Event Player, Phased Out))), Not(Has Status(Event Player, Stunned)))), 2.5);
        "if you've timedout skip all ultimate effects and recover ult charge, destroy targeting effects"
        Skip If(Not(Is Button Held(Event Player, Button(Ultimate))), 58);
        "destroy 'ur ult is ready' text"
        Destroy HUD Text((Event Player).Passive_Mod_FX);
        Small Message(Event Player, Custom String("Omega boost administered!", Null, Null, Null));
        "whole lot of effects for the target"
        Big Message((Event Player).Mod_Effect_Target, Custom String("Omega boost administered!", Null, Null, Null));
        Big Message(All Players(All Teams), Custom String("{0} has been Omega-boosted!", (Event Player).Mod_Effect_Target, Null, Null));
        Small Message((Event Player).Mod_Effect_Target, Custom String("You're super-powered up! Get in there!", Null, Null, Null));
        Play Effect(All Players(All Teams), Bad Explosion, Color(Yellow), (Event Player).Mod_Effect_Target, 1);
        Play Effect(All Players(All Teams), Good Explosion, Color(Yellow), (Event Player).Mod_Effect_Target, 2);
        Create Effect(All Players(All Teams), Baptiste Immortality Field Protected Effect, Team Of(Event Player), (Event Player).Mod_Effect_Target, 1, Visible To Position and Radius);
        Set Player Variable At Index(Event Player, Passive_Mod_FX_Array, 3, Last Created Entity);
        Create Effect(All Players(All Teams), Winston Primal Rage Effect, Team Of(Event Player), (Event Player).Mod_Effect_Target, 1, Visible To Position and Radius);
        Set Player Variable At Index(Event Player, Passive_Mod_FX_Array, 4, Last Created Entity);
        Create Effect(All Players(All Teams), Ana Biotic Grenade Increased Healing Effect, Team Of(Event Player), (Event Player).Mod_Effect_Target, 1, Visible To Position and Radius);
        Set Player Variable At Index(Event Player, Passive_Mod_FX_Array, 5, Last Created Entity);
        Create Effect(All Players(All Teams), Sparkles, Color(Yellow), (Event Player).Mod_Effect_Target, 1.5, Position and Radius);
        Set Player Variable At Index(Event Player, Passive_Mod_FX_Array, 6, Last Created Entity);
        Create Effect(All Players(All Teams), Good Aura, Color(Orange), (Event Player).Mod_Effect_Target, 0.65, Position and Radius);
        Set Player Variable At Index(Event Player, Passive_Mod_FX_Array, 7, Last Created Entity);
        Create Effect(All Players(All Teams), Beacon Sound, Team Of(Event Player), (Event Player).Mod_Effect_Target, 100, Position and Radius);
        Set Player Variable At Index(Event Player, Passive_Mod_FX_Array, 8, Last Created Entity);
        Create Effect(All Players(All Teams), Wrecking Ball Adaptive Shield Target Sound, Team Of(Event Player), (Event Player).Mod_Effect_Target, 100, Position and Radius);
        Set Player Variable At Index(Event Player, Passive_Mod_FX_Array, 9, Last Created Entity);
        Create Effect(All Players(All Teams), Baptiste Immortality Field Protected Sound, Team Of(Event Player), (Event Player).Mod_Effect_Target, 100, Position and Radius);
        Set Player Variable At Index(Event Player, Passive_Mod_FX_Array, 10, Last Created Entity);
        Create Effect(All Players(All Teams), Good Aura Sound, Team Of(Event Player), (Event Player).Mod_Effect_Target, 100, Position and Radius);
        Set Player Variable At Index(Event Player, Passive_Mod_FX_Array, 11, Last Created Entity);
        Start Forcing Player Outlines((Event Player).Mod_Effect_Target, All Players(All Teams), True, Color(Orange), Default);
        "whole lot of stat changes for target"
        Heal((Event Player).Mod_Effect_Target, Event Player, 400);
        Set Status((Event Player).Mod_Effect_Target, Event Player, Unkillable, 10);
        Set Ability Cooldown((Event Player).Mod_Effect_Target, Button(Ability 1), 0);
        Set Ability Cooldown((Event Player).Mod_Effect_Target, Button(Ability 2), 0);
        Set Ability Cooldown((Event Player).Mod_Effect_Target, Button(Secondary Fire), 0);
        Set Ability Charge((Event Player).Mod_Effect_Target, Button(Ability 1), 5);
        Set Ability Charge((Event Player).Mod_Effect_Target, Button(Ability 2), 5);
        Set Damage Dealt((Event Player).Mod_Effect_Target, 175);
        Set Damage Received((Event Player).Mod_Effect_Target, 25);
        Set Healing Dealt((Event Player).Mod_Effect_Target, 175);
        Set Move Speed((Event Player).Mod_Effect_Target, 150);
        Set Ammo((Event Player).Mod_Effect_Target, 0, Max Ammo((Event Player).Mod_Effect_Target, 0));
        Set Ammo((Event Player).Mod_Effect_Target, 1, Max Ammo((Event Player).Mod_Effect_Target, 1));
        Wait(0.5, Ignore Condition);
        "destroy targeting bc u have confirmed the target"
        Destroy In-World Text((Event Player).Passive_Mod_FX);
        Destroy Icon(First Of((Event Player).Passive_Mod_FX_Array));
        Destroy Icon(Value In Array((Event Player).Passive_Mod_FX_Array, 1));
        Destroy Icon(Value In Array((Event Player).Passive_Mod_FX_Array, 2));
        "wait for ult to be over"
        Wait(10, Ignore Condition);
        "set target stats to normal"
        Start Forcing Player Outlines((Event Player).Mod_Effect_Target, All Players(All Teams), True, Team Of((Event Player).Mod_Effect_Target), Default);
        Stop Forcing Player Outlines((Event Player).Mod_Effect_Target, All Players(All Teams));
        Stop Forcing Player Outlines((Event Player).Mod_Effect_Target, Event Player);
        Set Damage Dealt((Event Player).Mod_Effect_Target, 100);
        Set Damage Received((Event Player).Mod_Effect_Target, 100);
        Set Healing Dealt((Event Player).Mod_Effect_Target, 100);
        Set Move Speed((Event Player).Mod_Effect_Target, 100);
        "destroy all boost effects"
        Destroy Effect((Event Player).Passive_Mod_FX_Array);
        "restart ult charge"
        Set Ultimate Ability Enabled(Event Player, True);
        Set Ultimate Charge(Event Player, 0);
        Wait(0.016, Ignore Condition);
        Set Player Variable(Event Player, Omega_Charge, 0);
        "that's it go back to beginning"
        Abort;
        //lbl_0:
        Small Message(Event Player, Custom String("Target cancelled - timed out", Null, Null, Null));
        Wait(0.2, Ignore Condition);
        Set Player Variable(Event Player, Omega_Charge, 100);
        Set Ultimate Ability Enabled(Event Player, False);
        Destroy Icon(First Of((Event Player).Passive_Mod_FX_Array));
        Destroy Icon(Value In Array((Event Player).Passive_Mod_FX_Array, 1));
        Destroy Icon(Value In Array((Event Player).Passive_Mod_FX_Array, 2));
        "idk why i can't actually see the outlines myself but w/e i'm sure it's just a bug"
        Stop Forcing Player Outlines((Event Player).Mod_Effect_Target, Event Player);
    }
}

rule ("Relay Omega Boost status") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        (Event Player).Passive_Mod == 29;
        Is Communicating Any Spray(Event Player) == True;
    }
    actions {
        Small Message(All Players(Team Of(Event Player)), Custom String("{0}'s Ultimate (Omega Boost) is {1}% charged!", Event Player, (Event Player).Omega_Charge, Null));
        Wait(3, Ignore Condition);
    }
}

rule ("Passive Mods 29 - Maximum Might") {
    event {
        Subroutine;
        MaxMight;
    }
    actions {
        If(Compare(Ultimate Charge Percent(Event Player), ==, 100));
            Set Move Speed(Event Player, 130);
            Set Damage Dealt(Event Player, 130);
            Set Max Health(Event Player, 130);
            Abort If(Entity Exists((Event Player).Passive_Mod_FX));
            Create Effect(All Players(All Teams), Sparkles, Color(Orange), Event Player, 1, Visible To Position and Radius);
            Set Player Variable(Event Player, Passive_Mod_FX, Last Created Entity);
        Else If(Compare(Ultimate Charge Percent(Event Player), !=, 100));
            Set Move Speed(Event Player, 100);
            Set Damage Dealt(Event Player, 100);
            Set Max Health(Event Player, 100);
            Destroy Effect((Event Player).Passive_Mod_FX);
    }
}

rule ("Passive Mods 30 - Mana Shield") {
    event {
        Subroutine;
        ManaShield;
    }
    actions {
        If(Compare(Ultimate Charge Percent(Event Player), >=, 15));
            Destroy Effect((Event Player).Passive_Mod_FX);
            Create Effect(All Players(All Teams), Good Aura, Color(Blue), Event Player, 1, Visible To Position and Radius);
            Set Player Variable(Event Player, Passive_Mod_FX, Last Created Entity);
        Else If(Compare(Ultimate Charge Percent(Event Player), <, 15));
            Destroy Effect((Event Player).Passive_Mod_FX);
    }
}

rule ("Passive Mods 31 - Thorns FX") {
    event {
        Subroutine;
        ThornsFX;
    }
    actions {
        While(Is Alive(Event Player));
            If(Entity Exists((Event Player).Passive_Mod_FX));
                Abort;
            Else If(Compare((Event Player).Is_Colossus, ==, True));
                Destroy Effect((Event Player).Passive_Mod_FX);
                Wait Until(Compare((Event Player).Is_Colossus, ==, False), 90);
            End;
            Create Effect(All Players(All Teams), Good Aura, Color(Green), Event Player, 1, Visible To Position and Radius);
            Set Player Variable(Event Player, Passive_Mod_FX, Last Created Entity);
            Wait(1, Ignore Condition);
        End;
    }
}

rule ("Passive Mods 32 - Frost Armor FX") {
    event {
        Subroutine;
        FrostArmorFX;
    }
    actions {
        While(Is Alive(Event Player));
            Abort If(Entity Exists((Event Player).Passive_Mod_FX));
            Create Effect(All Players(All Teams), Good Aura, Color(Aqua), Event Player, 1, Visible To Position and Radius);
            Set Player Variable(Event Player, Passive_Mod_FX, Last Created Entity);
            Wait(0.5, Ignore Condition);
        End;
    }
}

rule ("Passive Mods 38 - Boxer") {
    event {
        Subroutine;
        Boxer;
    }
    actions {
        Set Move Speed(Event Player, 125);
        Set Status(Event Player, Null, Hacked, 9999);
    }
}

rule ("Passive Mods 39 - Evil Eye") {
    event {
        Subroutine;
        EvilEye;
    }
    actions {
        If(And((Event Player).LoS_Mod_Conditions, Compare((Event Player).Passive_Mod, ==, 40)));
            Set Player Variable(Event Player, Current_Target_P, Ray Cast Hit Player(Eye Position(Event Player), Add(Eye Position(Event Player), Multiply(Facing Direction Of(Event Player), 35)), All Players(Opposite Team Of(Team Of(Event Player))), Null, False));
            If(And(Compare((Event Player).Current_Target_P, !=, Null), Is Alive((Event Player).Current_Target_P)));
                Create Effect(Array(Event Player, (Event Player).Current_Target_P), Cloud, Custom Color(255, 0, 0, 64), (Event Player).Current_Target_P, 1, Position and Radius);
                Set Player Variable At Index(Event Player, Passive_Mod_FX_Array, 0, Last Created Entity);
                Create Effect(Array(Event Player, (Event Player).Current_Target_P), Bad Aura Sound, Color(Red), (Event Player).Current_Target_P, 100, Position and Radius);
                Set Player Variable At Index(Event Player, Passive_Mod_FX_Array, 1, Last Created Entity);
                Chase Player Variable Over Time(Event Player, Passive_Time, 0.40, 4, Destination and Duration);
                While(Compare((Event Player).Passive_Time, !=, 0.40));
                    Set Move Speed((Event Player).Current_Target_P, Multiply(100, Subtract(0.85, (Event Player).Passive_Time)));
                    Set Healing Received((Event Player).Current_Target_P, Multiply(100, Subtract(1, Multiply(2, (Event Player).Passive_Time))));
                    Set Healing Dealt((Event Player).Current_Target_P, Multiply(100, Subtract(1, Multiply(2, (Event Player).Passive_Time))));
                    Set Damage Received((Event Player).Current_Target_P, Multiply(100, Add(1, (Event Player).Passive_Time)));
                    Set Damage Dealt((Event Player).Current_Target_P, Multiply(100, Subtract(1, (Event Player).Passive_Time)));
                    If(Compare((Event Player).Current_Target_P, !=, Ray Cast Hit Player(Eye Position(Event Player), Add(Eye Position(Event Player), Multiply(Facing Direction Of(Event Player), 25)), All Players(Opposite Team Of(Team Of(Event Player))), Null, False)));
                        Break;
                    End;
                    Wait(0.05, Ignore Condition);
                End;
                Stop Chasing Player Variable(Event Player, Passive_Time);
                Set Player Variable(Event Player, Old_Target_P, (Event Player).Current_Target_P);
                Wait Until(Or(Or(Compare((Event Player).Current_Target_P, ==, Null), Compare((Event Player).Current_Target_P, !=, Ray Cast Hit Player(Eye Position(Event Player), Add(Eye Position(Event Player), Multiply(Facing Direction Of(Event Player), 25)), All Players(Opposite Team Of(Team Of(Event Player))), Null, False))), Compare((Event Player).Mod_Menu_Select, !=, 3)), 99999);
                Wait(3.5, Ignore Condition);
                If(And(Is Alive((Event Player).Current_Target_P), Compare((Event Player).Current_Target_P, ==, Ray Cast Hit Player(Eye Position(Event Player), Add(Eye Position(Event Player), Multiply(Facing Direction Of(Event Player), 25)), All Players(Opposite Team Of(Team Of(Event Player))), Null, False))));
                    Wait Until(Or(Or(Compare((Event Player).Current_Target_P, ==, Null), Compare((Event Player).Current_Target_P, !=, Ray Cast Hit Player(Eye Position(Event Player), Add(Eye Position(Event Player), Multiply(Facing Direction Of(Event Player), 25)), All Players(Opposite Team Of(Team Of(Event Player))), Null, False))), Compare((Event Player).Mod_Menu_Select, !=, 3)), 99999);
                End;
                Set Player Variable(Event Player, Passive_Time, 0);
                Set Move Speed((Event Player).Current_Target_P, 100);
                Set Healing Received((Event Player).Current_Target_P, 100);
                Set Healing Dealt((Event Player).Current_Target_P, 100);
                Set Damage Received((Event Player).Current_Target_P, 100);
                Set Damage Dealt((Event Player).Current_Target_P, 100);
                Wait(0.5, Ignore Condition);
                Destroy Effect((Event Player).Passive_Mod_FX_Array);
                Play Effect(Array(Event Player, (Event Player).Old_Target_P), Bad Explosion, Color(Red), (Event Player).Old_Target_P, 1);
                Set Player Variable(Event Player, Old_Target_P, Null);
            Else If(Or(Is Dead((Event Player).Current_Target_P), Compare((Event Player).Mod_Menu_Select, !=, 3)));
                Destroy Effect((Event Player).Passive_Mod_FX_Array);
            End;
        End;
        Wait(0.25, Ignore Condition);
        Loop;
    }
}

rule ("Passive Mods 40 - Superhero Landing") {
    event {
        Subroutine;
        SuperheroLanding;
    }
    actions {
        If(Is In Air(Event Player));
            Chase Player Variable At Rate(Event Player, Vertical_Speed, Vertical Speed Of(Event Player), If-Then-Else(Is In Air(Event Player), 1000, Null), Destination and Rate);
            Wait Until(Is On Ground(Event Player), 99999);
            If(Compare((Event Player).Vertical_Speed, <, -20));
                Play Effect(All Players(All Teams), Doomfist Meteor Strike Impact Sound, Team Of(Event Player), Position Of(Event Player), 200);
                Play Effect(All Players(All Teams), Pharah Rocket Launcher Explosion Sound, Team Of(Event Player), Position Of(Event Player), 150);
                Play Effect(All Players(All Teams), Winston Jump Pack Landing Effect, Team Of(Event Player), Position Of(Event Player), 1);
                Play Effect(All Players(All Teams), Wrecking Ball Piledriver Impact Effect, Team Of(Event Player), Position Of(Event Player), 200);
            Else If(Compare((Event Player).Vertical_Speed, <, -17));
                Play Effect(All Players(All Teams), Sigma Accretion Impact Effect, Team Of(Event Player), Position Of(Event Player), 1);
                Play Effect(All Players(All Teams), Winston Jump Pack Landing Effect, Team Of(Event Player), Position Of(Event Player), 1);
                Play Effect(All Players(All Teams), Pharah Rocket Launcher Explosion Sound, Team Of(Event Player), Position Of(Event Player), 100);
            Else If(Compare((Event Player).Vertical_Speed, <, -13.5));
                Play Effect(All Players(All Teams), Sigma Accretion Impact Effect, Team Of(Event Player), Position Of(Event Player), 1);
                Play Effect(All Players(All Teams), Pharah Rocket Launcher Explosion Sound, Team Of(Event Player), Position Of(Event Player), 50);
            End;
            If(Compare((Event Player).Vertical_Speed, <, -10.5));
                If(Compare(Hero Of(Event Player), ==, Hero(Wrecking Ball)));
                    Modify Player Variable(Event Player, Vertical_Speed, Multiply, 0.25);
                Else If(Or(Compare(Hero Of(Event Player), ==, Hero(Winston)), Compare(Hero Of(Event Player), ==, Hero(Pharah))));
                    Modify Player Variable(Event Player, Vertical_Speed, Multiply, 0.85);
                End;
                Damage(Remove From Array(Players Within Radius(Event Player, Max(Multiply(Absolute Value((Event Player).Vertical_Speed), 0.5), 4), Opposite Team Of(Team Of(Event Player)), Surfaces And Enemy Barriers), Event Player), Event Player, Max(30, Raise To Power(Divide(Absolute Value((Event Player).Vertical_Speed), 6.55), 4)));
                Set Status(Remove From Array(Players Within Radius(Event Player, Max(Multiply(Absolute Value((Event Player).Vertical_Speed), 0.5), 4), Opposite Team Of(Team Of(Event Player)), Surfaces And Enemy Barriers), Event Player), Event Player, Knocked Down, Multiply(Absolute Value((Event Player).Vertical_Speed), 0.09));
                Play Effect(All Players(All Teams), Ring Explosion, Color(Red), Event Player, Max(Multiply(Absolute Value((Event Player).Vertical_Speed), 0.6), 4));
                Play Effect(All Players(All Teams), Pharah Rocket Launcher Explosion Effect, Team Of(Event Player), Position Of(Event Player), 1);
                Play Effect(All Players(All Teams), Pharah Rocket Launcher Explosion Sound, Team Of(Event Player), Position Of(Event Player), 25);
            End;
        End;
        Wait(3, Ignore Condition);
    }
}

rule ("Passive Mods 43 - Power Points") {
    event {
        Subroutine;
        PowerPoints;
    }
    actions {
        If(Not(Entity Exists((Event Player).Passive_Mod_FX_Array)));
            Set Player Variable At Index(Event Player, Num_3, 0, 0);
            Set Player Variable At Index(Event Player, Num_3, 1, Custom String("", Null, Null, Null));
            Create In-World Text(Event Player, Custom String("Superjump: 25PP\nAbility 1 Refresh: 100PP\nAbility 2 Refresh: 100PP\n+25% Ult: 175PP", Null, Null, Null), Update Every Frame(Add(Eye Position(Event Player), Multiply(100, Add(Add(Multiply(2.5, World Vector Of(Right, Event Player, Rotation)), Multiply(-1.2, Direction From Angles(Horizontal Angle From Direction(Facing Direction Of(Event Player)), Subtract(Vertical Angle From Direction(Facing Direction Of(Event Player)), 90)))), Multiply(3, Facing Direction Of(Event Player)))))), 1.5, Do Not Clip, Visible To Position and String, Custom Color(180, 180, 180, 255), Default Visibility);
            Set Player Variable At Index(Event Player, Passive_Mod_FX_Array, 0, Last Text ID);
            Create In-World Text(Event Player, Custom String("PP: {0}{1}", First Of((Event Player).Num_3), Value In Array((Event Player).Num_3, 1), Null), Update Every Frame(Add(Eye Position(Event Player), Multiply(100, Add(Add(Multiply(2.5, World Vector Of(Right, Event Player, Rotation)), Multiply(-1.3, Direction From Angles(Horizontal Angle From Direction(Facing Direction Of(Event Player)), Subtract(Vertical Angle From Direction(Facing Direction Of(Event Player)), 90)))), Multiply(3, Facing Direction Of(Event Player)))))), 2.25, Do Not Clip, Visible To Position and String, Color(Yellow), Default Visibility);
            Set Player Variable At Index(Event Player, Passive_Mod_FX_Array, 1, Last Text ID);
        End;
        While(Compare((Event Player).Mod_Menu_Select, ==, 3));
            If(Compare(First Of((Event Player).Num_3), >=, 300));
                Modify Player Variable At Index(Event Player, Num_3, 0, Subtract, Subtract(First Of((Event Player).Num_3), 300));
            Else;
                Modify Player Variable At Index(Event Player, Num_3, 0, Add, 1);
            End;
            Wait(0.75, Ignore Condition);
        End;
        Wait Until(Compare((Event Player).Mod_Menu_Select, !=, 3), 99999);
        Destroy In-World Text((Event Player).Passive_Mod_FX_Array);
    }
}

rule ("Passive Mods 43 - Power Points (Spend Power Points)") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        (Event Player).Mod_Menu_Select == 3;
        (Event Player).Passive_Mod == 44;
        Is Button Held(Event Player, Button(Interact)) == True;
        (Event Player).Passive_Mod_Skill_Toggle == 0;
        First Of((Event Player).Num_3) >= 50;
    }
    actions {
        Set Player Variable(Event Player, Passive_Mod_Skill_Toggle, 1);
        Wait(0.15, Ignore Condition);
        Play Effect(Event Player, Buff Impact Sound, Null, Event Player, 100);
        Play Effect(Event Player, Brigitte Repair Pack Impact Sound, Null, Position Of(Event Player), 150);
        Play Effect(Event Player, Brigitte Repair Pack Impact Effect, Color(Team 1), Eye Position(Event Player), 1);
        Set Player Variable(Event Player, Passive_Index, 5);
        Wait(0.016, Ignore Condition);
        Chase Player Variable Over Time(Event Player, Passive_Index, 0, 5, Destination and Duration);
        Set Player Variable At Index(Event Player, Num_3, 1, Custom String(" - SPENDING{0}", Custom String(": {0}...", Update Every Frame(Round To Integer((Event Player).Passive_Index, Up)), Null, Null), Null, Null));
        Wait(0.1, Ignore Condition);
        Wait Until(Or(Or(Or(Or(Or(Or(Is Button Held(Event Player, Button(Jump)), Is Button Held(Event Player, Button(Interact))), Is Button Held(Event Player, Button(Ability 1))), Is Button Held(Event Player, Button(Ability 2))), Is Button Held(Event Player, Button(Ultimate))), Compare((Event Player).Passive_Index, ==, 0)), Compare((Event Player).Mod_Menu_Select, !=, 3)), 999999);
        Stop Chasing Player Variable(Event Player, Passive_Index);
        If(Compare((Event Player).Passive_Index, ==, 0));
            Set Player Variable At Index(Event Player, Num_3, 1, Custom String("", Null, Null, Null));
            Set Player Variable(Event Player, Passive_Mod_Skill_Toggle, 0);
            Wait(2, Ignore Condition);
            Abort;
        End;
        If(Compare((Event Player).Mod_Menu_Select, !=, 3));
            Destroy Effect((Event Player).Passive_Mod_FX_Array);
            Abort;
        End;
        If(And(And(Is Button Held(Event Player, Button(Jump)), Compare(First Of((Event Player).Num_3), >=, 25)), Compare(Altitude Of(Event Player), <=, 1)));
            Wait(0.05, Ignore Condition);
            Modify Player Variable At Index(Event Player, Num_3, 0, Subtract, 25);
            Apply Impulse(Event Player, Up, 15, To World, Cancel Contrary Motion);
            Play Effect(All Players(All Teams), Good Pickup Effect, Color(Yellow), Event Player, 2);
            Play Effect(All Players(All Teams), Debuff Impact Sound, Null, Event Player, 100);
        Else If(And(Is Button Held(Event Player, Button(Ability 1)), Compare(First Of((Event Player).Num_3), >=, 100)));
            Wait(0.05, Ignore Condition);
            If(Compare(Ability Cooldown(Event Player, Button(Ability 1)), >, 0));
                Set Ability Cooldown(Event Player, Button(Ability 1), 0);
                Modify Player Variable At Index(Event Player, Num_3, 0, Subtract, 100);
            Else If(Compare(Ability Charge(Event Player, Button(Ability 1)), ==, 0));
                Set Ability Charge(Event Player, Button(Ability 1), Add(Ability Charge(Event Player, Button(Ability 1)), 1));
                Modify Player Variable At Index(Event Player, Num_3, 0, Subtract, 100);
            End;
        Else If(And(Is Button Held(Event Player, Button(Ability 2)), Compare(First Of((Event Player).Num_3), >=, 100)));
            Wait(0.05, Ignore Condition);
            If(Compare(Ability Cooldown(Event Player, Button(Ability 2)), >, 0));
                Set Ability Cooldown(Event Player, Button(Ability 2), 0);
                Modify Player Variable At Index(Event Player, Num_3, 0, Subtract, 100);
            Else If(Compare(Ability Charge(Event Player, Button(Ability 2)), ==, 0));
                Set Ability Charge(Event Player, Button(Ability 2), Add(Ability Charge(Event Player, Button(Ability 2)), 1));
                Modify Player Variable At Index(Event Player, Num_3, 0, Subtract, 100);
            End;
        Else If(And(Is Button Held(Event Player, Button(Ultimate)), Compare(First Of((Event Player).Num_3), >=, 175)));
            Wait(0.05, Ignore Condition);
            If(Compare(Ultimate Charge Percent(Event Player), <, 100));
                Modify Player Variable At Index(Event Player, Num_3, 0, Subtract, 175);
                Set Ultimate Charge(Event Player, Add(Ultimate Charge Percent(Event Player), 25));
            End;
        End;
        Set Player Variable At Index(Event Player, Num_3, 1, Custom String("", Null, Null, Null));
        Set Player Variable(Event Player, Passive_Mod_Skill_Toggle, 0);
        Wait(2, Ignore Condition);
    }
}

rule ("Passive Mods 44 - Null Zone") {
    event {
        Subroutine;
        NullZone;
    }
    actions {
        Wait Until(Or(Compare(First Of((Event Player).Null_Zone), !=, Vector(0, -400, 0)), Compare((Event Player).Mod_Menu_Select, !=, 3)), 99999);
        Abort If(Compare((Event Player).Mod_Menu_Select, !=, 3));
        Set Player Variable(Event Player, Affected_Players, Add(Add(Players Within Radius(First Of((Event Player).Null_Zone), 2, Opposite Team Of(Team Of(Event Player)), Surfaces), Players Within Radius(Value In Array((Event Player).Null_Zone, 1), 2, Opposite Team Of(Team Of(Event Player)), Surfaces)), Players Within Radius(Value In Array((Event Player).Null_Zone, 2), 2, Opposite Team Of(Team Of(Event Player)), Surfaces)));
        If(And(And(And(Is Alive(Event Player), Compare(Value In Array((Event Player).Num_0, 1), ==, 2.5)), Compare(Value In Array((Event Player).Num_0, 2), ==, 2.5)), Compare(Value In Array((Event Player).Num_0, 3), ==, 2.5)));
            Play Effect((Event Player).Affected_Players, Reaper Wraith Form Sound, Null, First Of((Event Player).Null_Zone), 200);
            Play Effect((Event Player).Affected_Players, Reaper Wraith Form Sound, Null, Value In Array((Event Player).Null_Zone, 1), 200);
            Play Effect((Event Player).Affected_Players, Reaper Wraith Form Sound, Null, Value In Array((Event Player).Null_Zone, 2), 200);
            Kill((Event Player).Affected_Players, Event Player);
        End;
        Wait(1.5, Ignore Condition);
    }
}

rule ("Choose/Check Passive Mod") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        (Event Player).Mod_Menu_Select == 3;
    }
    actions {
        Abort If(Compare((Event Player).Mod_Menu_Select, ==, 0));
        If(Or(Has Status(Event Player, Stunned), Is Dead(Event Player)));
            Wait(1.5, Ignore Condition);
            Loop;
        Else;
            Wait(0.032, Ignore Condition);
            If(True);
            Skip(Value In Array(Array(94, 0, 1, 2, 4, 6, 9, 13, 15, 20, 22, 27, 30, 33, 41, 49, 51, 53, 56, 58, 61, 63, 65, 67, 69, 71, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92), Add(1, Index Of Array Value(Array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 14, 15, 16, 17, 18, 19, 20, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 39, 40, 41, 43, 44, 45), (Event Player).Passive_Mod))));
            //__label_switch_2_0__:
            Else;
            //__label_switch_2_1__:
            Else;
            //__label_switch_2_2__:
            Set Damage Dealt(Event Player, 140);
            Else;
            //__label_switch_2_3__:
            Call Subroutine(MoveSpeed160);
            Else;
            //__label_switch_2_4__:
            "@Name \"Passive Mods 5 - 50% Gravity + 133% Movespeed\""
            Set Move Speed(Event Player, 133);
            Set Gravity(Event Player, 50);
            Else;
            //__label_switch_2_5__:
            "@Name \"Passive Mods 8 - Recklessness\""
            Set Move Speed(Event Player, 160);
            Set Damage Dealt(Event Player, 160);
            Set Max Health(Event Player, 30);
            Else;
            //__label_switch_2_6__:
            Start Rule(BootsOfMobility, Do Nothing);
            Else;
            //__label_switch_2_7__:
            Start Damage Modification(Event Player, All Players(Opposite Team Of(Team Of(Event Player))), 66.66, Receivers Damagers and Damage Percent);
            Set Player Variable(Event Player, Passive_Index, Last Damage Modification ID);
            Wait Until(Compare((Event Player).Mod_Menu_Select, !=, 3), 99999);
            Stop Damage Modification((Event Player).Passive_Index);
            Else;
            //__label_switch_2_8__:
            Call Subroutine(RaidBoss);
            Else;
            //__label_switch_2_9__:
            If(Not((Event Player).Is_Colossus));
                Set Max Health(Event Player, 150);
                Set Healing Received(Event Player, 150);
            End;
            Else;
            //__label_switch_2_10__:
            Set Healing Dealt(Event Player, 150);
            Set Healing Received(Event Player, 150);
            Else;
            //__label_switch_2_11__:
            Start Rule(Rejuvenation, Do Nothing);
            Call Subroutine(RejuvenationFX);
            Else;
            //__label_switch_2_12__:
            Set Max Health(Event Player, 70);
            Start Rule(Spellslinger1, Do Nothing);
            Start Rule(Spellslinger2, Do Nothing);
            Start Rule(Spellslinger3, Do Nothing);
            Start Rule(Spellslinger4, Do Nothing);
            Start Rule(Spellslinger5, Do Nothing);
            Start Rule(Spellslinger6, Do Nothing);
            Else;
            //__label_switch_2_13__:
            Set Max Health(Event Player, 40);
            Start Rule(Archmage1, Do Nothing);
            Start Rule(Archmage2, Do Nothing);
            Start Rule(Archmage3, Do Nothing);
            Start Rule(Archmage4, Do Nothing);
            Start Rule(Archmage5, Do Nothing);
            Start Rule(Archmage6, Do Nothing);
            Else;
            //__label_switch_2_14__:
            Set Projectile Speed(Event Player, 300);
            Else;
            //__label_switch_2_15__:
            Start Rule(Aimbot, Do Nothing);
            Else;
            //__label_switch_2_16__:
            Start Rule(SmolMode, Do Nothing);
            Call Subroutine(SmolModeFX);
            Else;
            //__label_switch_2_17__:
            Start Rule(ImmolationAura, Do Nothing);
            Else;
            //__label_switch_2_18__:
            Start Rule(Forcefield, Do Nothing);
            Call Subroutine(ForcefieldFX);
            Else;
            //__label_switch_2_19__:
            Start Rule(CheatDeath, Do Nothing);
            Else;
            //__label_switch_2_20__:
            Start Rule(LevelUp, Do Nothing);
            Else;
            //__label_switch_2_21__:
            Call Subroutine(Killstreak);
            Else;
            //__label_switch_2_22__:
            Start Rule(DarkRitual, Do Nothing);
            Else;
            //__label_switch_2_23__:
            Start Rule(UltimatePerSec2, Do Nothing);
            Else;
            //__label_switch_2_24__:
            Start Rule(OmegaBoostUlt, Do Nothing);
            Start Rule(OmegaBoost, Do Nothing);
            Else;
            //__label_switch_2_25__:
            Call Subroutine(MaxMight);
            Else;
            //__label_switch_2_26__:
            Call Subroutine(ManaShield);
            Else;
            //__label_switch_2_27__:
            Call Subroutine(ThornsFX);
            Else;
            //__label_switch_2_28__:
            Call Subroutine(FrostArmorFX);
            Else;
            //__label_switch_2_29__:
            Call Subroutine(Boxer);
            Else;
            //__label_switch_2_30__:
            Start Rule(EvilEye, Do Nothing);
            Else;
            //__label_switch_2_31__:
            Start Rule(SuperheroLanding, Do Nothing);
            Else;
            //__label_switch_2_32__:
            Set Player Variable(Event Player, Optimize, 3);
            Else;
            //__label_switch_2_33__:
            Start Rule(PowerPoints, Do Nothing);
            Else;
            //__label_switch_2_34__:
            Start Rule(NullZone, Do Nothing);
            Else;
            //__label_switch_2_default__:
            End;
        End;
        Wait(1, Ignore Condition);
        Loop If Condition Is True;
        Loop;
        "pass"
        disabled Abort;
    }
}

rule ("Passive Mods - Level Up (Active)") {
    event {
        Subroutine;
        LevelUpDing;
    }
    actions {
        Abort If(Compare(Divide((Event Player).Player_ATK_SPD_HP, 4), ==, 15));
        Modify Player Variable(Event Player, Player_ATK_SPD_HP, Add, 4);
        Set Damage Dealt(Event Player, Add(100, (Event Player).Player_ATK_SPD_HP));
        Set Move Speed(Event Player, Add(100, (Event Player).Player_ATK_SPD_HP));
        Set Max Health(Event Player, Add(100, (Event Player).Player_ATK_SPD_HP));
    }
}

rule ("Passive Mods - Killstreak (Active)") {
    event {
        Subroutine;
        KillstreakFinalBlow;
    }
    actions {
        If(Compare((Event Player).Num_2, <, 4));
            Modify Player Variable(Event Player, Num_2, Add, 1);
        End;
        Wait(0.5, Ignore Condition);
        If(Compare((Event Player).Num_2, ==, 1));
            Set Player Variable At Index(Event Player, Num_3, 0, Icon String(Skull));
            Set Ultimate Charge(Event Player, Add(Ultimate Charge Percent(Event Player), 25));
            Set Damage Dealt(Event Player, 110);
            Set Max Health(Event Player, 110);
            Set Move Speed(Event Player, 110);
            Heal(Event Player, Null, 100);
            Play Effect(Event Player, Buff Impact Sound, Null, Event Player, 60);
        Else If(Compare((Event Player).Num_2, ==, 2));
            Set Player Variable At Index(Event Player, Num_3, 1, Icon String(Skull));
            Set Ultimate Charge(Event Player, Add(Ultimate Charge Percent(Event Player), 25));
            Set Damage Dealt(Event Player, 125);
            Set Max Health(Event Player, 125);
            Set Move Speed(Event Player, 120);
            Heal(Event Player, Null, 200);
            Play Effect(Event Player, Buff Impact Sound, Null, Event Player, 60);
        Else If(Compare((Event Player).Num_2, ==, 3));
            Set Player Variable At Index(Event Player, Num_3, 2, Icon String(Skull));
            Set Ultimate Charge(Event Player, Add(Ultimate Charge Percent(Event Player), 25));
            Set Damage Dealt(Event Player, 140);
            Set Max Health(Event Player, 140);
            Set Move Speed(Event Player, 130);
            Heal(Event Player, Null, 300);
            Play Effect(Event Player, Buff Impact Sound, Null, Event Player, 60);
        Else If(Compare((Event Player).Num_2, ==, 4));
            Abort;
    }
}

rule ("Mods PlayerDealtFinalBlow Events") {
    event {
        Player Dealt Final Blow;
        All;
        All;
    }
    conditions {
        (Event Player).Mod_Menu_Select == 3;
    }
    actions {
        If(Compare(Attacker, !=, Victim));
            If(Compare((Event Player).Passive_Mod, ==, 25));
                Call Subroutine(LevelUpDing);
            Else If(Compare((Event Player).Passive_Mod, ==, 26));
                Call Subroutine(KillstreakFinalBlow);
    }
}

rule ("Active Mods 1 - Blink") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        (Event Player).Mod_Menu_Select == 3;
        (Event Player).Active_Mod == 2;
        Global.Intermission_In_Progress == False;
        Is Button Held(Event Player, Button(Melee)) == True;
        (Event Player).OraOra == False;
        (Event Player).Passive_Mod != 39;
    }
    actions {
        Play Effect(All Players(All Teams), Tracer Recall Disappear Effect, Team Of(Event Player), Event Player, 3);
        Wait(0.15, Ignore Condition);
        Teleport(Event Player, Add(Event Player, Multiply(Facing Direction Of(Event Player), 7)));
        Play Effect(All Players(All Teams), Symmetra Teleporter Reappear Sound, Opposite Team Of(Team Of(Event Player)), Event Player, 200);
        If(Not(Is Moving(Event Player)));
            Play Effect(All Players(All Teams), Tracer Recall Reappear Effect, Team Of(Event Player), Event Player, 1);
        Else If(Is Moving(Event Player));
            ".getPosition() # + eventPlayer.getFacingDirection() * 1.2, 1)"
            Play Effect(All Players(All Teams), Tracer Recall Reappear Effect, Team Of(Event Player), Event Player, 1);
        End;
        Set Player Variable(Event Player, Cooldown_Chase, Subtract(2.85, Multiply((Event Player).Optimize, 0.5)));
        Set Player Variable(Event Player, Cd_Color, Custom Color(180, 180, 180, 255));
        Set Player Variable(Event Player, Cooldown_String_1, Custom String("Cooldown:", Null, Null, Null));
        Chase Player Variable At Rate(Event Player, Cooldown_Chase, 0, 1, Destination and Rate);
        Wait Until(Or(Compare((Event Player).Cooldown_Chase, ==, 0), Compare((Event Player).Mod_Menu_Select, !=, 3)), 9999);
        If(Compare((Event Player).Mod_Menu_Select, !=, 3));
            Set Player Variable(Event Player, Cd_Visible_To, Array(Null));
        End;
        Stop Chasing Player Variable(Event Player, Cooldown_Chase);
        Wait(0.016, Ignore Condition);
        Set Player Variable(Event Player, Cd_Color, Color(Green));
        Set Player Variable(Event Player, Cooldown_String_1, Custom String("Ready", Null, Null, Null));
        Set Player Variable(Event Player, Cooldown_Chase, Icon String(Checkmark));
    }
}

rule ("Active Mods 2 - Human Cannonball") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        (Event Player).Mod_Menu_Select == 3;
        (Event Player).Active_Mod == 3;
        Global.Intermission_In_Progress == False;
        Altitude Of(Event Player) <= 1;
        Or(Is Button Held(Event Player, Button(Melee)), And(Array Contains(Array(Hero(Brigitte), Hero(Reinhardt)), Hero Of(Event Player)), Is Button Held(Event Player, Button(Reload)))) == True;
    }
    actions {
        Set Player Variable(Event Player, Player_Position, Position Of(Event Player));
        Start Facing(Event Player, Facing Direction Of(Event Player), 360, To World, Direction and Turn Rate);
        Wait(0.02, Ignore Condition);
        Apply Impulse(Event Player, Add(Facing Direction Of(Event Player), Vector(0, 0.25, 0)), 30, To World, Cancel Contrary Motion);
        Play Effect(All Players(All Teams), Bastion Tank Cannon Explosion Effect, Team Of(Event Player), Position Of(Event Player), 1);
        Play Effect(All Players(All Teams), Bastion Tank Cannon Explosion Sound, Team Of(Event Player), Position Of(Event Player), 200);
        Set Player Variable(Event Player, Target_Position, Ray Cast Hit Position(Eye Position(Event Player), Add(Eye Position(Event Player), Multiply(Facing Direction Of(Event Player), 30)), All Players(All Teams), Empty Array, False));
        Wait(0.116, Ignore Condition);
        Stop Facing(Event Player);
        Wait(0.032, Ignore Condition);
        If(Compare((Event Player).Mod_Menu_Select, !=, 3));
            Set Player Variable(Event Player, Cd_Visible_To, Array(Null));
        End;
        Set Player Variable(Event Player, Cd_Color, Color(Yellow));
        Set Player Variable(Event Player, Cd_Visible_To, Event Player);
        Set Player Variable(Event Player, Cooldown_String_1, Custom String("Active", Null, Null, Null));
        Set Player Variable(Event Player, Cooldown_Chase, Ability Icon String(Hero(Soldier: 76), Button(Ability 1)));
        Wait(0.032, Ignore Condition);
        While(Compare(Altitude Of(Event Player), >, 0.5));
            Modify Player Variable(Event Player, Active_Time, Add, 1);
            Wait(0.1, Ignore Condition);
        End;
        Wait Until(Compare(Altitude Of(Event Player), <=, 0.4), 10);
        Set Status(Event Player, Null, Knocked Down, 1.25);
        Play Effect(All Players(All Teams), Junkrat Frag Launcher Explosion Effect, Team Of(Event Player), Position Of(Event Player), 1);
        Play Effect(All Players(All Teams), Bastion Tank Cannon Explosion Sound, Team Of(Event Player), Position Of(Event Player), 85);
        Damage(Players Within Radius(Position Of(Event Player), 5.5, Opposite Team Of(Team Of(Event Player)), Surfaces And Enemy Barriers), Event Player, Add(35, Min((Event Player).Active_Time, 150)));
        Damage(Event Player, Null, Add(25, Min(Divide((Event Player).Active_Time, 2), 80)));
        Set Player Variable(Event Player, Active_Affected_Players, Players Within Radius(Event Player, 5.5, Opposite Team Of(Team Of(Event Player)), Surfaces And Enemy Barriers));
        For Player Variable(Event Player, Active_Index, 0, Count Of((Event Player).Active_Affected_Players), 1);
            Set Status((Event Player).Active_Affected_Players, Null, Knocked Down, 1.5);
            Wait(0.016, Ignore Condition);
        End;
        Set Player Variable(Event Player, Cooldown_Chase, Subtract(6, (Event Player).Optimize));
        Set Player Variable(Event Player, Cd_Color, Custom Color(180, 180, 180, 255));
        Set Player Variable(Event Player, Cooldown_String_1, Custom String("Cooldown:", Null, Null, Null));
        Chase Player Variable At Rate(Event Player, Cooldown_Chase, 0, 1, Destination and Rate);
        Wait Until(Or(Compare((Event Player).Cooldown_Chase, ==, 0), Compare((Event Player).Mod_Menu_Select, !=, 3)), 9999);
        If(Compare((Event Player).Mod_Menu_Select, !=, 3));
            Set Player Variable(Event Player, Cd_Visible_To, Array(Null));
        End;
        Stop Chasing Player Variable(Event Player, Cooldown_Chase);
        Wait(0.016, Ignore Condition);
        Set Player Variable(Event Player, Cd_Color, Color(Green));
        Set Player Variable(Event Player, Cooldown_String_1, Custom String("Ready", Null, Null, Null));
        Set Player Variable(Event Player, Cooldown_Chase, Icon String(Checkmark));
    }
}

rule ("Active Mods 3 - Shadowstep") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        (Event Player).Mod_Menu_Select == 3;
        (Event Player).Active_Mod == 4;
        (Event Player).CastMelee_Mod_Conditions == 1;
        (Event Player).Passive_Mod != 39;
    }
    actions {
        Set Player Variable(Event Player, Mod_Effect_Target, Player Closest To Reticle(Event Player, Opposite Team Of(Team Of(Event Player))));
        Play Effect(All Players(All Teams), Moira Fade Disappear Effect, Color(Purple), Position Of(Event Player), 1);
        Play Effect(All Players(All Teams), Moira Fade Disappear Sound, Color(Team 2), Position Of(Event Player), 100);
        Wait(0.21, Abort When False);
        Play Effect(All Players(All Teams), Moira Fade Disappear Effect, Color(Purple), Position Of(Event Player), 1);
        Wait(0.21, Abort When False);
        Play Effect(All Players(All Teams), Moira Fade Disappear Effect, Color(Purple), Position Of(Event Player), 1);
        Wait(0.21, Abort When False);
        Teleport(Event Player, Nearest Walkable Position(World Vector Of(Vector(0, 0.5, -3.5), (Event Player).Mod_Effect_Target, Rotation And Translation)));
        Set Facing(Event Player, Direction Towards(Event Player, (Event Player).Mod_Effect_Target), To World);
        Play Effect(All Players(All Teams), Moira Fade Reappear Sound, Color(Team 2), Position Of(Event Player), 100);
        Set Player Variable(Event Player, Cooldown_Chase, Subtract(12, Multiply((Event Player).Optimize, 2)));
        Set Player Variable(Event Player, Cd_Color, Custom Color(180, 180, 180, 255));
        Set Player Variable(Event Player, Cooldown_String_1, Custom String("Cooldown:", Null, Null, Null));
        Chase Player Variable At Rate(Event Player, Cooldown_Chase, 0, 1, Destination and Rate);
        Wait Until(Or(Compare((Event Player).Cooldown_Chase, ==, 0), Compare((Event Player).Mod_Menu_Select, !=, 3)), 9999);
        If(Compare((Event Player).Mod_Menu_Select, !=, 3));
            Set Player Variable(Event Player, Cd_Visible_To, Array(Null));
        End;
        Stop Chasing Player Variable(Event Player, Cooldown_Chase);
        Wait(0.016, Ignore Condition);
        Set Player Variable(Event Player, Cd_Color, Color(Green));
        Set Player Variable(Event Player, Cooldown_String_1, Custom String("Ready", Null, Null, Null));
        Set Player Variable(Event Player, Cooldown_Chase, Icon String(Checkmark));
    }
}

rule ("Active Mods 4 - Translocate") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        (Event Player).Mod_Menu_Select == 3;
        (Event Player).Active_Mod == 5;
        (Event Player).CastMelee_Mod_Conditions == 1;
    }
    actions {
        Set Player Variable(Event Player, Mod_Effect_Target, Player Closest To Reticle(Event Player, Opposite Team Of(Team Of(Event Player))));
        Set Player Variable(Event Player, Mod_Effect_Caster, Position Of(Event Player));
        Set Status(Event Player, Null, Phased Out, 0.66);
        Set Status((Event Player).Mod_Effect_Target, Null, Phased Out, 0.66);
        Teleport(Event Player, Player Closest To Reticle(Event Player, Opposite Team Of(Team Of(Event Player))));
        Teleport((Event Player).Mod_Effect_Target, (Event Player).Mod_Effect_Caster);
        Set Facing(Event Player, Facing Direction Of((Event Player).Mod_Effect_Target), To World);
        Set Facing((Event Player).Mod_Effect_Target, Facing Direction Of(Event Player), To World);
        Create Beam Effect(All Players(All Teams), Bad Beam, Event Player, (Event Player).Mod_Effect_Target, Color(Blue), Visible To Position and Radius);
        Set Player Variable(Event Player, Active_Mod_FX, Last Created Entity);
        Wait(1, Ignore Condition);
        Destroy Effect((Event Player).Active_Mod_FX);
        Set Player Variable(Event Player, Mod_Effect_Target, Null);
        Set Player Variable(Event Player, Cooldown_Chase, Subtract(9, Multiply((Event Player).Optimize, 2)));
        Set Player Variable(Event Player, Cd_Color, Custom Color(180, 180, 180, 255));
        Set Player Variable(Event Player, Cooldown_String_1, Custom String("Cooldown:", Null, Null, Null));
        Chase Player Variable At Rate(Event Player, Cooldown_Chase, 0, 1, Destination and Rate);
        Wait Until(Or(Compare((Event Player).Cooldown_Chase, ==, 0), Compare((Event Player).Mod_Menu_Select, !=, 3)), 9999);
        If(Compare((Event Player).Mod_Menu_Select, !=, 3));
            Set Player Variable(Event Player, Cd_Visible_To, Array(Null));
        End;
        Stop Chasing Player Variable(Event Player, Cooldown_Chase);
        Wait(0.016, Ignore Condition);
        Set Player Variable(Event Player, Cd_Color, Color(Green));
        Set Player Variable(Event Player, Cooldown_String_1, Custom String("Ready", Null, Null, Null));
        Set Player Variable(Event Player, Cooldown_Chase, Icon String(Checkmark));
    }
}

rule ("Active Mods 5 - Telekinesis") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        (Event Player).Mod_Menu_Select == 3;
        (Event Player).Active_Mod == 6;
        (Event Player).CastMelee_Mod_Conditions == 1;
    }
    actions {
        Play Effect(All Players(All Teams), Good Explosion, Color(Turquoise), World Vector Of(Vector(0, 0.75, 1), Event Player, Rotation And Translation), 1);
        Set Player Variable(Event Player, Mod_Effect_Target, Player Closest To Reticle(Event Player, Opposite Team Of(Team Of(Event Player))));
        Wait(0.5, Ignore Condition);
        Abort If(Or(Is Dead(Event Player), Has Status(Event Player, Stunned)));
        Play Effect(All Players(All Teams), Ring Explosion, Color(Turquoise), (Event Player).Mod_Effect_Target, 5);
        Apply Impulse((Event Player).Mod_Effect_Target, Direction Towards((Event Player).Mod_Effect_Target, Ray Cast Hit Position(Eye Position(Event Player), Add(Eye Position(Event Player), Multiply(Facing Direction Of(Event Player), 25)), Null, All Players(All Teams), True)), 18, To World, Cancel Contrary Motion);
        Set Player Variable(Event Player, Cooldown_Chase, Subtract(4, (Event Player).Optimize));
        Set Player Variable(Event Player, Cd_Color, Custom Color(180, 180, 180, 255));
        Set Player Variable(Event Player, Cooldown_String_1, Custom String("Cooldown:", Null, Null, Null));
        Chase Player Variable At Rate(Event Player, Cooldown_Chase, 0, 1, Destination and Rate);
        Wait Until(Or(Compare((Event Player).Cooldown_Chase, ==, 0), Compare((Event Player).Mod_Menu_Select, !=, 3)), 9999);
        If(Compare((Event Player).Mod_Menu_Select, !=, 3));
            Set Player Variable(Event Player, Cd_Visible_To, Array(Null));
        End;
        Stop Chasing Player Variable(Event Player, Cooldown_Chase);
        Wait(0.016, Ignore Condition);
        Set Player Variable(Event Player, Cd_Color, Color(Green));
        Set Player Variable(Event Player, Cooldown_String_1, Custom String("Ready", Null, Null, Null));
        Set Player Variable(Event Player, Cooldown_Chase, Icon String(Checkmark));
    }
}

rule ("Active Mods 6 - Death Grip") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        (Event Player).Mod_Menu_Select == 3;
        (Event Player).Active_Mod == 7;
        (Event Player).CastMelee_Mod_Conditions == 1;
    }
    actions {
        Set Player Variable(Event Player, Mod_Effect_Target, Player Closest To Reticle(Event Player, Opposite Team Of(Team Of(Event Player))));
        Create Beam Effect(All Players(All Teams), Bad Beam, Event Player, (Event Player).Mod_Effect_Target, Color(Purple), Visible To Position and Radius);
        Set Player Variable(Event Player, Active_Mod_FX, Last Created Entity);
        Set Status((Event Player).Mod_Effect_Target, Null, Rooted, 1);
        Apply Impulse((Event Player).Mod_Effect_Target, Direction Towards((Event Player).Mod_Effect_Target, World Vector Of(Vector(0, 2, 0), Event Player, Rotation And Translation)), Multiply(Distance Between(Event Player, (Event Player).Mod_Effect_Target), 1.6), To World, Cancel Contrary Motion);
        Wait(1.5, Ignore Condition);
        Destroy Effect((Event Player).Active_Mod_FX);
        Set Player Variable(Event Player, Mod_Effect_Target, Null);
        Set Player Variable(Event Player, Cooldown_Chase, Subtract(10, Multiply((Event Player).Optimize, 2)));
        Set Player Variable(Event Player, Cd_Color, Custom Color(180, 180, 180, 255));
        Set Player Variable(Event Player, Cooldown_String_1, Custom String("Cooldown:", Null, Null, Null));
        Chase Player Variable At Rate(Event Player, Cooldown_Chase, 0, 1, Destination and Rate);
        Wait Until(Or(Compare((Event Player).Cooldown_Chase, ==, 0), Compare((Event Player).Mod_Menu_Select, !=, 3)), 9999);
        If(Compare((Event Player).Mod_Menu_Select, !=, 3));
            Set Player Variable(Event Player, Cd_Visible_To, Array(Null));
        End;
        Stop Chasing Player Variable(Event Player, Cooldown_Chase);
        Wait(0.016, Ignore Condition);
        Set Player Variable(Event Player, Cd_Color, Color(Green));
        Set Player Variable(Event Player, Cooldown_String_1, Custom String("Ready", Null, Null, Null));
        Set Player Variable(Event Player, Cooldown_Chase, Icon String(Checkmark));
    }
}

rule ("Active Mods 7 - Entangling Roots") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        (Event Player).Mod_Menu_Select == 3;
        (Event Player).Active_Mod == 8;
        (Event Player).CastMelee_Mod_Conditions == 1;
    }
    actions {
        Play Effect(All Players(All Teams), Orisa Halt Implosion Effect, Team Of(Event Player), Add((Event Player).Mod_Effect_Target, Down), 1);
        Play Effect(All Players(All Teams), Good Explosion, Color(Green), World Vector Of(Vector(0, 0.75, 1), Event Player, Rotation And Translation), 1);
        Set Player Variable(Event Player, Mod_Effect_Target, Player Closest To Reticle(Event Player, Opposite Team Of(Team Of(Event Player))));
        Set Status((Event Player).Mod_Effect_Target, Event Player, Rooted, 1.8);
        Big Message((Event Player).Mod_Effect_Target, Custom String("ROOTED", Null, Null, Null));
        Create Effect(All Players(All Teams), Light Shaft, Color(Green), Add((Event Player).Mod_Effect_Target, Down), 1, Visible To Position and Radius);
        Set Player Variable(Event Player, Active_Mod_FX, Last Created Entity);
        Apply Impulse((Event Player).Mod_Effect_Target, Direction Towards((Event Player).Mod_Effect_Target, (Event Player).Mod_Effect_Target), 0.01, To Player, Cancel Contrary Motion);
        Apply Impulse((Event Player).Mod_Effect_Target, Down, 20, To World, Cancel Contrary Motion);
        Wait Until(Compare(Altitude Of((Event Player).Mod_Effect_Target), <=, 1), 99999);
        Start Forcing Player Position((Event Player).Mod_Effect_Target, Position Of((Event Player).Mod_Effect_Target), False);
        Wait(0.032, Ignore Condition);
        If(Compare((Event Player).Mod_Menu_Select, !=, 3));
            Set Player Variable(Event Player, Cd_Visible_To, Array(Null));
        End;
        Set Player Variable(Event Player, Cd_Color, Color(Yellow));
        Set Player Variable(Event Player, Cd_Visible_To, Event Player);
        Set Player Variable(Event Player, Cooldown_String_1, Custom String("Active", Null, Null, Null));
        Set Player Variable(Event Player, Cooldown_Chase, Ability Icon String(Hero(Soldier: 76), Button(Ability 1)));
        Wait(0.032, Ignore Condition);
        Wait(1.5, Ignore Condition);
        Destroy Effect((Event Player).Active_Mod_FX);
        Stop Forcing Player Position((Event Player).Mod_Effect_Target);
        Set Player Variable(Event Player, Cooldown_Chase, Subtract(8, Multiply((Event Player).Optimize, 1.5)));
        Set Player Variable(Event Player, Cd_Color, Custom Color(180, 180, 180, 255));
        Set Player Variable(Event Player, Cooldown_String_1, Custom String("Cooldown:", Null, Null, Null));
        Chase Player Variable At Rate(Event Player, Cooldown_Chase, 0, 1, Destination and Rate);
        Wait Until(Or(Compare((Event Player).Cooldown_Chase, ==, 0), Compare((Event Player).Mod_Menu_Select, !=, 3)), 9999);
        If(Compare((Event Player).Mod_Menu_Select, !=, 3));
            Set Player Variable(Event Player, Cd_Visible_To, Array(Null));
        End;
        Stop Chasing Player Variable(Event Player, Cooldown_Chase);
        Wait(0.016, Ignore Condition);
        Set Player Variable(Event Player, Cd_Color, Color(Green));
        Set Player Variable(Event Player, Cooldown_String_1, Custom String("Ready", Null, Null, Null));
        Set Player Variable(Event Player, Cooldown_Chase, Icon String(Checkmark));
    }
}

rule ("Active Mods 8 - Shift Burden") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        (Event Player).Mod_Menu_Select == 3;
        (Event Player).Active_Mod == 9;
        Global.Intermission_In_Progress == False;
        (Event Player).CastMelee_Mod_Conditions == 1;
    }
    actions {
        Wait(0.032, Ignore Condition);
        If(Compare((Event Player).Mod_Menu_Select, !=, 3));
            Set Player Variable(Event Player, Cd_Visible_To, Array(Null));
        End;
        Set Player Variable(Event Player, Cd_Color, Color(Yellow));
        Set Player Variable(Event Player, Cd_Visible_To, Event Player);
        Set Player Variable(Event Player, Cooldown_String_1, Custom String("Active", Null, Null, Null));
        Set Player Variable(Event Player, Cooldown_Chase, Ability Icon String(Hero(Soldier: 76), Button(Ability 1)));
        Wait(0.032, Ignore Condition);
        Set Player Variable(Event Player, Mod_Effect_Target, Player Closest To Reticle(Event Player, Opposite Team Of(Team Of(Event Player))));
        Play Effect(All Players(All Teams), Bad Explosion, Color(Gray), (Event Player).Mod_Effect_Target, 3);
        Play Effect(All Players(All Teams), Debuff Impact Sound, Null, (Event Player).Mod_Effect_Target, 100);
        Wait(0.05, Ignore Condition);
        Apply Impulse((Event Player).Mod_Effect_Target, Down, 50, To World, Cancel Contrary Motion);
        Set Gravity((Event Player).Mod_Effect_Target, 1000);
        Set Projectile Gravity((Event Player).Mod_Effect_Target, 500);
        Wait(4, Ignore Condition);
        If(Compare(((Event Player).Mod_Effect_Target).Active_Mod, ==, 5));
            If(Compare(((Event Player).Mod_Effect_Target).Active_Mod_Skill_Toggle, ==, 1));
                Set Gravity((Event Player).Mod_Effect_Target, 0);
            Else If(Compare(((Event Player).Mod_Effect_Target).Passive_Mod, ==, 4));
                Set Gravity((Event Player).Mod_Effect_Target, 50);
            End;
        Else If(Compare(((Event Player).Mod_Effect_Target).Passive_Mod, ==, 4));
            Set Gravity((Event Player).Mod_Effect_Target, 50);
        Else;
            Set Gravity((Event Player).Mod_Effect_Target, 100);
        End;
        Set Projectile Gravity((Event Player).Mod_Effect_Target, 100);
        Set Player Variable(Event Player, Mod_Effect_Target, Null);
        Set Player Variable(Event Player, Cooldown_Chase, Subtract(7, (Event Player).Optimize));
        Set Player Variable(Event Player, Cd_Color, Custom Color(180, 180, 180, 255));
        Set Player Variable(Event Player, Cooldown_String_1, Custom String("Cooldown:", Null, Null, Null));
        Chase Player Variable At Rate(Event Player, Cooldown_Chase, 0, 1, Destination and Rate);
        Wait Until(Or(Compare((Event Player).Cooldown_Chase, ==, 0), Compare((Event Player).Mod_Menu_Select, !=, 3)), 9999);
        If(Compare((Event Player).Mod_Menu_Select, !=, 3));
            Set Player Variable(Event Player, Cd_Visible_To, Array(Null));
        End;
        Stop Chasing Player Variable(Event Player, Cooldown_Chase);
        Wait(0.016, Ignore Condition);
        Set Player Variable(Event Player, Cd_Color, Color(Green));
        Set Player Variable(Event Player, Cooldown_String_1, Custom String("Ready", Null, Null, Null));
        Set Player Variable(Event Player, Cooldown_Chase, Icon String(Checkmark));
    }
}

rule ("Active Mods 9 - Blind") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        (Event Player).Mod_Menu_Select == 3;
        (Event Player).Active_Mod == 10;
        (Event Player).CastMelee_Mod_Conditions == 1;
        ((Event Player).Mod_Effect_Target).Is_Colossus == False;
    }
    actions {
        Set Player Variable(Event Player, Mod_Effect_Target, Player Closest To Reticle(Event Player, Opposite Team Of(Team Of(Event Player))));
        Create Beam Effect(All Players(All Teams), Moira Grasp Connected Beam, Event Player, (Event Player).Mod_Effect_Target, Color(Team 1), Visible To Position and Radius);
        Set Player Variable At Index((Event Player).Mod_Effect_Target, Active_Mod_FX_Array, 0, Last Created Entity);
        Set Player Variable((Event Player).Mod_Effect_Target, Is_Blind, True);
        Stop Camera((Event Player).Mod_Effect_Target);
        Create Effect(All Players(All Teams), Zenyatta Orb of Discord Target Sound, Null, (Event Player).Mod_Effect_Target, 100, Visible To Position and Radius);
        Set Player Variable At Index((Event Player).Mod_Effect_Target, Active_Mod_FX_Array, 1, Last Created Entity);
        Disable Hero HUD((Event Player).Mod_Effect_Target);
        Create Effect((Event Player).Mod_Effect_Target, Bad Aura, Color(Black), Add(Eye Position((Event Player).Mod_Effect_Target), Multiply(Facing Direction Of((Event Player).Mod_Effect_Target), 0.75)), 7, Visible To Position and Radius);
        Set Player Variable At Index((Event Player).Mod_Effect_Target, Active_Mod_FX_Array, 2, Last Created Entity);
        Big Message((Event Player).Mod_Effect_Target, Custom String("BLINDED", Null, Null, Null));
        Wait(0.3, Ignore Condition);
        Create Effect((Event Player).Mod_Effect_Target, Bad Aura, Color(Black), Vector(0, -300, 0), 1, Visible To Position and Radius);
        Set Player Variable At Index((Event Player).Mod_Effect_Target, Active_Mod_FX_Array, 3, Last Created Entity);
        Create Effect((Event Player).Mod_Effect_Target, Bad Aura, Color(Black), Vector(0, -300, 0), 2, Visible To Position and Radius);
        Set Player Variable At Index((Event Player).Mod_Effect_Target, Active_Mod_FX_Array, 4, Last Created Entity);
        Create Effect((Event Player).Mod_Effect_Target, Bad Aura, Color(Black), Vector(0, -300, 0), 3, Visible To Position and Radius);
        Set Player Variable At Index((Event Player).Mod_Effect_Target, Active_Mod_FX_Array, 5, Last Created Entity);
        Create Effect((Event Player).Mod_Effect_Target, Bad Aura, Color(Black), Vector(0, -300, 0), 4, Visible To Position and Radius);
        Set Player Variable At Index((Event Player).Mod_Effect_Target, Active_Mod_FX_Array, 6, Last Created Entity);
        Create Effect((Event Player).Mod_Effect_Target, Bad Aura, Color(Black), Vector(0, -300, 0), 5, Visible To Position and Radius);
        Set Player Variable At Index((Event Player).Mod_Effect_Target, Active_Mod_FX_Array, 7, Last Created Entity);
        Play Effect(All Players(All Teams), Moira Fade Disappear Sound, Null, (Event Player).Mod_Effect_Target, 100);
        Wait(0.75, Ignore Condition);
        Start Camera((Event Player).Mod_Effect_Target, Vector(0, -298, 0), Vector(0, -300, 0), 0);
        Wait(1.5, Ignore Condition);
        If(Is Dead((Event Player).Mod_Effect_Target));
            Destroy Effect(First Of(((Event Player).Mod_Effect_Target).Active_Mod_FX_Array));
        End;
        Create Effect((Event Player).Mod_Effect_Target, Bad Aura, Color(Black), Add(Eye Position((Event Player).Mod_Effect_Target), Multiply(Facing Direction Of((Event Player).Mod_Effect_Target), 0.75)), 7, Visible To Position and Radius);
        Set Player Variable At Index((Event Player).Mod_Effect_Target, Active_Mod_FX_Array, 7, Last Created Entity);
        Set Player Variable((Event Player).Mod_Effect_Target, Is_Blind, False);
        Wait(0.1, Ignore Condition);
        Stop Camera((Event Player).Mod_Effect_Target);
        Wait(0.2, Ignore Condition);
        Enable Hero HUD((Event Player).Mod_Effect_Target);
        Play Effect(All Players(All Teams), Moira Fade Reappear Sound, Null, (Event Player).Mod_Effect_Target, 200);
        Destroy Effect(((Event Player).Mod_Effect_Target).Active_Mod_FX_Array);
        Set Player Variable(Event Player, Cooldown_Chase, Subtract(12, Multiply((Event Player).Optimize, 2)));
        Set Player Variable(Event Player, Cd_Color, Custom Color(180, 180, 180, 255));
        Set Player Variable(Event Player, Cooldown_String_1, Custom String("Cooldown:", Null, Null, Null));
        Chase Player Variable At Rate(Event Player, Cooldown_Chase, 0, 1, Destination and Rate);
        Wait Until(Or(Compare((Event Player).Cooldown_Chase, ==, 0), Compare((Event Player).Mod_Menu_Select, !=, 3)), 9999);
        If(Compare((Event Player).Mod_Menu_Select, !=, 3));
            Set Player Variable(Event Player, Cd_Visible_To, Array(Null));
        End;
        Stop Chasing Player Variable(Event Player, Cooldown_Chase);
        Wait(0.016, Ignore Condition);
        Set Player Variable(Event Player, Cd_Color, Color(Green));
        Set Player Variable(Event Player, Cooldown_String_1, Custom String("Ready", Null, Null, Null));
        "if player dies before beam disconnects"
        Set Player Variable(Event Player, Cooldown_Chase, Icon String(Checkmark));
    }
}

rule ("Active Mods 10 - Fear") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        (Event Player).Mod_Menu_Select == 3;
        (Event Player).Active_Mod == 11;
        (Event Player).CastMelee_Mod_Conditions == 1;
    }
    actions {
        Set Player Variable(Event Player, Mod_Effect_Target, Player Closest To Reticle(Event Player, Opposite Team Of(Team Of(Event Player))));
        Create Effect(All Players(All Teams), Sparkles, Color(Purple), Add(Eye Position((Event Player).Mod_Effect_Target), Divide(Up, 2)), 1, Visible To Position and Radius);
        Set Player Variable(Event Player, Active_Mod_FX, Last Created Entity);
        Big Message((Event Player).Mod_Effect_Target, Custom String("FEARED", Null, Null, Null));
        Start Facing((Event Player).Mod_Effect_Target, World Vector Of(Vector(0, 0, 1), Event Player, Rotation), 1000, To Player, None);
        Start Throttle In Direction((Event Player).Mod_Effect_Target, World Vector Of(Vector(0, 0, 1), (Event Player).Mod_Effect_Target, Rotation), 2, To World, Replace existing throttle, Direction and Magnitude);
        Wait(0.032, Ignore Condition);
        If(Compare((Event Player).Mod_Menu_Select, !=, 3));
            Set Player Variable(Event Player, Cd_Visible_To, Array(Null));
        End;
        Set Player Variable(Event Player, Cd_Color, Color(Yellow));
        Set Player Variable(Event Player, Cd_Visible_To, Event Player);
        Set Player Variable(Event Player, Cooldown_String_1, Custom String("Active", Null, Null, Null));
        Set Player Variable(Event Player, Cooldown_Chase, Ability Icon String(Hero(Soldier: 76), Button(Ability 1)));
        Wait(0.032, Ignore Condition);
        Wait(1.75, Ignore Condition);
        Stop Facing((Event Player).Mod_Effect_Target);
        Stop Throttle In Direction((Event Player).Mod_Effect_Target);
        Destroy Effect((Event Player).Active_Mod_FX);
        Set Player Variable(Event Player, Cooldown_Chase, Subtract(10, Multiply((Event Player).Optimize, 1.25)));
        Set Player Variable(Event Player, Cd_Color, Custom Color(180, 180, 180, 255));
        Set Player Variable(Event Player, Cooldown_String_1, Custom String("Cooldown:", Null, Null, Null));
        Chase Player Variable At Rate(Event Player, Cooldown_Chase, 0, 1, Destination and Rate);
        Wait Until(Or(Compare((Event Player).Cooldown_Chase, ==, 0), Compare((Event Player).Mod_Menu_Select, !=, 3)), 9999);
        If(Compare((Event Player).Mod_Menu_Select, !=, 3));
            Set Player Variable(Event Player, Cd_Visible_To, Array(Null));
        End;
        Stop Chasing Player Variable(Event Player, Cooldown_Chase);
        Wait(0.016, Ignore Condition);
        Set Player Variable(Event Player, Cd_Color, Color(Green));
        Set Player Variable(Event Player, Cooldown_String_1, Custom String("Ready", Null, Null, Null));
        Set Player Variable(Event Player, Cooldown_Chase, Icon String(Checkmark));
    }
}

rule ("Active Mods 11 - Taunt") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        (Event Player).Mod_Menu_Select == 3;
        (Event Player).Active_Mod == 12;
        (Event Player).CastMelee_Mod_Conditions == 1;
    }
    actions {
        Set Player Variable(Event Player, Mod_Effect_Target, Player Closest To Reticle(Event Player, Opposite Team Of(Team Of(Event Player))));
        Create Effect(All Players(All Teams), Sparkles, Color(Red), Add(Eye Position((Event Player).Mod_Effect_Target), Divide(Up, 2)), 1, Visible To Position and Radius);
        Set Player Variable(Event Player, Active_Mod_FX, Last Created Entity);
        Start Facing((Event Player).Mod_Effect_Target, Direction Towards((Event Player).Mod_Effect_Target, Event Player), 3000, To World, Direction and Turn Rate);
        Start Throttle In Direction((Event Player).Mod_Effect_Target, World Vector Of(Vector(0, 0, 1), (Event Player).Mod_Effect_Target, Rotation), 1, To World, Replace existing throttle, Direction and Magnitude);
        Start Holding Button((Event Player).Mod_Effect_Target, Button(Primary Fire));
        Wait(0.032, Ignore Condition);
        If(Compare((Event Player).Mod_Menu_Select, !=, 3));
            Set Player Variable(Event Player, Cd_Visible_To, Array(Null));
        End;
        Set Player Variable(Event Player, Cd_Color, Color(Yellow));
        Set Player Variable(Event Player, Cd_Visible_To, Event Player);
        Set Player Variable(Event Player, Cooldown_String_1, Custom String("Active", Null, Null, Null));
        Set Player Variable(Event Player, Cooldown_Chase, Ability Icon String(Hero(Soldier: 76), Button(Ability 1)));
        Wait(0.032, Ignore Condition);
        Wait(1.75, Ignore Condition);
        Stop Holding Button((Event Player).Mod_Effect_Target, Button(Primary Fire));
        Stop Facing((Event Player).Mod_Effect_Target);
        Stop Throttle In Direction((Event Player).Mod_Effect_Target);
        Destroy Effect((Event Player).Active_Mod_FX);
        Set Player Variable(Event Player, Cooldown_Chase, Subtract(8, Multiply((Event Player).Optimize, 1.5)));
        Set Player Variable(Event Player, Cd_Color, Custom Color(180, 180, 180, 255));
        Set Player Variable(Event Player, Cooldown_String_1, Custom String("Cooldown:", Null, Null, Null));
        Chase Player Variable At Rate(Event Player, Cooldown_Chase, 0, 1, Destination and Rate);
        Wait Until(Or(Compare((Event Player).Cooldown_Chase, ==, 0), Compare((Event Player).Mod_Menu_Select, !=, 3)), 9999);
        If(Compare((Event Player).Mod_Menu_Select, !=, 3));
            Set Player Variable(Event Player, Cd_Visible_To, Array(Null));
        End;
        Stop Chasing Player Variable(Event Player, Cooldown_Chase);
        Wait(0.016, Ignore Condition);
        Set Player Variable(Event Player, Cd_Color, Color(Green));
        Set Player Variable(Event Player, Cooldown_String_1, Custom String("Ready", Null, Null, Null));
        Set Player Variable(Event Player, Cooldown_Chase, Icon String(Checkmark));
    }
}

rule ("Active Mods 12 - Duel") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        (Event Player).Mod_Menu_Select == 3;
        (Event Player).Active_Mod == 13;
        Global.Intermission_In_Progress == False;
        (Event Player).CastMelee_Mod_Conditions == 1;
    }
    actions {
        Set Player Variable(Event Player, Mod_Effect_Target, Player Closest To Reticle(Event Player, Opposite Team Of(Team Of(Event Player))));
        Wait(0.032, Ignore Condition);
        Wait(0.032, Ignore Condition);
        If(Compare((Event Player).Mod_Menu_Select, !=, 3));
            Set Player Variable(Event Player, Cd_Visible_To, Array(Null));
        End;
        Set Player Variable(Event Player, Cd_Color, Color(Yellow));
        Set Player Variable(Event Player, Cd_Visible_To, Event Player);
        Set Player Variable(Event Player, Cooldown_String_1, Custom String("Active", Null, Null, Null));
        Set Player Variable(Event Player, Cooldown_Chase, Ability Icon String(Hero(Soldier: 76), Button(Ability 1)));
        Wait(0.032, Ignore Condition);
        Start Facing(Event Player, Direction Towards(Eye Position(Event Player), Eye Position((Event Player).Mod_Effect_Target)), 5000, To World, Direction and Turn Rate);
        Start Facing((Event Player).Mod_Effect_Target, Direction Towards(Eye Position((Event Player).Mod_Effect_Target), Eye Position(Event Player)), 5000, To World, Direction and Turn Rate);
        Play Effect(All Players(All Teams), Wrecking Ball Piledriver Impact Sound, Null, Event Player, 200);
        Play Effect(All Players(All Teams), Wrecking Ball Piledriver Impact Sound, Null, (Event Player).Mod_Effect_Target, 200);
        Create Effect(All Players(All Teams), Winston Primal Rage Effect, Color(Team 2), Event Player, 1, Visible To Position and Radius);
        Set Player Variable At Index(Event Player, Active_Mod_FX_Array, 0, Last Created Entity);
        Create Effect(All Players(All Teams), Winston Primal Rage Effect, Color(Team 2), (Event Player).Mod_Effect_Target, 1, Visible To Position and Radius);
        Set Player Variable At Index(Event Player, Active_Mod_FX_Array, 1, Last Created Entity);
        Set Status(Event Player, Null, Rooted, 2.5);
        Set Status((Event Player).Mod_Effect_Target, Event Player, Rooted, 2.5);
        Set Damage Received(Event Player, 200);
        Set Damage Received((Event Player).Mod_Effect_Target, 200);
        Big Message(Array(Event Player, (Event Player).Mod_Effect_Target), Custom String("DUEL!", Null, Null, Null));
        Wait(0.05, Ignore Condition);
        Stop Facing(Event Player);
        Stop Facing((Event Player).Mod_Effect_Target);
        Wait(2.5, Ignore Condition);
        Set Damage Received(Event Player, 100);
        Set Damage Received((Event Player).Mod_Effect_Target, 100);
        Destroy Effect((Event Player).Active_Mod_FX_Array);
        Set Player Variable(Event Player, Cooldown_Chase, Subtract(10, Multiply((Event Player).Optimize, 1.5)));
        Set Player Variable(Event Player, Cd_Color, Custom Color(180, 180, 180, 255));
        Set Player Variable(Event Player, Cooldown_String_1, Custom String("Cooldown:", Null, Null, Null));
        Chase Player Variable At Rate(Event Player, Cooldown_Chase, 0, 1, Destination and Rate);
        Wait Until(Or(Compare((Event Player).Cooldown_Chase, ==, 0), Compare((Event Player).Mod_Menu_Select, !=, 3)), 9999);
        If(Compare((Event Player).Mod_Menu_Select, !=, 3));
            Set Player Variable(Event Player, Cd_Visible_To, Array(Null));
        End;
        Stop Chasing Player Variable(Event Player, Cooldown_Chase);
        Wait(0.016, Ignore Condition);
        Set Player Variable(Event Player, Cd_Color, Color(Green));
        Set Player Variable(Event Player, Cooldown_String_1, Custom String("Ready", Null, Null, Null));
        Set Player Variable(Event Player, Cooldown_Chase, Icon String(Checkmark));
    }
}

rule ("Active Mods 13 - Cleanse") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        (Event Player).Mod_Menu_Select == 3;
        (Event Player).Active_Mod == 14;
        Global.Intermission_In_Progress == False;
        Or(Or(Or(Has Status(Event Player, Rooted), Has Status(Event Player, Stunned)), Has Status(Event Player, Knocked Down)), Has Status(Event Player, Frozen)) == True;
        Or(Is Button Held(Event Player, Button(Melee)), And(Array Contains(Array(Hero(Brigitte), Hero(Reinhardt)), Hero Of(Event Player)), Is Button Held(Event Player, Button(Reload)))) == True;
    }
    actions {
        Play Effect(All Players(All Teams), Orisa Halt Implosion Sound, Team Of(Event Player), Position Of(Event Player), 150);
        Play Effect(All Players(All Teams), Orisa Halt Implosion Effect, Team Of(Event Player), Eye Position(Event Player), 1);
        Clear Status(Event Player, Stunned);
        Clear Status(Event Player, Knocked Down);
        Clear Status(Event Player, Asleep);
        Clear Status(Event Player, Hacked);
        Clear Status(Event Player, Rooted);
        Clear Status(Event Player, Frozen);
        Stop Camera(Event Player);
        Stop Facing(Event Player);
        Stop Forcing Player Position(Event Player);
        Stop Forcing Throttle(Event Player);
        Set Status(Event Player, Null, Phased Out, 4.5);
        Create Effect(All Players(All Teams), Sparkles, Color(Lime Green), Event Player, 1, Visible To Position and Radius);
        Set Player Variable(Event Player, Active_Mod_FX, Last Created Entity);
        Wait(0.032, Ignore Condition);
        If(Compare((Event Player).Mod_Menu_Select, !=, 3));
            Set Player Variable(Event Player, Cd_Visible_To, Array(Null));
        End;
        Set Player Variable(Event Player, Cd_Color, Color(Yellow));
        Set Player Variable(Event Player, Cd_Visible_To, Event Player);
        Set Player Variable(Event Player, Cooldown_String_1, Custom String("Active", Null, Null, Null));
        Set Player Variable(Event Player, Cooldown_Chase, Ability Icon String(Hero(Soldier: 76), Button(Ability 1)));
        Wait(0.032, Ignore Condition);
        Wait(4.5, Ignore Condition);
        Destroy Effect((Event Player).Active_Mod_FX);
        Set Player Variable(Event Player, Cooldown_Chase, Subtract(6, (Event Player).Optimize));
        Set Player Variable(Event Player, Cd_Color, Custom Color(180, 180, 180, 255));
        Set Player Variable(Event Player, Cooldown_String_1, Custom String("Cooldown:", Null, Null, Null));
        Chase Player Variable At Rate(Event Player, Cooldown_Chase, 0, 1, Destination and Rate);
        Wait Until(Or(Compare((Event Player).Cooldown_Chase, ==, 0), Compare((Event Player).Mod_Menu_Select, !=, 3)), 9999);
        If(Compare((Event Player).Mod_Menu_Select, !=, 3));
            Set Player Variable(Event Player, Cd_Visible_To, Array(Null));
        End;
        Stop Chasing Player Variable(Event Player, Cooldown_Chase);
        Wait(0.016, Ignore Condition);
        Set Player Variable(Event Player, Cd_Color, Color(Green));
        Set Player Variable(Event Player, Cooldown_String_1, Custom String("Ready", Null, Null, Null));
        Set Player Variable(Event Player, Cooldown_Chase, Icon String(Checkmark));
    }
}

rule ("Active Mods 15 - Hex") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        (Event Player).Mod_Menu_Select == 3;
        (Event Player).Active_Mod == 16;
        (Event Player).CastMelee_Mod_Conditions == 1;
        Hero Of(Player Closest To Reticle(Event Player, All Teams)) != Hero(Torbjörn);
    }
    actions {
        Set Player Variable(Event Player, Mod_Effect_Target, Player Closest To Reticle(Event Player, Opposite Team Of(Team Of(Event Player))));
        Set Player Variable(Event Player, Current_Hero_2, Hero Of((Event Player).Mod_Effect_Target));
        Start Forcing Player To Be Hero((Event Player).Mod_Effect_Target, Hero(Torbjörn));
        Wait(0.032, Ignore Condition);
        If(Compare((Event Player).Mod_Menu_Select, !=, 3));
            Set Player Variable(Event Player, Cd_Visible_To, Array(Null));
        End;
        Set Player Variable(Event Player, Cd_Color, Color(Yellow));
        Set Player Variable(Event Player, Cd_Visible_To, Event Player);
        Set Player Variable(Event Player, Cooldown_String_1, Custom String("Active", Null, Null, Null));
        Set Player Variable(Event Player, Cooldown_Chase, Ability Icon String(Hero(Soldier: 76), Button(Ability 1)));
        Wait(0.032, Ignore Condition);
        Wait(8, Ignore Condition);
        Start Forcing Player To Be Hero((Event Player).Mod_Effect_Target, (Event Player).Current_Hero_2);
        Wait(0.25, Ignore Condition);
        Stop Forcing Player To Be Hero((Event Player).Mod_Effect_Target);
        Set Player Variable(Event Player, Cooldown_Chase, Subtract(6, (Event Player).Optimize));
        Set Player Variable(Event Player, Cd_Color, Custom Color(180, 180, 180, 255));
        Set Player Variable(Event Player, Cooldown_String_1, Custom String("Cooldown:", Null, Null, Null));
        Chase Player Variable At Rate(Event Player, Cooldown_Chase, 0, 1, Destination and Rate);
        Wait Until(Or(Compare((Event Player).Cooldown_Chase, ==, 0), Compare((Event Player).Mod_Menu_Select, !=, 3)), 9999);
        If(Compare((Event Player).Mod_Menu_Select, !=, 3));
            Set Player Variable(Event Player, Cd_Visible_To, Array(Null));
        End;
        Stop Chasing Player Variable(Event Player, Cooldown_Chase);
        Wait(0.016, Ignore Condition);
        Set Player Variable(Event Player, Cd_Color, Color(Green));
        Set Player Variable(Event Player, Cooldown_String_1, Custom String("Ready", Null, Null, Null));
        Set Player Variable(Event Player, Cooldown_Chase, Icon String(Checkmark));
    }
}

rule ("Active Mods 16 - Spectralize") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        (Event Player).Mod_Menu_Select == 3;
        Global.Intermission_In_Progress == False;
        (Event Player).Active_Mod == 17;
        (Event Player).CastMelee_Mod_Conditions == 1;
    }
    actions {
        Set Player Variable(Event Player, Mod_Effect_Target, Player Closest To Reticle(Event Player, Opposite Team Of(Team Of(Event Player))));
        Set Status((Event Player).Mod_Effect_Target, Event Player, Phased Out, 2);
        Start Damage Modification(All Players(Team Of(Event Player)), (Event Player).Mod_Effect_Target, 0.001, Receivers Damagers and Damage Percent);
        Set Player Variable(Event Player, Active_Index, Last Damage Modification ID);
        Play Effect(All Players(All Teams), Bad Explosion, Color(White), (Event Player).Mod_Effect_Target, 6);
        Play Effect(All Players(All Teams), Hanzo Sonic Arrow Initial Pulse Sound, Color(Team 2), (Event Player).Mod_Effect_Target, 100);
        Play Effect(All Players(All Teams), Reaper Wraith Form Sound, Color(Team 2), (Event Player).Mod_Effect_Target, 100);
        Create Effect(All Players(All Teams), Reaper Wraith Form Effect, Color(Team 1), (Event Player).Mod_Effect_Target, 1, Position and Radius);
        Set Player Variable At Index(Event Player, Active_Mod_FX_Array, 0, Last Created Entity);
        Create Effect(All Players(All Teams), Bad Aura Sound, Null, (Event Player).Mod_Effect_Target, 100, Position and Radius);
        Set Player Variable At Index(Event Player, Active_Mod_FX_Array, 1, Last Created Entity);
        Wait(0.032, Ignore Condition);
        If(Compare((Event Player).Mod_Menu_Select, !=, 3));
            Set Player Variable(Event Player, Cd_Visible_To, Array(Null));
        End;
        Set Player Variable(Event Player, Cd_Color, Color(Yellow));
        Set Player Variable(Event Player, Cd_Visible_To, Event Player);
        Set Player Variable(Event Player, Cooldown_String_1, Custom String("Active", Null, Null, Null));
        Set Player Variable(Event Player, Cooldown_Chase, Ability Icon String(Hero(Soldier: 76), Button(Ability 1)));
        Wait(0.032, Ignore Condition);
        Wait(3.5, Ignore Condition);
        Stop Damage Modification((Event Player).Active_Index);
        Play Effect(All Players(All Teams), Bad Explosion, Color(White), (Event Player).Mod_Effect_Target, 6);
        Destroy Effect((Event Player).Active_Mod_FX_Array);
        Set Player Variable(Event Player, Mod_Effect_Target, Null);
        Set Player Variable(Event Player, Cooldown_Chase, Subtract(8, (Event Player).Optimize));
        Set Player Variable(Event Player, Cd_Color, Custom Color(180, 180, 180, 255));
        Set Player Variable(Event Player, Cooldown_String_1, Custom String("Cooldown:", Null, Null, Null));
        Chase Player Variable At Rate(Event Player, Cooldown_Chase, 0, 1, Destination and Rate);
        Wait Until(Or(Compare((Event Player).Cooldown_Chase, ==, 0), Compare((Event Player).Mod_Menu_Select, !=, 3)), 9999);
        If(Compare((Event Player).Mod_Menu_Select, !=, 3));
            Set Player Variable(Event Player, Cd_Visible_To, Array(Null));
        End;
        Stop Chasing Player Variable(Event Player, Cooldown_Chase);
        Wait(0.016, Ignore Condition);
        Set Player Variable(Event Player, Cd_Color, Color(Green));
        Set Player Variable(Event Player, Cooldown_String_1, Custom String("Ready", Null, Null, Null));
        Set Player Variable(Event Player, Cooldown_Chase, Icon String(Checkmark));
    }
}

rule ("Active Mods 17 - Preparation") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        (Event Player).Mod_Menu_Select == 3;
        (Event Player).Active_Mod == 18;
        Or(Is Meleeing(Event Player), And(Array Contains(Array(Hero(Brigitte), Hero(Reinhardt)), Hero Of(Event Player)), Is Button Held(Event Player, Button(Reload)))) == True;
        Is Button Held(Event Player, Button(Reload)) == True;
    }
    actions {
        Play Effect(All Players(All Teams), Good Pickup Effect, Color(Purple), Event Player, 1);
        Set Ability Cooldown(Event Player, Button(Ability 1), 0);
        Set Ability Cooldown(Event Player, Button(Ability 2), 0);
        Set Ability Cooldown(Event Player, Button(Secondary Fire), 0);
        Set Player Variable(Event Player, Cooldown_Chase, Subtract(11, Multiply((Event Player).Optimize, 2.5)));
        Set Player Variable(Event Player, Cd_Color, Custom Color(180, 180, 180, 255));
        Set Player Variable(Event Player, Cooldown_String_1, Custom String("Cooldown:", Null, Null, Null));
        Chase Player Variable At Rate(Event Player, Cooldown_Chase, 0, 1, Destination and Rate);
        Wait Until(Or(Compare((Event Player).Cooldown_Chase, ==, 0), Compare((Event Player).Mod_Menu_Select, !=, 3)), 9999);
        If(Compare((Event Player).Mod_Menu_Select, !=, 3));
            Set Player Variable(Event Player, Cd_Visible_To, Array(Null));
        End;
        Stop Chasing Player Variable(Event Player, Cooldown_Chase);
        Wait(0.016, Ignore Condition);
        Set Player Variable(Event Player, Cd_Color, Color(Green));
        Set Player Variable(Event Player, Cooldown_String_1, Custom String("Ready", Null, Null, Null));
        Set Player Variable(Event Player, Cooldown_Chase, Icon String(Checkmark));
    }
}

rule ("Active Mods 18 - Zero Gravity") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        (Event Player).Mod_Menu_Select == 3;
        Global.Intermission_In_Progress == False;
        (Event Player).Active_Mod == 19;
        Is Button Held(Event Player, Button(Crouch)) == True;
        Is In Air(Event Player) == True;
        (Event Player).Active_Mod_Skill_Toggle == 0;
    }
    actions {
        Set Gravity(Event Player, 0);
        Set Player Variable(Event Player, Active_Mod_Skill_Toggle, 1);
        Wait(0.5, Ignore Condition);
        Wait Until(And(Is Button Held(Event Player, Button(Crouch)), Is In Air(Event Player)), 99999);
        Set Gravity(Event Player, 100);
        Set Player Variable(Event Player, Active_Mod_Skill_Toggle, 0);
        Wait(0.5, Ignore Condition);
    }
}

rule ("Active Mods 19 - Sneak") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        (Event Player).Mod_Menu_Select == 3;
        (Event Player).Active_Mod == 20;
        (Event Player).Active_Mod_Skill_Toggle == 0;
        Is Crouching(Event Player) == True;
    }
    actions {
        Wait(1.15, Abort When False);
        Play Effect(All Players(All Teams), Ring Explosion, Color(Blue), Add(Position Of(Event Player), Divide(Up, 2)), 3);
        Play Effect(All Players(All Teams), Reaper Wraith Form Sound, Team Of(Event Player), Position Of(Event Player), 17.5);
        Set Invisible(Event Player, All);
        Set Player Variable(Event Player, Is_Visible, False);
        Set Player Variable(Event Player, Active_Mod_Skill_Toggle, 1);
        Wait Until(Not(Is Crouching(Event Player)), 99999);
        Wait(0.116, Ignore Condition);
        Set Invisible(Event Player, None);
        Set Player Variable(Event Player, Is_Visible, True);
        Set Player Variable(Event Player, Active_Mod_Skill_Toggle, 0);
        Set Crouch Enabled(Event Player, False);
        Wait(0.2, Ignore Condition);
        Set Crouch Enabled(Event Player, True);
    }
}

rule ("Active Mods 20 - Save Disc") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        (Event Player).Mod_Menu_Select == 3;
        (Event Player).Active_Mod == 21;
        Altitude Of(Event Player) <= 1;
        Is Button Held(Event Player, Button(Reload)) == True;
        Or(Is Meleeing(Event Player), And(Array Contains(Array(Hero(Brigitte), Hero(Reinhardt)), Hero Of(Event Player)), Is Button Held(Event Player, Button(Reload)))) == True;
        (Event Player).Active_Mod_Skill_Toggle == 0;
    }
    actions {
        Play Effect(All Players(All Teams), Ring Explosion, Color(Orange), Position Of(Event Player), 3);
        Set Player Variable(Event Player, Mod_Effect_Target, Position Of(Event Player));
        Create Icon(Event Player, (Event Player).Mod_Effect_Target, Flag, Visible To, Color(Orange), False);
        Set Player Variable(Event Player, Active_Mod_FX, Last Created Entity);
        Set Player Variable(Event Player, Active_Mod_Skill_Toggle, 2);
        Wait(0.032, Ignore Condition);
        If(Compare((Event Player).Mod_Menu_Select, !=, 3));
            Set Player Variable(Event Player, Cd_Visible_To, Array(Null));
        End;
        Set Player Variable(Event Player, Cd_Color, Color(Yellow));
        Set Player Variable(Event Player, Cd_Visible_To, Event Player);
        Set Player Variable(Event Player, Cooldown_String_1, Custom String("Active", Null, Null, Null));
        Set Player Variable(Event Player, Cooldown_Chase, Ability Icon String(Hero(Soldier: 76), Button(Ability 1)));
        Wait(0.032, Ignore Condition);
        Wait(2, Ignore Condition);
        Set Player Variable(Event Player, Active_Mod_Skill_Toggle, 1);
        Wait Until(Or(Or(Is Dead(Event Player), Compare((Event Player).Mod_Menu_Select, !=, 3)), Compare((Event Player).Active_Mod_Skill_Toggle, ==, 0)), 99999);
        Abort If(Compare((Event Player).Mod_Menu_Select, !=, 3));
        Set Player Variable(Event Player, Active_Mod_Skill_Toggle, 0);
        Destroy Icon((Event Player).Active_Mod_FX);
    }
}

rule ("Active Mods 20 - Save Disc Teleport") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        (Event Player).Mod_Menu_Select == 3;
        (Event Player).Active_Mod == 21;
        Global.Intermission_In_Progress == False;
        (Event Player).Active_Mod_Skill_Toggle == 1;
        Is Button Held(Event Player, Button(Reload)) == True;
        Or(Is Meleeing(Event Player), And(Array Contains(Array(Hero(Brigitte), Hero(Reinhardt)), Hero Of(Event Player)), Is Button Held(Event Player, Button(Reload)))) == True;
        (Event Player).OraOra == False;
    }
    actions {
        Play Effect(All Players(All Teams), Sombra Translocating Sound, Null, Event Player, 100);
        Play Effect(All Players(All Teams), Bad Pickup Effect, Color(Orange), Position Of(Event Player), 1);
        Teleport(Event Player, (Event Player).Mod_Effect_Target);
        Destroy Icon((Event Player).Active_Mod_FX);
        Set Player Variable(Event Player, Active_Mod_Skill_Toggle, 2);
        Set Player Variable(Event Player, Cooldown_Chase, 4);
        Set Player Variable(Event Player, Cd_Color, Custom Color(180, 180, 180, 255));
        Set Player Variable(Event Player, Cooldown_String_1, Custom String("Cooldown:", Null, Null, Null));
        Chase Player Variable At Rate(Event Player, Cooldown_Chase, 0, 1, Destination and Rate);
        Wait Until(Or(Compare((Event Player).Cooldown_Chase, ==, 0), Compare((Event Player).Mod_Menu_Select, !=, 3)), 9999);
        If(Compare((Event Player).Mod_Menu_Select, !=, 3));
            Set Player Variable(Event Player, Cd_Visible_To, Array(Null));
        End;
        Stop Chasing Player Variable(Event Player, Cooldown_Chase);
        Wait(0.016, Ignore Condition);
        Set Player Variable(Event Player, Cd_Color, Color(Green));
        Set Player Variable(Event Player, Cooldown_String_1, Custom String("Ready", Null, Null, Null));
        Set Player Variable(Event Player, Cooldown_Chase, Icon String(Checkmark));
        Set Player Variable(Event Player, Active_Mod_Skill_Toggle, 0);
        Wait(0.016, Ignore Condition);
    }
}

rule ("Active Mods 21 - Inner Power") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        (Event Player).Mod_Menu_Select == 3;
        (Event Player).Active_Mod == 22;
        Global.Intermission_In_Progress == False;
        (Event Player).Passive_Mod != 29;
        Is Button Held(Event Player, Button(Crouch)) == True;
    }
    actions {
        Wait(1.25, Abort When False);
        Set Player Variable(Event Player, Active_Time, 0);
        Set Player Variable(Event Player, Num_4, 3);
        "waitUntil(eventPlayer.isHoldingButton(Button.MELEE) or (eventPlayer.getCurrentHero() in [Hero.BRIGITTE, Hero.REINHARDT] and eventPlayer.isHoldingButton(Button.RELOAD)) or not eventPlayer.isHoldingButton(Button.CROUCH), 9999)"
        Remove Health Pool From Player((Event Player).Health_Temp);
        Create Effect(All Players(All Teams), Wrecking Ball Adaptive Shield Target Sound, Null, Event Player, 100, Visible To Position and Radius);
        Set Player Variable At Index(Event Player, Active_Mod_FX_Array, 0, Last Created Entity);
        Create Effect(All Players(All Teams), Wrecking Ball Adaptive Shield Target Effect, Null, Color(Team 1), 1, Visible To Position and Radius);
        Set Player Variable At Index(Event Player, Active_Mod_FX_Array, 1, Last Created Entity);
        Set Player Variable(Event Player, Health_Temp, Last Created Health Pool);
        Wait(0.15, Ignore Condition);
        "eventPlayer.isHoldingButton(Button.MELEE) or (eventPlayer.getCurrentHero() in [Hero.BRIGITTE, Hero.REINHARDT] and eventPlayer.isHoldingButton(Button.RELOAD))"
        Add Health Pool To Player(Event Player, Shields, Multiply(Ultimate Charge Percent(Event Player), Add(3, Multiply((Event Player).Optimize, 1.5))), False, False);
        Set Ultimate Charge(Event Player, 0);
        Wait(3, Ignore Condition);
        Destroy Effect((Event Player).Active_Mod_FX_Array);
    }
}

rule ("Active Mods 22 - Feign Death") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        (Event Player).Mod_Menu_Select == 3;
        (Event Player).Active_Mod == 23;
        Global.Intermission_In_Progress == False;
        (Event Player).Passive_Mod != 18;
        (Event Player).Active_Mod_Skill_Toggle == 0;
        Is Button Held(Event Player, Button(Reload)) == True;
        Or(Is Meleeing(Event Player), And(Array Contains(Array(Hero(Brigitte), Hero(Reinhardt)), Hero Of(Event Player)), Is Button Held(Event Player, Button(Reload)))) == True;
        Has Status(Event Player, Phased Out) == False;
        Has Status(Event Player, Unkillable) == False;
        Has Status(Event Player, Invincible) == False;
    }
    actions {
        Disable Built-In Game Mode Respawning(Event Player);
        Wait(0.25, Ignore Condition);
        Kill(Event Player, Event Player);
        Wait(0.032, Ignore Condition);
        If(Compare((Event Player).Mod_Menu_Select, !=, 3));
            Set Player Variable(Event Player, Cd_Visible_To, Array(Null));
        End;
        Set Player Variable(Event Player, Cd_Color, Color(Yellow));
        Set Player Variable(Event Player, Cd_Visible_To, Event Player);
        Set Player Variable(Event Player, Cooldown_String_1, Custom String("Active", Null, Null, Null));
        Set Player Variable(Event Player, Cooldown_Chase, Ability Icon String(Hero(Soldier: 76), Button(Ability 1)));
        Wait(0.032, Ignore Condition);
        Wait(1.25, Ignore Condition);
        Set Player Variable(Event Player, Active_Mod_Skill_Toggle, 1);
        Wait Until(And(Is Dead(Event Player), Or(And(Is Button Held(Event Player, Button(Reload)), Is Button Held(Event Player, Button(Melee))), And(Array Contains(Array(Hero(Brigitte), Hero(Reinhardt)), Hero Of(Event Player)), Is Button Held(Event Player, Button(Reload))))), Add(6, Multiply((Event Player).Optimize, 2)));
        Enable Built-In Game Mode Respawning(Event Player);
        Resurrect(Event Player);
        Play Effect(All Players(All Teams), Reaper Wraith Form Sound, Color(Team 2), Event Player, 25);
        Play Effect(All Players(All Teams), Moira Fade Reappear Effect, Color(Team 2), Event Player, 1);
        Set Player Variable(Event Player, Active_Mod_Skill_Toggle, 2);
        Set Player Variable(Event Player, Cooldown_Chase, Subtract(18, Multiply((Event Player).Optimize, 2)));
        Set Player Variable(Event Player, Cd_Color, Custom Color(180, 180, 180, 255));
        Set Player Variable(Event Player, Cooldown_String_1, Custom String("Cooldown:", Null, Null, Null));
        Chase Player Variable At Rate(Event Player, Cooldown_Chase, 0, 1, Destination and Rate);
        Wait Until(Or(Compare((Event Player).Cooldown_Chase, ==, 0), Compare((Event Player).Mod_Menu_Select, !=, 3)), 9999);
        If(Compare((Event Player).Mod_Menu_Select, !=, 3));
            Set Player Variable(Event Player, Cd_Visible_To, Array(Null));
        End;
        Stop Chasing Player Variable(Event Player, Cooldown_Chase);
        Wait(0.016, Ignore Condition);
        Set Player Variable(Event Player, Cd_Color, Color(Green));
        Set Player Variable(Event Player, Cooldown_String_1, Custom String("Ready", Null, Null, Null));
        Set Player Variable(Event Player, Cooldown_Chase, Icon String(Checkmark));
        Set Player Variable(Event Player, Active_Mod_Skill_Toggle, 0);
    }
}

rule ("Subroutine - Colossus Reset") {
    event {
        Subroutine;
        Colossus_Reset;
    }
    actions {
        Set Player Variable(Event Player, Is_Colossus, False);
        Set Gravity(Event Player, 100);
        Start Scaling Player(Event Player, 1, True);
        Stop Forcing Player Position(Event Player);
        Remove Health Pool From Player(Last Created Health Pool);
        Set Ability 1 Enabled(Event Player, True);
        Set Ability 2 Enabled(Event Player, True);
        Set Crouch Enabled(Event Player, True);
        Set Ultimate Ability Enabled(Event Player, True);
        Set Aim Speed(Event Player, 100);
        Set Jump Enabled(Event Player, True);
        Start Modifying Hero Voice Lines(Event Player, 1, True);
        Set Primary Fire Enabled(Event Player, True);
        Set Secondary Fire Enabled(Event Player, True);
        Stop Camera(Event Player);
    }
}

rule ("Active Mods 23 - Colossus") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        (Event Player).Mod_Menu_Select == 3;
        (Event Player).Active_Mod == 24;
        Global.Intermission_In_Progress == False;
        Ultimate Charge Percent(Event Player) == 100;
        Is Button Held(Event Player, Button(Interact)) == True;
        Is Moving(Event Player) == False;
        Is In Setup == False;
    }
    actions {
        Wait(1.5, Abort When False);
        Set Gravity(Event Player, 500);
        While(Is In Air(Event Player));
            Abort If(Is Dead(Event Player));
            Set Status(Event Player, Null, Hacked, 2);
            Apply Impulse(Event Player, Down, 10000, To World, Cancel Contrary Motion);
            Wait(1, Ignore Condition);
            Abort If(Is Dead(Event Player));
            Wait(0.116, Ignore Condition);
        End;
        Add Health Pool To Player(Event Player, Armor, 2500, False, True);
        Set Player Variable(Event Player, Is_Colossus, True);
        Start Scaling Player(Event Player, 2.5, True);
        Wait(0.25, Ignore Condition);
        Set Player Variable(Event Player, Player_Position, Position Of(Event Player));
        Start Forcing Player Position(Event Player, (Event Player).Player_Position, True);
        Set Ultimate Charge(Event Player, 0);
        Set Ability 1 Enabled(Event Player, False);
        Set Ability 2 Enabled(Event Player, False);
        Set Crouch Enabled(Event Player, False);
        Set Ultimate Ability Enabled(Event Player, False);
        Set Aim Speed(Event Player, 10);
        Set Jump Enabled(Event Player, False);
        Start Modifying Hero Voice Lines(Event Player, 0.5, True);
        Set Primary Fire Enabled(Event Player, False);
        Start Camera(Event Player, Ray Cast Hit Position(Event Player, Add(Add(Add(Event Player, World Vector Of(Vector(-0.3, 2, 0.3), Event Player, Rotation)), Multiply(Up, 3)), Multiply(Facing Direction Of(Event Player), -8)), Null, Event Player, False), Add(Event Player, Multiply(Facing Direction Of(Event Player), 1000)), 30);
        Set Secondary Fire Enabled(Event Player, False);
        Chase Player Variable Over Time(Event Player, Num_1, 1000, 45, Destination and Duration);
        Wait(0.032, Ignore Condition);
        If(Compare((Event Player).Mod_Menu_Select, !=, 3));
            Set Player Variable(Event Player, Cd_Visible_To, Array(Null));
        End;
        Set Player Variable(Event Player, Cd_Color, Color(Yellow));
        Set Player Variable(Event Player, Cd_Visible_To, Event Player);
        Set Player Variable(Event Player, Cooldown_String_1, Custom String("Active", Null, Null, Null));
        Set Player Variable(Event Player, Cooldown_Chase, Ability Icon String(Hero(Soldier: 76), Button(Ability 1)));
        Wait(0.032, Ignore Condition);
        "Reset player status upon death"
        Wait Until(Is Dead(Event Player), 45);
        Kill(Event Player, Null);
        Play Effect(All Players(All Teams), DVa Self Destruct Explosion Effect, Color(White), Event Player, 4);
        Play Effect(All Players(All Teams), Ring Explosion, Color(White), Event Player, Multiply((Event Player).Num_1, 0.02));
        Play Effect(All Players(All Teams), Doomfist Meteor Strike Impact Sound, Color(White), Event Player, 200);
        Set Status(Players Within Radius(Event Player, Multiply((Event Player).Num_1, 0.015), Opposite Team Of(Team Of(Event Player)), Surfaces And Enemy Barriers), Event Player, Knocked Down, 1.75);
        Damage(Players Within Radius(Event Player, Multiply((Event Player).Num_1, 0.75), Opposite Team Of(Team Of(Event Player)), Surfaces And Enemy Barriers), Event Player, (Event Player).Num_1);
        Stop Chasing Player Variable(Event Player, Num_1);
        Set Player Variable(Event Player, Num_1, 0);
        Start Rule(Colossus_Reset, Do Nothing);
        Set Player Variable(Event Player, Cooldown_Chase, Subtract(15, Multiply((Event Player).Optimize, 2.5)));
        Set Player Variable(Event Player, Cd_Color, Custom Color(180, 180, 180, 255));
        Set Player Variable(Event Player, Cooldown_String_1, Custom String("Cooldown:", Null, Null, Null));
        Chase Player Variable At Rate(Event Player, Cooldown_Chase, 0, 1, Destination and Rate);
        Wait Until(Or(Compare((Event Player).Cooldown_Chase, ==, 0), Compare((Event Player).Mod_Menu_Select, !=, 3)), 9999);
        If(Compare((Event Player).Mod_Menu_Select, !=, 3));
            Set Player Variable(Event Player, Cd_Visible_To, Array(Null));
        End;
        Stop Chasing Player Variable(Event Player, Cooldown_Chase);
        Wait(0.016, Ignore Condition);
        Set Player Variable(Event Player, Cd_Color, Color(Green));
        Set Player Variable(Event Player, Cooldown_String_1, Custom String("Ready", Null, Null, Null));
        Set Player Variable(Event Player, Cooldown_Chase, Icon String(Checkmark));
        If(Not(Is Game In Progress));
            Start Rule(Colossus_Reset, Do Nothing);
    }
}

rule ("Active Mods 23 - Colossus (FX)") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        (Event Player).Mod_Menu_Select == 3;
        (Event Player).Active_Mod == 24;
        (Event Player).Is_Colossus == True;
    }
    actions {
        Set Player Variable(Event Player, Active_Index, 0);
        While(Compare((Event Player).Active_Index, <, 10));
            Play Effect(All Players(All Teams), Brigitte Repair Pack Impact Sound, Color(Team 2), Event Player, 100);
            Modify Player Variable(Event Player, Active_Index, Add, 1);
            Wait(0.5, Ignore Condition);
        End;
        Create Effect(All Players(All Teams), Winston Primal Rage Effect, Color(Team 2), Event Player, 1000, Visible To Position and Radius);
        Set Player Variable At Index(Event Player, Active_Mod_FX_Array, 0, Last Created Entity);
        Create Effect(All Players(All Teams), Smoke Sound, Color(Team 2), Event Player, 100000, Visible To Position and Radius);
        Set Player Variable At Index(Event Player, Active_Mod_FX_Array, 1, Last Created Entity);
        Wait Until(Or(Or(Compare((Event Player).Is_Colossus, ==, False), Is In Setup), Not(Is Game In Progress)), 99999);
        Destroy Effect((Event Player).Active_Mod_FX_Array);
    }
}

rule ("Active Mods 24 - Goomba Stomp") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        (Event Player).Mod_Menu_Select == 3;
        (Event Player).Active_Mod == 25;
        Filtered Array(Players Within Radius(World Vector Of(Vector(0, -1, 0), Event Player, Rotation And Translation), 1.25, Opposite Team Of(Team Of(Event Player)), Off), And(Compare(Current Array Element, !=, Event Player), Is Alive(Current Array Element))) == True;
        Speed Of In Direction(Event Player, Down) >= 0;
        Is In Air(Event Player) == True;
    }
    actions {
        Damage(Remove From Array(Players Within Radius(World Vector Of(Vector(0, -1, 0), Event Player, Rotation And Translation), 1.25, Opposite Team Of(Team Of(Event Player)), Off), Event Player), Event Player, Divide(Health(Event Player), 2));
        Set Status(Remove From Array(Players Within Radius(World Vector Of(Vector(0, -1, 0), Event Player, Rotation And Translation), 1.25, Opposite Team Of(Team Of(Event Player)), Off), Event Player), Event Player, Stunned, 1);
        Apply Impulse(Event Player, Up, 10, To World, Cancel Contrary Motion);
        Play Effect(All Players(All Teams), Ring Explosion, Color(Orange), Position Of(Event Player), 3);
        Play Effect(All Players(All Teams), Sigma Accretion Impact Sound, Color(White), Position Of(Event Player), 100);
        Wait(0.33, Ignore Condition);
    }
}

rule ("Active Mods 25 - Thunderbolt") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        (Event Player).Mod_Menu_Select == 3;
        (Event Player).Active_Mod == 26;
        (Event Player).CastMelee_Mod_Conditions == 1;
        Ultimate Charge Percent(Event Player) >= 20;
    }
    actions {
        Set Ultimate Charge(Event Player, Subtract(Ultimate Charge Percent(Event Player), 20));
        Set Player Variable(Event Player, Mod_Effect_Target, Player Closest To Reticle(Event Player, Opposite Team Of(Team Of(Event Player))));
        Create Beam Effect(All Players(All Teams), Bad Beam, Event Player, (Event Player).Mod_Effect_Target, Color(Red), Visible To Position and Radius);
        Set Player Variable(Event Player, Active_Mod_FX, Last Created Entity);
        Damage((Event Player).Mod_Effect_Target, Event Player, 75);
        Wait(0.7, Ignore Condition);
        Destroy Effect((Event Player).Active_Mod_FX);
        Set Player Variable(Event Player, Cooldown_Chase, Subtract(3.5, Multiply((Event Player).Optimize, 0.5)));
        Set Player Variable(Event Player, Cd_Color, Custom Color(180, 180, 180, 255));
        Set Player Variable(Event Player, Cooldown_String_1, Custom String("Cooldown:", Null, Null, Null));
        Chase Player Variable At Rate(Event Player, Cooldown_Chase, 0, 1, Destination and Rate);
        Wait Until(Or(Compare((Event Player).Cooldown_Chase, ==, 0), Compare((Event Player).Mod_Menu_Select, !=, 3)), 9999);
        If(Compare((Event Player).Mod_Menu_Select, !=, 3));
            Set Player Variable(Event Player, Cd_Visible_To, Array(Null));
        End;
        Stop Chasing Player Variable(Event Player, Cooldown_Chase);
        Wait(0.016, Ignore Condition);
        Set Player Variable(Event Player, Cd_Color, Color(Green));
        Set Player Variable(Event Player, Cooldown_String_1, Custom String("Ready", Null, Null, Null));
        Set Player Variable(Event Player, Cooldown_Chase, Icon String(Checkmark));
    }
}

rule ("Active Mods 26 - Corruption") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        (Event Player).Mod_Menu_Select == 3;
        (Event Player).Active_Mod == 27;
        (Event Player).CastMelee_Mod_Conditions == 1;
    }
    actions {
        Set Player Variable(Event Player, Mod_Effect_Target, Player Closest To Reticle(Event Player, Opposite Team Of(Team Of(Event Player))));
        Play Effect(All Players(All Teams), Good Explosion, Color(Purple), World Vector Of(Vector(0, 0.75, 1), Event Player, Rotation And Translation), 1);
        Play Effect((Event Player).Mod_Effect_Target, Widowmaker Venom Mine Explosion Sound, Color(Team 2), (Event Player).Mod_Effect_Target, 100);
        Create Effect(All Players(All Teams), Bad Aura, Color(Purple), (Event Player).Mod_Effect_Target, 0.66, Visible To Position and Radius);
        Set Player Variable(Event Player, Active_Mod_FX, Last Created Entity);
        Start Damage Over Time((Event Player).Mod_Effect_Target, Event Player, 4, Divide(Max Health((Event Player).Mod_Effect_Target), 10));
        Set Player Variable(Event Player, Cooldown_Chase, Subtract(10, Multiply((Event Player).Optimize, 1.5)));
        Set Player Variable(Event Player, Cd_Color, Custom Color(180, 180, 180, 255));
        Set Player Variable(Event Player, Cooldown_String_1, Custom String("Cooldown:", Null, Null, Null));
        Chase Player Variable At Rate(Event Player, Cooldown_Chase, 0, 1, Destination and Rate);
        Wait Until(Or(Compare((Event Player).Cooldown_Chase, ==, 0), Compare((Event Player).Mod_Menu_Select, !=, 3)), 9999);
        If(Compare((Event Player).Mod_Menu_Select, !=, 3));
            Set Player Variable(Event Player, Cd_Visible_To, Array(Null));
        End;
        Stop Chasing Player Variable(Event Player, Cooldown_Chase);
        Wait(0.016, Ignore Condition);
        Set Player Variable(Event Player, Cd_Color, Color(Green));
        Set Player Variable(Event Player, Cooldown_String_1, Custom String("Ready", Null, Null, Null));
        Set Player Variable(Event Player, Cooldown_Chase, Icon String(Checkmark));
        Destroy Effect((Event Player).Active_Mod_FX);
    }
}

rule ("Active Mods 27 - Railgun") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        (Event Player).Mod_Menu_Select == 3;
        (Event Player).Active_Mod == 28;
        Is Button Held(Event Player, Button(Interact)) == True;
    }
    actions {
        Wait(0.75, Abort When False);
        Set Player Variable(Event Player, Railgun_Charge, 0);
        Chase Player Variable At Rate(Event Player, Railgun_Charge, 100, 33, Destination and Rate);
        Create Progress Bar HUD Text(Event Player, (Event Player).Railgun_Charge, Custom String("RAILGUN CHARGE", Null, Null, Null), Top, 3, Color(White), Color(Orange), Visible To Values and Color, Default Visibility);
        Set Player Variable At Index(Event Player, Active_Mod_FX_Array, 0, Last Text ID);
        Set Melee Enabled(Event Player, False);
        Disallow Button(Event Player, Button(Ultimate));
        Set Ability 1 Enabled(Event Player, False);
        Set Ability 2 Enabled(Event Player, False);
        Set Primary Fire Enabled(Event Player, False);
        Set Secondary Fire Enabled(Event Player, False);
        Set Move Speed(Event Player, 35);
        Set Player Variable(Event Player, Num_1, 0);
        Create Effect(All Players(All Teams), Beacon Sound, Color(White), Eye Position(Event Player), Multiply((Event Player).Railgun_Charge, 2), Visible To Position and Radius);
        Set Player Variable At Index(Event Player, Active_Mod_FX_Array, 1, Last Created Entity);
        Wait(0.032, Ignore Condition);
        If(Compare((Event Player).Mod_Menu_Select, !=, 3));
            Set Player Variable(Event Player, Cd_Visible_To, Array(Null));
        End;
        Set Player Variable(Event Player, Cd_Color, Color(Yellow));
        Set Player Variable(Event Player, Cd_Visible_To, Event Player);
        Set Player Variable(Event Player, Cooldown_String_1, Custom String("Active", Null, Null, Null));
        Set Player Variable(Event Player, Cooldown_Chase, Ability Icon String(Hero(Soldier: 76), Button(Ability 1)));
        Wait(0.032, Ignore Condition);
        While(Is Button Held(Event Player, Button(Interact)));
            Set Player Variable(Event Player, Current_Target_A, Ray Cast Hit Player(Eye Position(Event Player), Add(Eye Position(Event Player), Multiply(Facing Direction Of(Event Player), 50)), All Players(Opposite Team Of(Team Of(Event Player))), Null, False));
            Set Player Variable(Event Player, Target_Position, Ray Cast Hit Position(Eye Position(Event Player), Add(Eye Position(Event Player), Multiply(Facing Direction Of(Event Player), 50)), All Players(Opposite Team Of(Team Of(Event Player))), Null, False));
            If(Array Contains(Array(0, 0.5, 0.75, 1, 1.25, 1.5, 1.625, 1.75, 1.875, 2, 2.125, 2.25, 2.375, 2.5, 2.625, 2.75, 2.875, 3, 3.125, 3.250, 3.375, 3.5, 3.625, 3.75, 3.875, 4), (Event Player).Num_1));
                Play Effect(All Players(All Teams), Sigma Hypersphere Implosion Effect, Team Of(Event Player), Add(Eye Position(Event Player), Vector(0, -0.5, -0.1)), 1);
                Play Effect(All Players(All Teams), Echo Sticky Bomb Explosion Sound, Color(Team 2), Eye Position(Event Player), 200);
                Play Effect(All Players(All Teams), Bad Explosion, Color(Orange), Eye Position(Event Player), 1);
            End;
            Modify Player Variable(Event Player, Num_1, Add, 0.125);
            If(Compare((Event Player).Railgun_Charge, ==, 100));
                Break;
            End;
            Wait(0.15, Ignore Condition);
        End;
        Set Melee Enabled(Event Player, True);
        Allow Button(Event Player, Button(Ultimate));
        Set Ability 1 Enabled(Event Player, True);
        Set Ability 2 Enabled(Event Player, True);
        Set Primary Fire Enabled(Event Player, True);
        Set Secondary Fire Enabled(Event Player, True);
        Set Move Speed(Event Player, 100);
        Stop Chasing Player Variable(Event Player, Railgun_Charge);
        Play Effect(All Players(All Teams), Zarya Particle Cannon Explosion Sound, Color(Team 1), Eye Position(Event Player), 200);
        Wait(0.016, Ignore Condition);
        Destroy Progress Bar HUD Text((Event Player).Active_Mod_FX);
        If(Compare((Event Player).Current_Target_A, ==, Null));
            Play Effect(All Players(All Teams), Ashe Dynamite Explosion Effect, Color(Team 1), (Event Player).Target_Position, 1);
            Play Effect(All Players(All Teams), Ashe Dynamite Explosion Sound, Color(Team 1), (Event Player).Target_Position, 100);
            Create Beam Effect(All Players(All Teams), Echo Focusing Beam, Add(Eye Position(Event Player), Vector(-0.8, -0.7, 0.2)), (Event Player).Target_Position, Color(White), Position and Radius);
            Set Player Variable At Index(Event Player, Active_Mod_FX_Array, 2, Last Created Entity);
            Create Beam Effect(All Players(All Teams), Winston Tesla Cannon Beam, Add(Eye Position(Event Player), Vector(-0.8, -0.7, 0.2)), (Event Player).Target_Position, Color(White), Position and Radius);
            Set Player Variable At Index(Event Player, Active_Mod_FX_Array, 3, Last Created Entity);
            Set Player Variable(Event Player, Target_Area_A, Players Within Radius((Event Player).Target_Position, Multiply((Event Player).Railgun_Charge, 0.1), Opposite Team Of(Team Of(Event Player)), Surfaces And Enemy Barriers));
            Set Status((Event Player).Target_Area_A, Event Player, Burning, Multiply((Event Player).Railgun_Charge, 0.05));
            Start Damage Over Time((Event Player).Target_Area_A, Event Player, Multiply((Event Player).Railgun_Charge, 0.05), Add(10, Multiply((Event Player).Railgun_Charge, 0.3)));
            Wait(0.5, Ignore Condition);
            Destroy Effect(Value In Array((Event Player).Active_Mod_FX_Array, 2));
            Destroy Effect(Value In Array((Event Player).Active_Mod_FX_Array, 3));
        Else;
            Small Message(Event Player, Custom String("Player hit!", Null, Null, Null));
            Play Effect(All Players(All Teams), Pharah Concussive Blast Effect, Color(Team 1), (Event Player).Target_Position, 1);
            Play Effect(All Players(All Teams), Pharah Rocket Launcher Explosion Sound, Color(Team 1), (Event Player).Target_Position, 100);
            Play Effect(All Players(All Teams), Echo Sticky Bomb Explosion Effect, Color(Team 1), Eye Position(Event Player), 1);
            Play Effect(All Players(All Teams), Ashe Dynamite Explosion Effect, Color(Team 1), (Event Player).Target_Position, 1);
            Play Effect(All Players(All Teams), Ashe Dynamite Explosion Sound, Color(Team 1), (Event Player).Target_Position, 100);
            Create Beam Effect(All Players(All Teams), Echo Focusing Beam, Add(Eye Position(Event Player), Vector(-0.8, -0.7, 0.2)), Eye Position((Event Player).Current_Target_A), Color(White), Position and Radius);
            Set Player Variable At Index(Event Player, Active_Mod_FX_Array, 4, Last Created Entity);
            Create Beam Effect(All Players(All Teams), Winston Tesla Cannon Beam, Add(Eye Position(Event Player), Vector(-0.8, -0.7, 0.2)), Eye Position((Event Player).Current_Target_A), Color(White), Position and Radius);
            Set Player Variable At Index(Event Player, Active_Mod_FX_Array, 5, Last Created Entity);
            Damage((Event Player).Current_Target_A, Event Player, Raise To Power(Multiply((Event Player).Railgun_Charge, 0.173), 2));
            Set Status((Event Player).Current_Target_A, Event Player, Burning, Multiply((Event Player).Railgun_Charge, 0.08));
            Start Damage Over Time((Event Player).Current_Target_A, Event Player, Multiply((Event Player).Railgun_Charge, 0.08), Add(10, Multiply((Event Player).Railgun_Charge, 0.15)));
            Wait(0.5, Ignore Condition);
            Destroy Effect(Value In Array((Event Player).Active_Mod_FX_Array, 4));
            Destroy Effect(Value In Array((Event Player).Active_Mod_FX_Array, 5));
        End;
        Wait(0.016, Ignore Condition);
        Destroy Progress Bar HUD Text(First Of((Event Player).Active_Mod_FX_Array));
        Destroy Effect(Value In Array((Event Player).Active_Mod_FX_Array, 1));
        Set Player Variable(Event Player, Cooldown_Chase, Subtract(7, Multiply((Event Player).Optimize, 1.5)));
        Set Player Variable(Event Player, Cd_Color, Custom Color(180, 180, 180, 255));
        Set Player Variable(Event Player, Cooldown_String_1, Custom String("Cooldown:", Null, Null, Null));
        Chase Player Variable At Rate(Event Player, Cooldown_Chase, 0, 1, Destination and Rate);
        Wait Until(Or(Compare((Event Player).Cooldown_Chase, ==, 0), Compare((Event Player).Mod_Menu_Select, !=, 3)), 9999);
        If(Compare((Event Player).Mod_Menu_Select, !=, 3));
            Set Player Variable(Event Player, Cd_Visible_To, Array(Null));
        End;
        Stop Chasing Player Variable(Event Player, Cooldown_Chase);
        Wait(0.016, Ignore Condition);
        Set Player Variable(Event Player, Cd_Color, Color(Green));
        Set Player Variable(Event Player, Cooldown_String_1, Custom String("Ready", Null, Null, Null));
        Set Player Variable(Event Player, Cooldown_Chase, Icon String(Checkmark));
    }
}

rule ("Active Mods 28 - Pocket Poison") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        (Event Player).Mod_Menu_Select == 3;
        (Event Player).Active_Mod == 29;
        Global.Intermission_In_Progress == False;
        Is Button Held(Event Player, Button(Melee)) == True;
    }
    actions {
        Wait(0.032, Ignore Condition);
        If(Compare((Event Player).Mod_Menu_Select, !=, 3));
            Set Player Variable(Event Player, Cd_Visible_To, Array(Null));
        End;
        Set Player Variable(Event Player, Cd_Color, Color(Yellow));
        Set Player Variable(Event Player, Cd_Visible_To, Event Player);
        Set Player Variable(Event Player, Cooldown_String_1, Custom String("Active", Null, Null, Null));
        Set Player Variable(Event Player, Cooldown_Chase, Ability Icon String(Hero(Soldier: 76), Button(Ability 1)));
        Wait(0.032, Ignore Condition);
        "exists"
        Set Player Variable At Index(Event Player, Projectile, 2, True);
        "initial position"
        Set Player Variable At Index(Event Player, Projectile, 0, Eye Position(Event Player));
        "position = initial position"
        Set Player Variable(Event Player, Projectile_Position, First Of((Event Player).Projectile));
        "start time"
        Set Player Variable At Index(Event Player, Projectile, 1, Total Time Elapsed);
        "initial velocity"
        Set Player Variable At Index(Event Player, Projectile, 3, Multiply(20, Facing Direction Of(Event Player)));
        Set Player Variable At Index(Event Player, Projectile, 4, Vector(0, -9.8, 0));
        Create Effect(All Players(All Teams), Orb, Color(Green), (Event Player).Projectile_Position, 0.5, Visible To Position and Radius);
        Set Player Variable At Index(Event Player, Active_Mod_FX_Array, 0, Last Created Entity);
        Chase Player Variable At Rate(Event Player, Projectile_Position, Add(Add(Multiply(Value In Array((Event Player).Projectile, 3), Subtract(Total Time Elapsed, Value In Array((Event Player).Projectile, 1))), First Of((Event Player).Projectile)), Multiply(Multiply(Multiply(0.5, Value In Array((Event Player).Projectile, 4)), Subtract(Total Time Elapsed, Value In Array((Event Player).Projectile, 1))), Subtract(Total Time Elapsed, Value In Array((Event Player).Projectile, 1)))), 999999, Destination and Rate);
        Wait Until(Compare(Ray Cast Hit Position((Event Player).Projectile_Position, Subtract((Event Player).Projectile_Position, Vector(0, 0.5, 0)), All Players(All Teams), Event Player, True), !=, Subtract((Event Player).Projectile_Position, Vector(0, 0.5, 0))), 15);
        Stop Chasing Player Variable(Event Player, Projectile_Position);
        Set Player Variable At Index(Event Player, Projectile, 2, False);
        Destroy Effect(First Of((Event Player).Active_Mod_FX_Array));
        Play Effect(All Players(All Teams), Ana Biotic Grenade Explosion Effect, Color(Team 1), (Event Player).Projectile_Position, 50);
        Set Player Variable(Event Player, Active_Time, 0);
        Wait(0.032, Ignore Condition);
        Set Player Variable(Event Player, Target_Area_A, Players Within Radius((Event Player).Projectile_Position, 6.25, Opposite Team Of(Team Of(Event Player)), Off));
        Play Effect(All Players(All Teams), Bad Explosion, Color(Green), (Event Player).Projectile_Position, 8);
        Play Effect(All Players(All Teams), Wrecking Ball Minefield Explosion Sound, Null, (Event Player).Projectile_Position, 200);
        Create Effect(All Players(All Teams), Cloud, Color(Lime Green), (Event Player).Projectile_Position, 7.5, Visible To Position and Radius);
        Set Player Variable At Index(Event Player, Active_Mod_FX_Array, 1, Last Created Entity);
        Create Effect(All Players(All Teams), Cloud, Color(Lime Green), Add((Event Player).Projectile_Position, Vector(0, 0.75, 0)), 6, Visible To Position and Radius);
        Set Player Variable At Index(Event Player, Active_Mod_FX_Array, 2, Last Created Entity);
        Create Effect(All Players(All Teams), Cloud, Color(Lime Green), Add((Event Player).Projectile_Position, Vector(0, 1.25, 0)), 4, Visible To Position and Radius);
        Set Player Variable At Index(Event Player, Active_Mod_FX_Array, 3, Last Created Entity);
        Create Effect(All Players(All Teams), Ring, Color(Green), (Event Player).Projectile_Position, 5.75, Visible To Position and Radius);
        Set Player Variable At Index(Event Player, Active_Mod_FX_Array, 4, Last Created Entity);
        Wait(0.032, Ignore Condition);
        Chase Player Variable At Rate(Event Player, Active_Time, 7, 1, Destination and Rate);
        While(Compare((Event Player).Active_Time, <, 7));
            Wait(0.3, Ignore Condition);
            For Player Variable(Event Player, Active_Index, 0, Count Of(Players Within Radius((Event Player).Projectile_Position, 6.25, Opposite Team Of(Team Of(Event Player)), Off)), 1);
                If(Not((Value In Array((Event Player).Target_Area_A, (Event Player).Active_Index)).DoT_Boolean));
                    Start Damage Over Time(Value In Array((Event Player).Target_Area_A, (Event Player).Active_Index), Event Player, 7, 85.7);
                    Set Player Variable(Value In Array((Event Player).Target_Area_A, (Event Player).Active_Index), DoT_Var, Last Damage Over Time ID);
                    Play Effect(All Players(All Teams), Bad Pickup Effect, Color(Green), Value In Array((Event Player).Target_Area_A, (Event Player).Active_Index), 1);
                    Play Effect(All Players(All Teams), Widowmaker Venom Mine Explosion Sound, Null, Value In Array((Event Player).Target_Area_A, (Event Player).Active_Index), 100);
                End;
                Set Player Variable(Value In Array((Event Player).Target_Area_A, (Event Player).Active_Index), DoT_Boolean, True);
                Wait(0.1, Ignore Condition);
                If(Not(Array Contains(Players Within Radius((Event Player).Projectile_Position, 6.25, Opposite Team Of(Team Of(Event Player)), Off), Value In Array((Event Player).Target_Area_A, (Event Player).Active_Index))));
                    Stop Damage Over Time((Value In Array((Event Player).Target_Area_A, (Event Player).Active_Index)).DoT_Var);
                    Set Player Variable(Value In Array((Event Player).Target_Area_A, (Event Player).Active_Index), DoT_Boolean, False);
                End;
                Wait(0.05, Ignore Condition);
            End;
            Set Player Variable(Event Player, Target_Area_A, Players Within Radius((Event Player).Projectile_Position, 6.75, Opposite Team Of(Team Of(Event Player)), Off));
            Wait(0.2, Ignore Condition);
        End;
        For Player Variable(Event Player, Active_Index_2, 0, Count Of((Event Player).Target_Area_A), 1);
            Stop Damage Over Time((Value In Array((Event Player).Target_Area_A, (Event Player).Active_Index_2)).DoT_Var);
            Set Player Variable(Value In Array((Event Player).Target_Area_A, (Event Player).Active_Index_2), DoT_Var, Null);
        End;
        Stop Chasing Player Variable(Event Player, Active_Time);
        Destroy Effect(Value In Array((Event Player).Active_Mod_FX_Array, 1));
        Destroy Effect(Value In Array((Event Player).Active_Mod_FX_Array, 2));
        Destroy Effect(Value In Array((Event Player).Active_Mod_FX_Array, 3));
        Destroy Effect(Value In Array((Event Player).Active_Mod_FX_Array, 4));
        For Player Variable(Event Player, Active_Index, 0, Count Of(Players Within Radius((Event Player).Projectile_Position, 10, Opposite Team Of(Team Of(Event Player)), Off)), 1);
            Set Player Variable(Value In Array((Event Player).Target_Area_A, (Event Player).Active_Index), DoT_Boolean, False);
        End;
        Set Player Variable(Event Player, Cooldown_Chase, Subtract(11, Multiply((Event Player).Optimize, 2)));
        Set Player Variable(Event Player, Cd_Color, Custom Color(180, 180, 180, 255));
        Set Player Variable(Event Player, Cooldown_String_1, Custom String("Cooldown:", Null, Null, Null));
        Chase Player Variable At Rate(Event Player, Cooldown_Chase, 0, 1, Destination and Rate);
        Wait Until(Or(Compare((Event Player).Cooldown_Chase, ==, 0), Compare((Event Player).Mod_Menu_Select, !=, 3)), 9999);
        If(Compare((Event Player).Mod_Menu_Select, !=, 3));
            Set Player Variable(Event Player, Cd_Visible_To, Array(Null));
        End;
        Stop Chasing Player Variable(Event Player, Cooldown_Chase);
        Wait(0.016, Ignore Condition);
        Set Player Variable(Event Player, Cd_Color, Color(Green));
        Set Player Variable(Event Player, Cooldown_String_1, Custom String("Ready", Null, Null, Null));
        Set Player Variable(Event Player, Cooldown_Chase, Icon String(Checkmark));
    }
}

rule ("Active Mods 30 - Power Glove") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        (Event Player).Mod_Menu_Select == 3;
        (Event Player).Active_Mod == 31;
        Global.Intermission_In_Progress == False;
        Is Button Held(Event Player, Button(Reload)) == True;
        (Event Player).Active_Mod_Skill_Toggle == 0;
    }
    actions {
        Set Player Variable(Event Player, Active_Mod_Skill_Toggle, 1);
        Wait(0.032, Ignore Condition);
        If(Compare((Event Player).Mod_Menu_Select, !=, 3));
            Set Player Variable(Event Player, Cd_Visible_To, Array(Null));
        End;
        Set Player Variable(Event Player, Cd_Color, Color(Yellow));
        Set Player Variable(Event Player, Cd_Visible_To, Event Player);
        Set Player Variable(Event Player, Cooldown_String_1, Custom String("Active", Null, Null, Null));
        Set Player Variable(Event Player, Cooldown_Chase, Ability Icon String(Hero(Soldier: 76), Button(Ability 1)));
        Wait(0.032, Ignore Condition);
        Play Effect(Event Player, Brigitte Repair Pack Impact Sound, Null, Event Player, 200);
        Play Effect(All Players(All Teams), Good Pickup Effect, Color(Green), Event Player, 1);
        Set Player Variable(Event Player, Boolean, True);
    }
}

rule ("Active Mods 31 - Elemental Charge (Initialize)") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        (Event Player).Mod_Menu_Select == 3;
        (Event Player).Active_Mod == 32;
        Global.Intermission_In_Progress == False;
    }
    actions {
        Set Player Variable(Event Player, Active_Index, 0);
        Set Player Variable(Event Player, Active_String, Custom String("BURN", Null, Null, Null));
        Set Player Variable(Event Player, Num_4, Color(Rose));
        Set Player Variable(Event Player, Active_String_2, Custom String("(READY)", Null, Null, Null));
        Create In-World Text(Event Player, Custom String("ABILITY: {0} {1}", (Event Player).Active_String, (Event Player).Active_String_2, Null), Update Every Frame(Add(Eye Position(Event Player), Multiply(100, Add(Add(Multiply(2.5, World Vector Of(Right, Event Player, Rotation)), Multiply(-1.43, Direction From Angles(Horizontal Angle From Direction(Facing Direction Of(Event Player)), Subtract(Vertical Angle From Direction(Facing Direction Of(Event Player)), 90)))), Multiply(3, Facing Direction Of(Event Player)))))), 2, Do Not Clip, Visible To Position String and Color, (Event Player).Num_4, Default Visibility);
        Set Player Variable At Index(Event Player, Active_Mod_FX_Array, 0, Last Text ID);
        Set Player Variable(Event Player, Boolean, True);
        Wait(0.2, Ignore Condition);
        Wait Until(Compare((Event Player).Mod_Menu_Select, !=, 3), 99999);
        Destroy In-World Text(First Of((Event Player).Active_Mod_FX_Array));
    }
}

rule ("Active Mods 31 - Elemental Charge") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        (Event Player).Mod_Menu_Select == 3;
        (Event Player).Active_Mod == 32;
        Global.Intermission_In_Progress == False;
        Is Button Held(Event Player, Button(Interact)) == True;
        (Event Player).Boolean != False;
    }
    actions {
        If(Compare((Event Player).Active_Index, <, 2));
            Modify Player Variable(Event Player, Active_Index, Add, 1);
        Else If(Compare((Event Player).Active_Index, ==, 2));
            Set Player Variable(Event Player, Active_Index, 0);
        End;
        If(True);
        Skip(Value In Array(Array(12, 0, 4, 8), Add(1, Index Of Array Value(Array(0, 1, 2), (Event Player).Active_Index))));
        //__label_switch_3_0__:
        Set Player Variable(Event Player, Active_String, Custom String("BURN", Null, Null, Null));
        Set Player Variable(Event Player, Num_4, Color(Rose));
        Play Effect(Event Player, Brigitte Repair Pack Armor Sound, Null, Event Player, 200);
        Else;
        //__label_switch_3_1__:
        Set Player Variable(Event Player, Active_String, Custom String("FREEZE", Null, Null, Null));
        Set Player Variable(Event Player, Num_4, Color(Sky Blue));
        Play Effect(Event Player, Brigitte Repair Pack Armor Sound, Null, Event Player, 200);
        Else;
        //__label_switch_3_2__:
        Set Player Variable(Event Player, Active_String, Custom String("IMPULSE", Null, Null, Null));
        Set Player Variable(Event Player, Num_4, Color(Green));
        Play Effect(Event Player, Brigitte Repair Pack Armor Sound, Null, Event Player, 200);
        Else;
        //__label_switch_3_default__:
        End;
        If(Compare((Event Player).Mod_Menu_Select, !=, 3));
            Destroy In-World Text(First Of((Event Player).Active_Mod_FX_Array));
            Abort;
        End;
        Wait(1, Ignore Condition);
    }
}

rule ("Active Mods 32 - Bouncing Blades") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        (Event Player).Mod_Menu_Select == 3;
        (Event Player).Active_Mod == 33;
        Global.Intermission_In_Progress == False;
        Or(Is Button Held(Event Player, Button(Melee)), And(Array Contains(Array(Hero(Brigitte), Hero(Reinhardt)), Hero Of(Event Player)), Is Button Held(Event Player, Button(Reload)))) == True;
        (Event Player).Blade_Chase == 0;
    }
    actions {
        Set Player Variable(Event Player, Other_Players, Empty Array);
        Set Player Variable(Event Player, Active_Index, 0);
        Play Effect(All Players(All Teams), Sigma Hypersphere Implosion Sound, Color(Team 2), Event Player, 150);
        Play Effect(All Players(All Teams), Sigma Hypersphere Implosion Effect, Color(Team 2), Subtract(Eye Position(Event Player), Vector(0, 0.5, 0)), 1);
        Set Player Variable(Event Player, Blade_Chase, 100);
        Wait(0.016, Ignore Condition);
        Chase Player Variable Over Time(Event Player, Blade_Chase, 0, 10, Destination and Duration);
        Wait(0.032, Ignore Condition);
        If(Compare((Event Player).Mod_Menu_Select, !=, 3));
            Set Player Variable(Event Player, Cd_Visible_To, Array(Null));
        End;
        Set Player Variable(Event Player, Cd_Color, Color(Yellow));
        Set Player Variable(Event Player, Cd_Visible_To, Event Player);
        Set Player Variable(Event Player, Cooldown_String_1, Custom String("Active", Null, Null, Null));
        Set Player Variable(Event Player, Cooldown_Chase, Ability Icon String(Hero(Soldier: 76), Button(Ability 1)));
        Wait(0.032, Ignore Condition);
        Wait Until(Compare((Event Player).Blade_Chase, ==, 0), 99999);
        Stop Chasing Player Variable(Event Player, Blade_Chase);
        Set Player Variable(Event Player, Cooldown_Chase, Subtract(9, Multiply((Event Player).Optimize, 1.5)));
        Set Player Variable(Event Player, Cd_Color, Custom Color(180, 180, 180, 255));
        Set Player Variable(Event Player, Cooldown_String_1, Custom String("Cooldown:", Null, Null, Null));
        Chase Player Variable At Rate(Event Player, Cooldown_Chase, 0, 1, Destination and Rate);
        Wait Until(Or(Compare((Event Player).Cooldown_Chase, ==, 0), Compare((Event Player).Mod_Menu_Select, !=, 3)), 9999);
        If(Compare((Event Player).Mod_Menu_Select, !=, 3));
            Set Player Variable(Event Player, Cd_Visible_To, Array(Null));
        End;
        Stop Chasing Player Variable(Event Player, Cooldown_Chase);
        Wait(0.016, Ignore Condition);
        Set Player Variable(Event Player, Cd_Color, Color(Green));
        Set Player Variable(Event Player, Cooldown_String_1, Custom String("Ready", Null, Null, Null));
        Set Player Variable(Event Player, Cooldown_Chase, Icon String(Checkmark));
    }
}

rule ("Active Mods 33 - Vs. Goliath") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        (Event Player).Mod_Menu_Select == 3;
        Global.Intermission_In_Progress == False;
        (Event Player).Active_Mod == 34;
    }
    actions {
        If(Not(Entity Exists(First Of((Event Player).Active_Mod_FX_Array))));
            Create In-World Text(Event Player, Custom String("{0} {1}", (Event Player).Active_String, (Event Player).Active_String_2, Null), Update Every Frame(Add(Eye Position(Event Player), Multiply(100, Add(Add(Multiply(2.7, World Vector Of(Right, Event Player, Rotation)), Multiply(-1.53, Direction From Angles(Horizontal Angle From Direction(Facing Direction Of(Event Player)), Subtract(Vertical Angle From Direction(Facing Direction Of(Event Player)), 90)))), Multiply(3, Facing Direction Of(Event Player)))))), 1.5, Do Not Clip, Visible To Position String and Color, (Event Player).Active_Index, Default Visibility);
            Set Player Variable At Index(Event Player, Active_Mod_FX_Array, 0, Last Text ID);
        End;
        Set Player Variable(Event Player, Active_Mod_Skill_Toggle, 0);
        Set Player Variable(Event Player, Active_Index, Color(Rose));
        Set Player Variable(Event Player, Active_String, Custom String("More Damage Dealt", Null, Null, Null));
        Set Player Variable(Event Player, Active_String_2, Icon String(Arrow: Up));
        Wait Until(Or(Is Button Held(Event Player, Button(Interact)), Compare((Event Player).Mod_Menu_Select, !=, 3)), 99999);
        Abort If(Compare((Event Player).Mod_Menu_Select, !=, 3));
        Play Effect(Event Player, Brigitte Repair Pack Armor Sound, Null, Event Player, 200);
        Set Player Variable(Event Player, Active_Mod_Skill_Toggle, 1);
        Set Player Variable(Event Player, Active_Index, Color(Green));
        Set Player Variable(Event Player, Active_String, Custom String("Less Damage Taken", Null, Null, Null));
        Set Player Variable(Event Player, Active_String_2, Icon String(Arrow: Down));
        Wait Until(Or(Is Button Held(Event Player, Button(Interact)), Compare((Event Player).Mod_Menu_Select, !=, 3)), 99999);
        Abort If(Compare((Event Player).Mod_Menu_Select, !=, 3));
        Play Effect(Event Player, Brigitte Repair Pack Armor Sound, Null, Event Player, 200);
        Loop;
    }
}

rule ("Active Mods 34 - Ghosted") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        (Event Player).Mod_Menu_Select == 3;
        Global.Intermission_In_Progress == False;
        (Event Player).Active_Mod == 35;
        Is Button Held(Event Player, Button(Melee)) == True;
        Is In Air(Event Player) == True;
    }
    actions {
        Play Effect(All Players(All Teams), Bad Explosion, Color(White), Event Player, 5);
        Play Effect(All Players(All Teams), Reaper Wraith Form Sound, Color(White), Event Player, 100);
        Create Effect(All Players(Team Of(Event Player)), Reaper Wraith Form Effect, Color(Team 1), Event Player, 1, Position and Radius);
        Set Player Variable At Index(Event Player, Active_Mod_FX_Array, 0, Last Created Entity);
        Wait(0.032, Ignore Condition);
        If(Compare((Event Player).Mod_Menu_Select, !=, 3));
            Set Player Variable(Event Player, Cd_Visible_To, Array(Null));
        End;
        Set Player Variable(Event Player, Cd_Color, Color(Yellow));
        Set Player Variable(Event Player, Cd_Visible_To, Event Player);
        Set Player Variable(Event Player, Cooldown_String_1, Custom String("Active", Null, Null, Null));
        Set Player Variable(Event Player, Cooldown_Chase, Ability Icon String(Hero(Soldier: 76), Button(Ability 1)));
        Wait(0.032, Ignore Condition);
        Wait(0.15, Ignore Condition);
        Set Move Speed(Event Player, 200);
        Set Invisible(Event Player, Enemies);
        Set Status(Event Player, Null, Phased Out, 1.5);
        Wait(2, Ignore Condition);
        Call Subroutine(MovementReset);
        Set Invisible(Event Player, None);
        Play Effect(All Players(All Teams), Bad Explosion, Color(White), Event Player, 5);
        Wait(0.25, Ignore Condition);
        Destroy Effect(First Of((Event Player).Active_Mod_FX_Array));
        Play Effect(All Players(All Teams), Bad Explosion, Color(White), Event Player, 3);
        Set Player Variable(Event Player, Cooldown_Chase, Subtract(8, Multiply((Event Player).Optimize, 1.75)));
        Set Player Variable(Event Player, Cd_Color, Custom Color(180, 180, 180, 255));
        Set Player Variable(Event Player, Cooldown_String_1, Custom String("Cooldown:", Null, Null, Null));
        Chase Player Variable At Rate(Event Player, Cooldown_Chase, 0, 1, Destination and Rate);
        Wait Until(Or(Compare((Event Player).Cooldown_Chase, ==, 0), Compare((Event Player).Mod_Menu_Select, !=, 3)), 9999);
        If(Compare((Event Player).Mod_Menu_Select, !=, 3));
            Set Player Variable(Event Player, Cd_Visible_To, Array(Null));
        End;
        Stop Chasing Player Variable(Event Player, Cooldown_Chase);
        Wait(0.016, Ignore Condition);
        Set Player Variable(Event Player, Cd_Color, Color(Green));
        Set Player Variable(Event Player, Cooldown_String_1, Custom String("Ready", Null, Null, Null));
        Set Player Variable(Event Player, Cooldown_Chase, Icon String(Checkmark));
    }
}

rule ("Active Mods 35 - Life Tap") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        (Event Player).Mod_Menu_Select == 3;
        (Event Player).Active_Mod == 36;
        Global.Intermission_In_Progress == False;
        Is Button Held(Event Player, Button(Ultimate)) == True;
        Ultimate Charge Percent(Event Player) < 100;
        Normalized Health(Event Player) > 0.3;
        Is Using Ultimate(Event Player) == False;
        Has Status(Event Player, Phased Out) == False;
        Has Status(Event Player, Invincible) == False;
        Hero Of(Event Player) != Hero(Echo);
    }
    actions {
        If(Compare((Event Player).Passive_Mod, !=, 34));
            Damage(Event Player, Null, Multiply(Max Health(Event Player), 0.3));
            Set Ultimate Charge(Event Player, Add(Ultimate Charge Percent(Event Player), 20));
        Else If(Compare((Event Player).Omega_Charge, <, 90));
            Damage(Event Player, Null, Multiply(Max Health(Event Player), 0.3));
            Modify Player Variable(Event Player, Omega_Charge, Add, 10);
        End;
        Wait(1, Ignore Condition);
    }
}

rule ("Active Mods 36 - Healthing Hand") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        (Event Player).Mod_Menu_Select == 3;
        (Event Player).Active_Mod == 37;
        (Event Player).CastMelee_Mod_Conditions_Ally == 1;
    }
    actions {
        Set Player Variable(Event Player, Mod_Effect_Target, Player Closest To Reticle(Event Player, Team Of(Event Player)));
        Create Beam Effect(All Players(All Teams), Good Beam, Event Player, (Event Player).Mod_Effect_Target, Color(Green), Visible To Position and Radius);
        Set Player Variable(Event Player, Active_Mod_FX, Last Created Entity);
        Add Health Pool To Player((Event Player).Mod_Effect_Target, Health, Multiply(Health(Event Player), 2), True, True);
        Set Player Variable((Event Player).Mod_Effect_Target, Health_Temp, Last Created Health Pool);
        Heal((Event Player).Mod_Effect_Target, Null, ((Event Player).Mod_Effect_Target).Health_Temp);
        "eventPlayer.Mod_Effect_Target.setHealth(eventPlayer.getHealth() + eventPlayer.Mod_Effect_Target.getHealth())"
        Set Status(Event Player, Null, Stunned, Subtract(9, Multiply((Event Player).Optimize, 1.75)));
        Communicate(Event Player, With You);
        Wait(0.032, Ignore Condition);
        If(Compare((Event Player).Mod_Menu_Select, !=, 3));
            Set Player Variable(Event Player, Cd_Visible_To, Array(Null));
        End;
        Set Player Variable(Event Player, Cd_Color, Color(Yellow));
        Set Player Variable(Event Player, Cd_Visible_To, Event Player);
        Set Player Variable(Event Player, Cooldown_String_1, Custom String("Active", Null, Null, Null));
        Set Player Variable(Event Player, Cooldown_Chase, Ability Icon String(Hero(Soldier: 76), Button(Ability 1)));
        Wait(0.032, Ignore Condition);
        Wait(1, Ignore Condition);
        Destroy Effect((Event Player).Active_Mod_FX);
        Wait(8, Ignore Condition);
        Remove Health Pool From Player(((Event Player).Mod_Effect_Target).Health_Temp);
        Set Player Variable(Event Player, Cooldown_Chase, Subtract(11, Multiply((Event Player).Optimize, 2)));
        Set Player Variable(Event Player, Cd_Color, Custom Color(180, 180, 180, 255));
        Set Player Variable(Event Player, Cooldown_String_1, Custom String("Cooldown:", Null, Null, Null));
        Chase Player Variable At Rate(Event Player, Cooldown_Chase, 0, 1, Destination and Rate);
        Wait Until(Or(Compare((Event Player).Cooldown_Chase, ==, 0), Compare((Event Player).Mod_Menu_Select, !=, 3)), 9999);
        If(Compare((Event Player).Mod_Menu_Select, !=, 3));
            Set Player Variable(Event Player, Cd_Visible_To, Array(Null));
        End;
        Stop Chasing Player Variable(Event Player, Cooldown_Chase);
        Wait(0.016, Ignore Condition);
        Set Player Variable(Event Player, Cd_Color, Color(Green));
        Set Player Variable(Event Player, Cooldown_String_1, Custom String("Ready", Null, Null, Null));
        Set Player Variable(Event Player, Cooldown_Chase, Icon String(Checkmark));
    }
}

rule ("Active Mods 37 - Anti-Injure") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        (Event Player).Mod_Menu_Select == 3;
        (Event Player).Active_Mod == 38;
        Global.Intermission_In_Progress == False;
        (Event Player).CastMelee_Mod_Conditions_Ally == 1;
    }
    actions {
        Set Player Variable(Event Player, Mod_Effect_Target, Player Closest To Reticle(Event Player, Team Of(Event Player)));
        Abort If(Compare(Distance Between(Event Player, (Event Player).Mod_Effect_Target), >, 12));
        Wait(0.032, Ignore Condition);
        Wait(0.032, Ignore Condition);
        If(Compare((Event Player).Mod_Menu_Select, !=, 3));
            Set Player Variable(Event Player, Cd_Visible_To, Array(Null));
        End;
        Set Player Variable(Event Player, Cd_Color, Color(Yellow));
        Set Player Variable(Event Player, Cd_Visible_To, Event Player);
        Set Player Variable(Event Player, Cooldown_String_1, Custom String("Active", Null, Null, Null));
        Set Player Variable(Event Player, Cooldown_Chase, Ability Icon String(Hero(Soldier: 76), Button(Ability 1)));
        Wait(0.032, Ignore Condition);
        Play Effect(All Players(All Teams), Baptiste Biotic Launcher Explosion Sound, Color(Team 1), (Event Player).Mod_Effect_Target, 125);
        Play Effect(All Players(All Teams), Good Explosion, Color(Green), (Event Player).Mod_Effect_Target, 1);
        Play Effect(All Players(All Teams), Good Explosion, Color(Green), Event Player, 1);
        Create Effect(All Players(All Teams), Heal Target Effect, Color(Team 1), (Event Player).Mod_Effect_Target, 1, Position and Radius);
        Set Player Variable At Index(Event Player, Active_Mod_FX_Array, 0, Last Created Entity);
        Create Effect(All Players(All Teams), Heal Target Active Effect, Color(Team 1), (Event Player).Mod_Effect_Target, 1, Position and Radius);
        Set Player Variable At Index(Event Player, Active_Mod_FX_Array, 1, Last Created Entity);
        Wait(0.032, Ignore Condition);
        Set Player Variable(Event Player, Health_Temp, Divide(Subtract(Max Health((Event Player).Mod_Effect_Target), Health((Event Player).Mod_Effect_Target)), 4));
        Start Heal Over Time((Event Player).Mod_Effect_Target, Event Player, 4, (Event Player).Health_Temp);
        Set Player Variable(Event Player, HoT_Var, Last Heal Over Time ID);
        Wait(4, Ignore Condition);
        Stop Heal Over Time((Event Player).HoT_Var);
        Set Player Variable(Event Player, HoT_Var, Null);
        Destroy Effect((Event Player).Active_Mod_FX_Array);
        Set Player Variable(Event Player, Cooldown_Chase, Subtract(2, Multiply((Event Player).Optimize, 0.333)));
        Set Player Variable(Event Player, Cd_Color, Custom Color(180, 180, 180, 255));
        Set Player Variable(Event Player, Cooldown_String_1, Custom String("Cooldown:", Null, Null, Null));
        Chase Player Variable At Rate(Event Player, Cooldown_Chase, 0, 1, Destination and Rate);
        Wait Until(Or(Compare((Event Player).Cooldown_Chase, ==, 0), Compare((Event Player).Mod_Menu_Select, !=, 3)), 9999);
        If(Compare((Event Player).Mod_Menu_Select, !=, 3));
            Set Player Variable(Event Player, Cd_Visible_To, Array(Null));
        End;
        Stop Chasing Player Variable(Event Player, Cooldown_Chase);
        Wait(0.016, Ignore Condition);
        Set Player Variable(Event Player, Cd_Color, Color(Green));
        Set Player Variable(Event Player, Cooldown_String_1, Custom String("Ready", Null, Null, Null));
        Set Player Variable(Event Player, Cooldown_Chase, Icon String(Checkmark));
    }
}

rule ("Active Mods 38 - Get Down") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        (Event Player).Mod_Menu_Select == 3;
        (Event Player).Active_Mod == 39;
        Global.Intermission_In_Progress == False;
        (Event Player).CastMelee_Mod_Conditions_Ally == 1;
        Normalized Health(Event Player) > 0.2;
        Normalized Health(Player Closest To Reticle(Event Player, Team Of(Event Player))) <= 0.2;
    }
    actions {
        Set Player Variable(Event Player, Mod_Effect_Target, Player Closest To Reticle(Event Player, Team Of(Event Player)));
        Set Player Variable(Event Player, Mod_Effect_Caster, Position Of(Event Player));
        Wait(0.05, Ignore Condition);
        Play Effect(All Players(All Teams), Tracer Recall Disappear Effect, Color(Team 1), Event Player, 1);
        Play Effect(All Players(All Teams), Tracer Recall Disappear Effect, Color(Team 1), (Event Player).Mod_Effect_Target, 1);
        Play Effect(All Players(All Teams), Tracer Recall Disappear Sound, Null, Event Player, 200);
        Set Status(Event Player, Null, Phased Out, 0.66);
        Set Status((Event Player).Mod_Effect_Target, Null, Phased Out, 0.66);
        Teleport(Event Player, (Event Player).Mod_Effect_Target);
        Teleport((Event Player).Mod_Effect_Target, (Event Player).Mod_Effect_Caster);
        Set Facing(Event Player, Facing Direction Of((Event Player).Mod_Effect_Target), To World);
        Create Beam Effect(All Players(All Teams), Symmetra Projector Beam, Event Player, (Event Player).Mod_Effect_Target, Color(Team 1), Visible To Position and Radius);
        Set Player Variable(Event Player, Active_Mod_FX, Last Created Entity);
        Wait(0.05, Ignore Condition);
        Set Player Variable(Event Player, Health_Temp, Normalized Health(Event Player));
        Set Player Health(Event Player, Multiply(Max Health(Event Player), Normalized Health((Event Player).Mod_Effect_Target)));
        Set Player Health((Event Player).Mod_Effect_Target, Multiply(Max Health((Event Player).Mod_Effect_Target), (Event Player).Health_Temp));
        Communicate((Event Player).Mod_Effect_Target, Thanks);
        Wait(0.2, Ignore Condition);
        Communicate(Event Player, You are Welcome);
        Play Effect(All Players(All Teams), Tracer Recall Reappear Sound, Null, (Event Player).Mod_Effect_Target, 200);
        Play Effect(All Players(All Teams), Tracer Recall Reappear Effect, Color(Team 1), Event Player, 1);
        Play Effect(All Players(All Teams), Tracer Recall Reappear Effect, Color(Team 1), (Event Player).Mod_Effect_Target, 1);
        Destroy Effect((Event Player).Active_Mod_FX);
        Set Player Variable(Event Player, Mod_Effect_Target, Null);
        Set Player Variable(Event Player, Cooldown_Chase, Subtract(7, (Event Player).Optimize));
        Set Player Variable(Event Player, Cd_Color, Custom Color(180, 180, 180, 255));
        Set Player Variable(Event Player, Cooldown_String_1, Custom String("Cooldown:", Null, Null, Null));
        Chase Player Variable At Rate(Event Player, Cooldown_Chase, 0, 1, Destination and Rate);
        Wait Until(Or(Compare((Event Player).Cooldown_Chase, ==, 0), Compare((Event Player).Mod_Menu_Select, !=, 3)), 9999);
        If(Compare((Event Player).Mod_Menu_Select, !=, 3));
            Set Player Variable(Event Player, Cd_Visible_To, Array(Null));
        End;
        Stop Chasing Player Variable(Event Player, Cooldown_Chase);
        Wait(0.016, Ignore Condition);
        Set Player Variable(Event Player, Cd_Color, Color(Green));
        Set Player Variable(Event Player, Cooldown_String_1, Custom String("Ready", Null, Null, Null));
        Set Player Variable(Event Player, Cooldown_Chase, Icon String(Checkmark));
    }
}

rule ("Active Mods 39 - Med-E-Port") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        (Event Player).Mod_Menu_Select == 3;
        (Event Player).Active_Mod == 40;
        Global.Intermission_In_Progress == False;
        Or(Is Button Held(Event Player, Button(Melee)), And(Array Contains(Array(Hero(Brigitte), Hero(Reinhardt)), Hero Of(Event Player)), Is Button Held(Event Player, Button(Reload)))) == True;
    }
    actions {
        Set Player Variable(Event Player, Current_Target_A, Random Value In Array(Remove From Array(All Players(Team Of(Event Player)), Array(Null, Event Player))));
        Wait(0.5, Abort When False);
        Wait(0.032, Ignore Condition);
        If(Compare((Event Player).Mod_Menu_Select, !=, 3));
            Set Player Variable(Event Player, Cd_Visible_To, Array(Null));
        End;
        Set Player Variable(Event Player, Cd_Color, Color(Yellow));
        Set Player Variable(Event Player, Cd_Visible_To, Event Player);
        Set Player Variable(Event Player, Cooldown_String_1, Custom String("Active", Null, Null, Null));
        Set Player Variable(Event Player, Cooldown_Chase, Ability Icon String(Hero(Soldier: 76), Button(Ability 1)));
        Wait(0.032, Ignore Condition);
        Play Effect(All Players(All Teams), Hanzo Sonic Arrow Initial Pulse Effect, Color(Team 1), (Event Player).Current_Target_A, 1);
        Play Effect(All Players(All Teams), Tracer Recall Disappear Effect, Color(Team 1), Event Player, 1);
        Play Effect(All Players(All Teams), Sigma Hypersphere Implosion Sound, Color(Team 1), Event Player, 150);
        Wait(0.3, Ignore Condition);
        Teleport(Event Player, Nearest Walkable Position(World Vector Of(Vector(0, 0.5, -3.5), (Event Player).Current_Target_A, Rotation And Translation)));
        Wait(0.2, Ignore Condition);
        Play Effect(All Players(All Teams), Tracer Recall Disappear Effect, Color(Team 1), (Event Player).Current_Target_A, 1);
        Play Effect(All Players(All Teams), Ana Biotic Grenade Explosion Effect, Color(Team 1), Event Player, 1);
        Play Effect(All Players(All Teams), Ana Biotic Grenade Increased Healing Sound, Color(Team 1), Event Player, 100);
        Play Effect(All Players(All Teams), Ring Explosion, Color(Green), Value In Array((Event Player).Active_Affected_Players, (Event Player).Active_Index), 8);
        Play Effect(All Players(All Teams), Heal Target Active Effect, Color(Team 1), Event Player, 1);
        Set Player Variable(Event Player, Active_Affected_Players, Remove From Array(Players Within Radius(Event Player, 12, Team Of(Event Player), Surfaces), Event Player));
        Wait(0.2, Ignore Condition);
        For Player Variable(Event Player, Active_Index, 0, Count Of((Event Player).Active_Affected_Players), 1);
            Heal(Value In Array((Event Player).Active_Affected_Players, (Event Player).Active_Index), Event Player, Multiply(Max Health(Value In Array((Event Player).Active_Affected_Players, (Event Player).Active_Index)), 0.5));
            Play Effect(All Players(All Teams), Good Explosion, Color(Green), Value In Array((Event Player).Active_Affected_Players, (Event Player).Active_Index), 3);
            Play Effect(All Players(All Teams), Ring Explosion, Color(Green), Value In Array((Event Player).Active_Affected_Players, (Event Player).Active_Index), 11);
            Wait(0.032, Ignore Condition);
        End;
        Communicate(Event Player, With You);
        Set Player Variable(Event Player, Cooldown_Chase, Subtract(8, Multiply((Event Player).Optimize, 1.5)));
        Set Player Variable(Event Player, Cd_Color, Custom Color(180, 180, 180, 255));
        Set Player Variable(Event Player, Cooldown_String_1, Custom String("Cooldown:", Null, Null, Null));
        Chase Player Variable At Rate(Event Player, Cooldown_Chase, 0, 1, Destination and Rate);
        Wait Until(Or(Compare((Event Player).Cooldown_Chase, ==, 0), Compare((Event Player).Mod_Menu_Select, !=, 3)), 9999);
        If(Compare((Event Player).Mod_Menu_Select, !=, 3));
            Set Player Variable(Event Player, Cd_Visible_To, Array(Null));
        End;
        Stop Chasing Player Variable(Event Player, Cooldown_Chase);
        Wait(0.016, Ignore Condition);
        Set Player Variable(Event Player, Cd_Color, Color(Green));
        Set Player Variable(Event Player, Cooldown_String_1, Custom String("Ready", Null, Null, Null));
        Set Player Variable(Event Player, Cooldown_Chase, Icon String(Checkmark));
    }
}

rule ("Active Mods 40 - Armor Field") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        (Event Player).Mod_Menu_Select == 3;
        (Event Player).Active_Mod == 41;
        Altitude Of(Event Player) <= 1;
        Or(Is Button Held(Event Player, Button(Melee)), And(Array Contains(Array(Hero(Brigitte), Hero(Reinhardt)), Hero Of(Event Player)), Is Button Held(Event Player, Button(Reload)))) == True;
    }
    actions {
        Wait(0.5, Ignore Condition);
        Set Player Variable(Event Player, Num_1, 1);
        Set Player Variable(Event Player, Player_Position, Eye Position(Event Player));
        Set Player Variable(Event Player, Player_Foot_Position, Position Of(Event Player));
        Set Player Variable(Event Player, Active_Affected_Players, Players Within Radius((Event Player).Player_Position, 4, Team Of(Event Player), Surfaces And Enemy Barriers));
        Create Effect(All Players(All Teams), Ring, Color(Orange), (Event Player).Player_Foot_Position, 3, Position and Radius);
        Set Player Variable At Index(Event Player, Active_Mod_FX_Array, 0, Last Created Entity);
        Create Effect(All Players(All Teams), Sparkles, Color(Yellow), (Event Player).Player_Foot_Position, 4, Position and Radius);
        Set Player Variable At Index(Event Player, Active_Mod_FX_Array, 1, Last Created Entity);
        Create Effect(Value In Array((Event Player).Active_Affected_Players, (Event Player).Active_Index), Good Aura Sound, Null, (Event Player).Player_Position, 125, Position and Radius);
        Set Player Variable At Index(Event Player, Active_Mod_FX_Array, 3, Last Created Entity);
        Wait(0.25, Ignore Condition);
        Wait(0.032, Ignore Condition);
        If(Compare((Event Player).Mod_Menu_Select, !=, 3));
            Set Player Variable(Event Player, Cd_Visible_To, Array(Null));
        End;
        Set Player Variable(Event Player, Cd_Color, Color(Yellow));
        Set Player Variable(Event Player, Cd_Visible_To, Event Player);
        Set Player Variable(Event Player, Cooldown_String_1, Custom String("Active", Null, Null, Null));
        Set Player Variable(Event Player, Cooldown_Chase, Ability Icon String(Hero(Soldier: 76), Button(Ability 1)));
        Wait(0.032, Ignore Condition);
        Chase Player Variable Over Time(Event Player, Active_Time, 5.01, 5, Destination and Duration);
        While(Compare((Event Player).Active_Time, <=, 5));
            Set Player Variable(Event Player, Active_Affected_Players, Players Within Radius((Event Player).Player_Position, 4, Team Of(Event Player), Surfaces And Enemy Barriers));
            For Player Variable(Event Player, Active_Index, 0, Count Of((Event Player).Active_Affected_Players), 1);
                Add Health Pool To Player(Value In Array((Event Player).Active_Affected_Players, (Event Player).Active_Index), Armor, 4.64, False, True);
            End;
            If(Array Contains(Array(0.5, 1, 1.5, 2, 2.5, 3, 3.5, 4, 4.5, 5, 5.5, 6, 6.5, 7, 7.5), (Event Player).Num_1));
                Play Effect(All Players(All Teams), Brigitte Repair Pack Armor Effect, Team Of(Event Player), Add((Event Player).Player_Position, Down), 1);
                Play Effect(All Players(All Teams), Brigitte Repair Pack Armor Sound, Color(Orange), (Event Player).Player_Foot_Position, 50);
                Play Effect(All Players(All Teams), Ring Explosion, Color(Orange), (Event Player).Player_Foot_Position, 5);
            End;
            Modify Player Variable(Event Player, Num_1, Add, 0.25);
            Set Player Variable(Event Player, Active_Affected_Players, 0);
            Wait(0.25, Ignore Condition);
        End;
        Wait Until(Compare((Event Player).Active_Time, >, 5), 99999);
        Stop Chasing Player Variable(Event Player, Active_Time);
        Destroy Effect((Event Player).Active_Mod_FX_Array);
        Set Player Variable(Event Player, Active_Affected_Players, 0);
        Set Player Variable(Event Player, Active_Time, 0);
        Set Player Variable(Event Player, Num_1, 0);
        Set Player Variable(Event Player, Player_Position, 0);
        Set Player Variable(Event Player, Cooldown_Chase, Subtract(10, Multiply((Event Player).Optimize, 2)));
        Set Player Variable(Event Player, Cd_Color, Custom Color(180, 180, 180, 255));
        Set Player Variable(Event Player, Cooldown_String_1, Custom String("Cooldown:", Null, Null, Null));
        Chase Player Variable At Rate(Event Player, Cooldown_Chase, 0, 1, Destination and Rate);
        Wait Until(Or(Compare((Event Player).Cooldown_Chase, ==, 0), Compare((Event Player).Mod_Menu_Select, !=, 3)), 9999);
        If(Compare((Event Player).Mod_Menu_Select, !=, 3));
            Set Player Variable(Event Player, Cd_Visible_To, Array(Null));
        End;
        Stop Chasing Player Variable(Event Player, Cooldown_Chase);
        Wait(0.016, Ignore Condition);
        Set Player Variable(Event Player, Cd_Color, Color(Green));
        Set Player Variable(Event Player, Cooldown_String_1, Custom String("Ready", Null, Null, Null));
        Set Player Variable(Event Player, Cooldown_Chase, Icon String(Checkmark));
    }
}

rule ("Active Mods 41 - Soul Link") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        (Event Player).Mod_Menu_Select == 3;
        (Event Player).Active_Mod == 42;
        (Event Player).CastMelee_Mod_Conditions_Ally != False;
        (Event Player).Active_Mod_Skill_Toggle == 0;
    }
    actions {
        Set Player Variable(Event Player, Active_Mod_Skill_Toggle, 1);
        Wait(0.032, Ignore Condition);
        If(Compare((Event Player).Mod_Menu_Select, !=, 3));
            Set Player Variable(Event Player, Cd_Visible_To, Array(Null));
        End;
        Set Player Variable(Event Player, Cd_Color, Color(Yellow));
        Set Player Variable(Event Player, Cd_Visible_To, Event Player);
        Set Player Variable(Event Player, Cooldown_String_1, Custom String("Active", Null, Null, Null));
        Set Player Variable(Event Player, Cooldown_Chase, Ability Icon String(Hero(Soldier: 76), Button(Ability 1)));
        Wait(0.032, Ignore Condition);
        Add Health Pool To Player(Event Player, Health, 150, True, False);
        Set Player Variable(Event Player, Active_Index, Last Created Health Pool);
        Set Player Variable(Event Player, Mod_Effect_Target, Player Closest To Reticle(Event Player, Team Of(Event Player)));
        Set Player Variable At Index((Event Player).Mod_Effect_Target, Linked, 0, Event Player);
        Set Player Variable At Index((Event Player).Mod_Effect_Target, Linked, 1, True);
        Create Beam Effect(All Players(All Teams), Mercy Heal Beam, Event Player, (Event Player).Mod_Effect_Target, Color(Team 1), Visible To Position and Radius);
        Set Player Variable At Index(Event Player, Active_Mod_FX_Array, 0, Last Created Entity);
        Play Effect(All Players(All Teams), Good Explosion, Color(Green), Event Player, 3);
        Play Effect(All Players(All Teams), Heal Target Active Effect, Color(Team 1), Event Player, 100);
        Play Effect(All Players(All Teams), Good Explosion, Color(Green), (Event Player).Mod_Effect_Target, 3);
        Play Effect(All Players(All Teams), Heal Target Active Effect, Color(Team 1), (Event Player).Mod_Effect_Target, 100);
        While(And(And(And(And(Compare((Event Player).Boolean, ==, False), Value In Array((Event Player).Linked, 1)), Is Alive(Event Player)), Is Alive((Event Player).Mod_Effect_Target)), Compare((Event Player).Mod_Menu_Select, ==, 3)));
            If(Not(Is In Line of Sight(Event Player, (Event Player).Mod_Effect_Target, Barriers Do Not Block LOS)));
                Wait(2.5, Ignore Condition);
                Set Player Variable(Event Player, Boolean, True);
            End;
            Wait(1, Ignore Condition);
        End;
        Set Player Variable(Event Player, Boolean, False);
        Set Player Variable At Index((Event Player).Mod_Effect_Target, Linked, 0, Null);
        Set Player Variable At Index((Event Player).Mod_Effect_Target, Linked, 1, False);
        Destroy Effect(First Of((Event Player).Active_Mod_FX_Array));
        Remove Health Pool From Player((Event Player).Active_Index);
        Set Player Variable(Event Player, Cooldown_Chase, Subtract(7, Multiply((Event Player).Optimize, 0.75)));
        Set Player Variable(Event Player, Cd_Color, Custom Color(180, 180, 180, 255));
        Set Player Variable(Event Player, Cooldown_String_1, Custom String("Cooldown:", Null, Null, Null));
        Chase Player Variable At Rate(Event Player, Cooldown_Chase, 0, 1, Destination and Rate);
        Wait Until(Is Alive(Event Player), 9999);
        Wait Until(Or(Compare((Event Player).Cooldown_Chase, ==, 0), Compare((Event Player).Mod_Menu_Select, !=, 3)), 9999);
        If(Compare((Event Player).Mod_Menu_Select, !=, 3));
            Set Player Variable(Event Player, Cd_Visible_To, Array(Null));
        End;
        Stop Chasing Player Variable(Event Player, Cooldown_Chase);
        Wait(0.016, Ignore Condition);
        Set Player Variable(Event Player, Cd_Color, Color(Green));
        Set Player Variable(Event Player, Cooldown_String_1, Custom String("Ready", Null, Null, Null));
        Set Player Variable(Event Player, Cooldown_Chase, Icon String(Checkmark));
        Set Player Variable(Event Player, Active_Mod_Skill_Toggle, 0);
    }
}

rule ("Active Mods 42 - Pyroblast") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        (Event Player).Mod_Menu_Select == 3;
        (Event Player).Active_Mod == 43;
        Global.Intermission_In_Progress == False;
        Is Button Held(Event Player, Button(Melee)) == True;
    }
    actions {
        Wait(0.032, Ignore Condition);
        If(Compare((Event Player).Mod_Menu_Select, !=, 3));
            Set Player Variable(Event Player, Cd_Visible_To, Array(Null));
        End;
        Set Player Variable(Event Player, Cd_Color, Color(Yellow));
        Set Player Variable(Event Player, Cd_Visible_To, Event Player);
        Set Player Variable(Event Player, Cooldown_String_1, Custom String("Active", Null, Null, Null));
        Set Player Variable(Event Player, Cooldown_Chase, Ability Icon String(Hero(Soldier: 76), Button(Ability 1)));
        Wait(0.032, Ignore Condition);
        Set Player Variable(Event Player, Other_Players, Empty Array);
        Set Player Variable(Event Player, Projectile_Duration, 0);
        "exists"
        Set Player Variable At Index(Event Player, Projectile, 2, True);
        "initial position"
        Set Player Variable At Index(Event Player, Projectile, 0, Eye Position(Event Player));
        "position = initial position"
        Set Player Variable(Event Player, Projectile_Position, First Of((Event Player).Projectile));
        "start time"
        Set Player Variable At Index(Event Player, Projectile, 1, Total Time Elapsed);
        "initial velocity"
        Set Player Variable At Index(Event Player, Projectile, 3, Multiply(7, Facing Direction Of(Event Player)));
        Set Player Variable At Index(Event Player, Projectile, 4, Vector(0, -0.25, 0));
        Create Effect(All Players(All Teams), Orb, Color(Orange), (Event Player).Projectile_Position, (Event Player).Projectile_Duration, Visible To Position and Radius);
        Set Player Variable At Index(Event Player, Active_Mod_FX_Array, 0, Last Created Entity);
        Create Effect(All Players(All Teams), Bad Aura, Color(Red), (Event Player).Projectile_Position, (Event Player).Projectile_Duration, Visible To Position and Radius);
        Set Player Variable At Index(Event Player, Active_Mod_FX_Array, 1, Last Created Entity);
        Create Effect(All Players(All Teams), Good Aura, Color(Red), (Event Player).Projectile_Position, (Event Player).Projectile_Duration, Visible To Position and Radius);
        Set Player Variable At Index(Event Player, Active_Mod_FX_Array, 2, Last Created Entity);
        Chase Player Variable At Rate(Event Player, Projectile_Duration, Add(5, (Event Player).Optimize), 0.5, Destination and Rate);
        Chase Player Variable At Rate(Event Player, Projectile_Position, Add(Add(Multiply(Value In Array((Event Player).Projectile, 3), Subtract(Total Time Elapsed, Value In Array((Event Player).Projectile, 1))), First Of((Event Player).Projectile)), Multiply(Multiply(Multiply(0.5, Value In Array((Event Player).Projectile, 4)), Subtract(Total Time Elapsed, Value In Array((Event Player).Projectile, 1))), Subtract(Total Time Elapsed, Value In Array((Event Player).Projectile, 1)))), 999999, Destination and Rate);
        While(Compare(Ray Cast Hit Position((Event Player).Projectile_Position, Subtract((Event Player).Projectile_Position, Vector(0, 0.5, 0)), All Players(All Teams), Event Player, True), ==, Subtract((Event Player).Projectile_Position, Vector(0, 0.5, 0))));
            Play Effect(All Players(All Teams), Wrecking Ball Minefield Explosion Effect, Color(Team 2), (Event Player).Projectile_Position, 1);
            Play Effect(All Players(All Teams), Sigma Hypersphere Implosion Sound, Color(Team 2), (Event Player).Projectile_Position, 75);
            Set Player Variable(Event Player, Active_Affected_Players, Append To Array((Event Player).Active_Affected_Players, Remove From Array(Players Within Radius((Event Player).Projectile_Position, Add((Event Player).Projectile_Duration, 2), Opposite Team Of(Team Of(Event Player)), Surfaces And Enemy Barriers), (Event Player).Active_Affected_Players)));
            Set Player Variable(Event Player, Active_Affected_Players, Remove From Array((Event Player).Active_Affected_Players, (Event Player).Other_Players));
            Damage((Event Player).Active_Affected_Players, Event Player, Multiply((Event Player).Projectile_Duration, 75));
            For Player Variable(Event Player, Active_Index, 0, Count Of((Event Player).Active_Affected_Players), 1);
                Play Effect(All Players(All Teams), Bad Pickup Effect, Color(Orange), Value In Array((Event Player).Active_Affected_Players, (Event Player).Active_Index), 1);
            End;
            Set Player Variable(Event Player, Other_Players, (Event Player).Active_Affected_Players);
            Wait(0.2, Ignore Condition);
        End;
        Wait Until(Compare(Ray Cast Hit Position((Event Player).Projectile_Position, Subtract((Event Player).Projectile_Position, Vector(0, 0.5, 0)), All Players(All Teams), Event Player, True), !=, Subtract((Event Player).Projectile_Position, Vector(0, 0.5, 0))), 7);
        Stop Chasing Player Variable(Event Player, Projectile_Position);
        Stop Chasing Player Variable(Event Player, Projectile_Duration);
        Set Player Variable At Index(Event Player, Projectile, 2, False);
        Destroy Effect((Event Player).Active_Mod_FX_Array);
        Play Effect(All Players(All Teams), Bad Explosion, Color(Team 2), (Event Player).Projectile_Position, (Event Player).Projectile_Duration);
        Play Effect(All Players(All Teams), Bastion Tank Cannon Explosion Sound, Color(Team 2), (Event Player).Projectile_Position, 1);
        Damage(Players Within Radius((Event Player).Projectile_Position, (Event Player).Projectile_Duration, Opposite Team Of(Team Of(Event Player)), Surfaces And Enemy Barriers), Event Player, Multiply((Event Player).Projectile_Duration, 25));
        Set Player Variable(Event Player, Cooldown_Chase, Subtract(6, (Event Player).Optimize));
        Set Player Variable(Event Player, Cd_Color, Custom Color(180, 180, 180, 255));
        Set Player Variable(Event Player, Cooldown_String_1, Custom String("Cooldown:", Null, Null, Null));
        Chase Player Variable At Rate(Event Player, Cooldown_Chase, 0, 1, Destination and Rate);
        Wait Until(Or(Compare((Event Player).Cooldown_Chase, ==, 0), Compare((Event Player).Mod_Menu_Select, !=, 3)), 9999);
        If(Compare((Event Player).Mod_Menu_Select, !=, 3));
            Set Player Variable(Event Player, Cd_Visible_To, Array(Null));
        End;
        Stop Chasing Player Variable(Event Player, Cooldown_Chase);
        Wait(0.016, Ignore Condition);
        Set Player Variable(Event Player, Cd_Color, Color(Green));
        Set Player Variable(Event Player, Cooldown_String_1, Custom String("Ready", Null, Null, Null));
        Set Player Variable(Event Player, Cooldown_Chase, Icon String(Checkmark));
    }
}

rule ("Active Mods 43 - Meteor Shower") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        (Event Player).Mod_Menu_Select == 3;
        (Event Player).Active_Mod == 44;
        Global.Intermission_In_Progress == False;
        (Event Player).Boolean == False;
        Is Button Held(Event Player, Button(Melee)) == True;
    }
    actions {
        Disallow Button(Event Player, Button(Interact));
        Set Player Variable(Event Player, Target_Position, Ray Cast Hit Position(Eye Position(Event Player), Add(Eye Position(Event Player), Multiply(Facing Direction Of(Event Player), 50)), All Players(Opposite Team Of(Team Of(Event Player))), Null, False));
        If(Compare(Ray Cast Hit Position((Event Player).Target_Position, Add((Event Player).Target_Position, Vector(0, 200, 0)), Null, Null, False), ==, Add((Event Player).Target_Position, Vector(0, 200, 0))));
            Set Player Variable(Event Player, Boolean, True);
            Wait(0.032, Ignore Condition);
            If(Compare((Event Player).Mod_Menu_Select, !=, 3));
                Set Player Variable(Event Player, Cd_Visible_To, Array(Null));
            End;
            Set Player Variable(Event Player, Cd_Color, Color(Yellow));
            Set Player Variable(Event Player, Cd_Visible_To, Event Player);
            Set Player Variable(Event Player, Cooldown_String_1, Custom String("Active", Null, Null, Null));
            Set Player Variable(Event Player, Cooldown_Chase, Ability Icon String(Hero(Soldier: 76), Button(Ability 1)));
            Wait(0.032, Ignore Condition);
            Play Effect(All Players(All Teams), Ring Explosion, Color(Red), (Event Player).Target_Position, 16);
            Wait(0.5, Ignore Condition);
            Create Effect(All Players(All Teams), Ring, Color(Red), (Event Player).Target_Position, 15, Visible To Position and Radius);
            Set Player Variable At Index(Event Player, Active_Mod_FX_Array, 0, Last Created Entity);
            Play Effect(All Players(All Teams), Ring Explosion Sound, Null, (Event Player).Target_Position, 200);
        Else;
            Allow Button(Event Player, Button(Interact));
            Abort;
        End;
        Wait(1.5, Ignore Condition);
        For Player Variable(Event Player, Active_Index, 0, 5, 1);
            Set Player Variable At Index(Event Player, Target_Area_A, 0, Nearest Walkable Position(Add((Event Player).Target_Position, Vector(Random Integer(-10, 10), 0, Random Integer(-10, 10)))));
            If(Compare(Ray Cast Hit Position(First Of((Event Player).Target_Area_A), Add(First Of((Event Player).Target_Area_A), Vector(0, 200, 0)), Null, Null, False), ==, Add(First Of((Event Player).Target_Area_A), Vector(0, 200, 0))));
                Play Effect(All Players(All Teams), Ring Explosion, Color(Red), First Of((Event Player).Target_Area_A), 6);
                Wait(0.2, Ignore Condition);
                Create Effect(All Players(All Teams), Ring, Color(Red), First Of((Event Player).Target_Area_A), 4, Visible To Position and Radius);
                Set Player Variable At Index(Event Player, Active_Mod_FX_Array, Add((Event Player).Active_Index, 1), Last Created Entity);
                Set Player Variable At Index(Event Player, Active_Affected_Players, 0, Players Within Radius(First Of((Event Player).Target_Area_A), 5, Opposite Team Of(Team Of(Event Player)), Surfaces And Enemy Barriers));
                For Player Variable(Event Player, Active_Index_1, Random Integer(20, 40), 0, -2);
                    Play Effect(All Players(All Teams), Bad Pickup Effect, Color(Orange), Add(First Of((Event Player).Target_Area_A), Vector(0, (Event Player).Active_Index_1, 0)), 5);
                    Play Effect(All Players(All Teams), Wrecking Ball Piledriver Impact Effect, Null, Add(First Of((Event Player).Target_Area_A), Vector(0, (Event Player).Active_Index_1, 0)), 1);
                    Wait(0.075, Ignore Condition);
                End;
                Play Effect(All Players(All Teams), Ashe Dynamite Explosion Effect, Color(Team 2), First Of((Event Player).Target_Area_A), 1);
                Play Effect(All Players(All Teams), Ashe Dynamite Explosion Sound, Color(Team 2), First Of((Event Player).Target_Area_A), 150);
                Play Effect(All Players(All Teams), Bastion Tank Cannon Explosion Effect, Color(Team 2), First Of((Event Player).Target_Area_A), 1);
                Play Effect(All Players(All Teams), Bastion Tank Cannon Explosion Sound, Color(Team 2), First Of((Event Player).Target_Area_A), 150);
                Play Effect(All Players(All Teams), Bad Explosion, Color(Red), First Of((Event Player).Target_Area_A), 5);
                Play Effect(All Players(All Teams), Ring Explosion, Color(Red), First Of((Event Player).Target_Area_A), 6);
                Play Effect(All Players(All Teams), Sigma Accretion Impact Effect, Color(Team 2), First Of((Event Player).Target_Area_A), 1);
                Damage(First Of((Event Player).Active_Affected_Players), Event Player, 150);
                For Player Variable(Event Player, Active_Index_2, 0, Count Of(First Of((Event Player).Active_Affected_Players)), 1);
                    Start Damage Over Time(Value In Array(First Of((Event Player).Active_Affected_Players), (Event Player).Active_Index_2), Event Player, 5, Random Integer(8, 10));
                    Set Status(Value In Array(First Of((Event Player).Active_Affected_Players), (Event Player).Active_Index_2), Event Player, Burning, 5);
                    Wait(0.016, Ignore Condition);
                End;
                Wait(Random Integer(0.8, 1.25), Ignore Condition);
            Else;
                Wait(0.016, Ignore Condition);
            End;
        End;
        Wait Until(Compare((Event Player).Boolean, ==, False), 99999);
        Destroy Effect((Event Player).Active_Mod_FX_Array);
        Set Player Variable(Event Player, Active_Mod_FX_Array, Empty Array);
        Set Player Variable(Event Player, Cooldown_Chase, Subtract(15, Multiply((Event Player).Optimize, 1.5)));
        Set Player Variable(Event Player, Cd_Color, Custom Color(180, 180, 180, 255));
        Set Player Variable(Event Player, Cooldown_String_1, Custom String("Cooldown:", Null, Null, Null));
        Chase Player Variable At Rate(Event Player, Cooldown_Chase, 0, 1, Destination and Rate);
        Wait Until(Or(Compare((Event Player).Cooldown_Chase, ==, 0), Compare((Event Player).Mod_Menu_Select, !=, 3)), 9999);
        If(Compare((Event Player).Mod_Menu_Select, !=, 3));
            Set Player Variable(Event Player, Cd_Visible_To, Array(Null));
        End;
        Stop Chasing Player Variable(Event Player, Cooldown_Chase);
        Wait(0.016, Ignore Condition);
        Set Player Variable(Event Player, Cd_Color, Color(Green));
        Set Player Variable(Event Player, Cooldown_String_1, Custom String("Ready", Null, Null, Null));
        Set Player Variable(Event Player, Cooldown_Chase, Icon String(Checkmark));
    }
}

rule ("Active Mods 43 - Meteor Shower (Concurrent)") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        (Event Player).Mod_Menu_Select == 3;
        (Event Player).Active_Mod == 44;
        Global.Intermission_In_Progress == False;
        (Event Player).Boolean != False;
    }
    actions {
        For Player Variable(Event Player, Active_Index_3, 0, 5, 1);
            Set Player Variable At Index(Event Player, Target_Area_A, 1, Nearest Walkable Position(Add((Event Player).Target_Position, Vector(Random Integer(-10, 10), 0, Random Integer(-10, 10)))));
            If(Compare(Ray Cast Hit Position(Value In Array((Event Player).Target_Area_A, 1), Add(Value In Array((Event Player).Target_Area_A, 1), Vector(0, 200, 0)), Null, Null, False), ==, Add(Value In Array((Event Player).Target_Area_A, 1), Vector(0, 200, 0))));
                Play Effect(All Players(All Teams), Ring Explosion, Color(Red), Value In Array((Event Player).Target_Area_A, 1), 6);
                Wait(0.2, Ignore Condition);
                Create Effect(All Players(All Teams), Ring, Color(Red), Value In Array((Event Player).Target_Area_A, 1), 4, Visible To Position and Radius);
                Set Player Variable At Index(Event Player, Active_Mod_FX_Array, Add((Event Player).Active_Index_3, 9), Last Created Entity);
                Set Player Variable At Index(Event Player, Active_Affected_Players, 1, Players Within Radius(Value In Array((Event Player).Target_Area_A, 1), 5, Opposite Team Of(Team Of(Event Player)), Surfaces And Enemy Barriers));
                For Player Variable(Event Player, Active_Index_4, Random Integer(20, 40), 0, -2);
                    Play Effect(All Players(All Teams), Bad Pickup Effect, Color(Orange), Add(Value In Array((Event Player).Target_Area_A, 1), Vector(0, (Event Player).Active_Index_4, 0)), 5);
                    Play Effect(All Players(All Teams), Wrecking Ball Piledriver Impact Effect, Null, Add(Value In Array((Event Player).Target_Area_A, 1), Vector(0, (Event Player).Active_Index_4, 0)), 1);
                    Wait(0.075, Ignore Condition);
                End;
                Play Effect(All Players(All Teams), Ashe Dynamite Explosion Effect, Color(Team 2), Value In Array((Event Player).Target_Area_A, 1), 1);
                Play Effect(All Players(All Teams), Ashe Dynamite Explosion Sound, Color(Team 2), Value In Array((Event Player).Target_Area_A, 1), 150);
                Play Effect(All Players(All Teams), Bastion Tank Cannon Explosion Effect, Color(Team 2), Value In Array((Event Player).Target_Area_A, 1), 1);
                Play Effect(All Players(All Teams), Bastion Tank Cannon Explosion Sound, Color(Team 2), Value In Array((Event Player).Target_Area_A, 1), 150);
                Play Effect(All Players(All Teams), Bad Explosion, Color(Red), Value In Array((Event Player).Target_Area_A, 1), 5);
                Play Effect(All Players(All Teams), Ring Explosion, Color(Red), Value In Array((Event Player).Target_Area_A, 1), 6);
                Play Effect(All Players(All Teams), Sigma Accretion Impact Effect, Color(Team 2), First Of((Event Player).Target_Area_A), 1);
                Damage(Value In Array((Event Player).Active_Affected_Players, 1), Event Player, Random Integer(75, 125));
                For Player Variable(Event Player, Active_Index_5, 0, Count Of(Value In Array((Event Player).Active_Affected_Players, 1)), 1);
                    Start Damage Over Time(Value In Array(Value In Array((Event Player).Active_Affected_Players, 1), (Event Player).Active_Index_5), Event Player, 5, Random Integer(10, 15));
                    Set Status(Value In Array(Value In Array((Event Player).Active_Affected_Players, 1), (Event Player).Active_Index_5), Event Player, Burning, 5);
                End;
                Wait(Random Integer(0.4, 1.5), Ignore Condition);
            Else;
                Wait(0.016, Ignore Condition);
            End;
        End;
        Set Player Variable(Event Player, Boolean, False);
        Destroy Effect((Event Player).Active_Mod_FX_Array);
    }
}

rule ("Active Mods 44 - Electrical Storm") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        (Event Player).Mod_Menu_Select == 3;
        (Event Player).Active_Mod == 45;
        Global.Intermission_In_Progress == False;
        Is Button Held(Event Player, Button(Melee)) == True;
        Ultimate Charge Percent(Event Player) >= 50;
        Number Of Players(Opposite Team Of(Team Of(Event Player))) > 0;
    }
    actions {
        Set Player Variable(Event Player, Other_Players, All Players(Opposite Team Of(Team Of(Event Player))));
        For Player Variable(Event Player, Active_Index, 0, Count Of((Event Player).Other_Players), 1);
            If(Is In Line of Sight(Eye Position(Event Player), Eye Position(Value In Array((Event Player).Other_Players, (Event Player).Active_Index)), Barriers Do Not Block LOS));
                Modify Player Variable(Event Player, Active_Affected_Players, Append To Array, Value In Array((Event Player).Other_Players, (Event Player).Active_Index));
                Create Beam Effect(All Players(All Teams), Winston Tesla Cannon Beam, Eye Position(Event Player), Value In Array((Event Player).Active_Affected_Players, (Event Player).Active_Index), Color(Team 1), Visible To Position and Radius);
                Set Player Variable At Index(Event Player, Active_Mod_FX_Array, (Event Player).Active_Index, Last Created Entity);
                Play Effect(All Players(All Teams), Zarya Particle Cannon Explosion Sound, Null, Eye Position(Value In Array((Event Player).Active_Affected_Players, (Event Player).Active_Index)), 100);
                Play Effect(All Players(All Teams), Zarya Particle Cannon Explosion Effect, Color(Team 1), Eye Position(Value In Array((Event Player).Active_Affected_Players, (Event Player).Active_Index)), 1);
                Damage(Value In Array((Event Player).Active_Affected_Players, (Event Player).Active_Index), Event Player, 100);
                Wait(1, Ignore Condition);
            End;
        End;
        Destroy Effect((Event Player).Active_Mod_FX_Array);
        If(Compare(Count Of((Event Player).Active_Affected_Players), >, 0));
            Set Ultimate Charge(Event Player, If-Then-Else(Compare((Event Player).Optimize, >, 0), Subtract(Ultimate Charge Percent(Event Player), 25), -50));
            Destroy Effect((Event Player).Active_Mod_FX_Array);
            Set Player Variable(Event Player, Cooldown_Chase, Subtract(15, Multiply((Event Player).Optimize, 2)));
            Set Player Variable(Event Player, Cd_Color, Custom Color(180, 180, 180, 255));
            Set Player Variable(Event Player, Cooldown_String_1, Custom String("Cooldown:", Null, Null, Null));
            Chase Player Variable At Rate(Event Player, Cooldown_Chase, 0, 1, Destination and Rate);
            Wait Until(Or(Compare((Event Player).Cooldown_Chase, ==, 0), Compare((Event Player).Mod_Menu_Select, !=, 3)), 9999);
            If(Compare((Event Player).Mod_Menu_Select, !=, 3));
                Set Player Variable(Event Player, Cd_Visible_To, Array(Null));
            End;
            Stop Chasing Player Variable(Event Player, Cooldown_Chase);
            Wait(0.016, Ignore Condition);
            Set Player Variable(Event Player, Cd_Color, Color(Green));
            Set Player Variable(Event Player, Cooldown_String_1, Custom String("Ready", Null, Null, Null));
            Set Player Variable(Event Player, Cooldown_Chase, Icon String(Checkmark));
    }
}

rule ("Active Mods 45 - Shockwave") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        (Event Player).Mod_Menu_Select == 3;
        (Event Player).Active_Mod == 46;
        Global.Intermission_In_Progress == False;
        Is Button Held(Event Player, Button(Melee)) == True;
    }
    actions {
        "\"Shockwave: Melee to send out a shockwave that knocks enemies into the air, damages, and stuns them (12 sec. CD)\""
        Wait(0.032, Ignore Condition);
        If(Compare((Event Player).Mod_Menu_Select, !=, 3));
            Set Player Variable(Event Player, Cd_Visible_To, Array(Null));
        End;
        Set Player Variable(Event Player, Cd_Color, Color(Yellow));
        Set Player Variable(Event Player, Cd_Visible_To, Event Player);
        Set Player Variable(Event Player, Cooldown_String_1, Custom String("Active", Null, Null, Null));
        Set Player Variable(Event Player, Cooldown_Chase, Ability Icon String(Hero(Soldier: 76), Button(Ability 1)));
        Wait(0.032, Ignore Condition);
        Set Player Variable(Event Player, Radius, 0);
        Set Player Variable(Event Player, Other_Players, Empty Array);
        Chase Player Variable At Rate(Event Player, Radius, 20, 10, Destination and Rate);
        Create Effect(All Players(All Teams), Ring, Color(Sky Blue), Eye Position(Event Player), (Event Player).Radius, Visible To Position and Radius);
        Set Player Variable At Index(Event Player, Active_Mod_FX_Array, 0, Last Created Entity);
        While(Compare((Event Player).Radius, <, 20));
            Play Effect(All Players(All Teams), Hanzo Sonic Arrow Initial Pulse Effect, Color(Team 1), Event Player, 1);
            Play Effect(All Players(All Teams), Hanzo Sonic Arrow Initial Pulse Sound, Color(Team 1), Position Of(Event Player), 200);
            Set Player Variable(Event Player, Active_Affected_Players, Players Within Radius(Position Of(Event Player), (Event Player).Radius, Opposite Team Of(Team Of(Event Player)), Surfaces));
            For Player Variable(Event Player, Active_Index, 0, Count Of((Event Player).Active_Affected_Players), 1);
                If(Not(Array Contains((Event Player).Other_Players, Value In Array((Event Player).Active_Affected_Players, (Event Player).Active_Index))));
                    Play Effect(All Players(All Teams), Bad Explosion, Color(Sky Blue), Value In Array((Event Player).Active_Affected_Players, (Event Player).Active_Index), 2);
                    Play Effect(All Players(All Teams), Echo Sticky Bomb Explosion Sound, Null, Value In Array((Event Player).Active_Affected_Players, (Event Player).Active_Index), 200);
                    Play Effect(All Players(All Teams), Bad Pickup Effect, Color(Sky Blue), Value In Array((Event Player).Active_Affected_Players, (Event Player).Active_Index), 1);
                    Damage(Value In Array((Event Player).Active_Affected_Players, (Event Player).Active_Index), Event Player, Multiply(2000, (Event Player).Radius));
                    Apply Impulse(Value In Array((Event Player).Active_Affected_Players, (Event Player).Active_Index), Vector(0, 1, 0), Subtract(15, Multiply(0.5, (Event Player).Radius)), To World, Cancel Contrary Motion);
                    Set Status(Value In Array((Event Player).Active_Affected_Players, (Event Player).Active_Index), Event Player, Knocked Down, Subtract(2.5, Divide(0.075, (Event Player).Radius)));
                    Set Player Variable(Event Player, Other_Players, Append To Array((Event Player).Other_Players, Value In Array((Event Player).Active_Affected_Players, (Event Player).Active_Index)));
                End;
                Wait(0.01, Ignore Condition);
            End;
            Wait(0.5, Ignore Condition);
        End;
        Stop Chasing Player Variable(Event Player, Radius);
        Set Player Variable(Event Player, Radius, 0);
        Destroy Effect((Event Player).Active_Mod_FX_Array);
        Set Player Variable(Event Player, Active_Affected_Players, Empty Array);
        Set Player Variable(Event Player, Active_Index_1, Empty Array);
        Set Player Variable(Event Player, Cooldown_Chase, Subtract(12, Multiply((Event Player).Optimize, 2)));
        Set Player Variable(Event Player, Cd_Color, Custom Color(180, 180, 180, 255));
        Set Player Variable(Event Player, Cooldown_String_1, Custom String("Cooldown:", Null, Null, Null));
        Chase Player Variable At Rate(Event Player, Cooldown_Chase, 0, 1, Destination and Rate);
        Wait Until(Or(Compare((Event Player).Cooldown_Chase, ==, 0), Compare((Event Player).Mod_Menu_Select, !=, 3)), 9999);
        If(Compare((Event Player).Mod_Menu_Select, !=, 3));
            Set Player Variable(Event Player, Cd_Visible_To, Array(Null));
        End;
        Stop Chasing Player Variable(Event Player, Cooldown_Chase);
        Wait(0.016, Ignore Condition);
        Set Player Variable(Event Player, Cd_Color, Color(Green));
        Set Player Variable(Event Player, Cooldown_String_1, Custom String("Ready", Null, Null, Null));
        Set Player Variable(Event Player, Cooldown_Chase, Icon String(Checkmark));
    }
}

rule ("Active Mods 46 - Trap Gun") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        (Event Player).Mod_Menu_Select == 3;
        (Event Player).Active_Mod == 47;
        Global.Intermission_In_Progress == False;
        Is Button Held(Event Player, Button(Melee)) == True;
    }
    actions {
        Wait(0.032, Ignore Condition);
        If(Compare((Event Player).Mod_Menu_Select, !=, 3));
            Set Player Variable(Event Player, Cd_Visible_To, Array(Null));
        End;
        Set Player Variable(Event Player, Cd_Color, Color(Yellow));
        Set Player Variable(Event Player, Cd_Visible_To, Event Player);
        Set Player Variable(Event Player, Cooldown_String_1, Custom String("Active", Null, Null, Null));
        Set Player Variable(Event Player, Cooldown_Chase, Ability Icon String(Hero(Soldier: 76), Button(Ability 1)));
        Wait(0.032, Ignore Condition);
        "exists"
        Set Player Variable At Index(Event Player, Projectile, 2, True);
        "initial position"
        Set Player Variable At Index(Event Player, Projectile, 0, Eye Position(Event Player));
        "position = initial position"
        Set Player Variable(Event Player, Projectile_Position, First Of((Event Player).Projectile));
        "start time"
        Set Player Variable At Index(Event Player, Projectile, 1, Total Time Elapsed);
        "initial velocity"
        Set Player Variable At Index(Event Player, Projectile, 3, Multiply(12, Facing Direction Of(Event Player)));
        Set Player Variable At Index(Event Player, Projectile, 4, Vector(0, -9.8, 0));
        Create Beam Effect(All Players(All Teams), Junkrat Trap Chain Beam, Event Player, (Event Player).Projectile_Position, Color(Team 1), Visible To Position and Radius);
        Set Player Variable At Index(Event Player, Active_Mod_FX_Array, 0, Last Created Entity);
        Create Effect(All Players(All Teams), Good Aura, Color(Yellow), (Event Player).Projectile_Position, 0.5, Visible To Position and Radius);
        Set Player Variable At Index(Event Player, Active_Mod_FX_Array, 1, Last Created Entity);
        Create Effect(All Players(All Teams), Ring, Color(Yellow), (Event Player).Projectile_Position, 1, Visible To Position and Radius);
        Set Player Variable At Index(Event Player, Active_Mod_FX_Array, 2, Last Created Entity);
        Create Effect(All Players(All Teams), Sphere, Color(Yellow), (Event Player).Projectile_Position, 0.5, Visible To Position and Radius);
        Set Player Variable At Index(Event Player, Active_Mod_FX_Array, 3, Last Created Entity);
        Chase Player Variable At Rate(Event Player, Projectile_Position, Add(Add(Multiply(Value In Array((Event Player).Projectile, 3), Subtract(Total Time Elapsed, Value In Array((Event Player).Projectile, 1))), First Of((Event Player).Projectile)), Multiply(Multiply(Multiply(0.5, Value In Array((Event Player).Projectile, 4)), Subtract(Total Time Elapsed, Value In Array((Event Player).Projectile, 1))), Subtract(Total Time Elapsed, Value In Array((Event Player).Projectile, 1)))), 999999, Destination and Rate);
        Wait Until(Compare(Ray Cast Hit Position((Event Player).Projectile_Position, Subtract((Event Player).Projectile_Position, Vector(0, 0.25, 0)), All Players(All Teams), Event Player, True), !=, Subtract((Event Player).Projectile_Position, Vector(0, 0.25, 0))), 15);
        Stop Chasing Player Variable(Event Player, Projectile_Position);
        Set Player Variable At Index(Event Player, Projectile, 2, False);
        Destroy Effect(First Of((Event Player).Active_Mod_FX_Array));
        Destroy Effect(Value In Array((Event Player).Active_Mod_FX_Array, 3));
        Set Player Variable(Event Player, Active_Affected_Players, Players Within Radius((Event Player).Projectile_Position, 2, Opposite Team Of(Team Of(Event Player)), Surfaces));
        Set Player Variable(Event Player, Active_Affected_Players, Sorted Array((Event Player).Active_Affected_Players, Distance Between(Value In Array((Event Player).Active_Affected_Players, Current Array Element), (Event Player).Projectile_Position)));
        Wait(0.016, Ignore Condition);
        If(Compare(Count Of((Event Player).Active_Affected_Players), >, 0));
            Play Effect(All Players(All Teams), Junkrat Concussion Mine Explosion Effect, Color(Team 1), (Event Player).Projectile_Position, 1);
            Play Effect(All Players(All Teams), Junkrat Concussion Mine Explosion Sound, Color(Team 1), (Event Player).Projectile_Position, 100);
            Set Status(First Of((Event Player).Active_Affected_Players), Event Player, Rooted, If-Then-Else(Compare((Event Player).Optimize, >, 0), 4.5, 3.5));
            Create Beam Effect(All Players(All Teams), Junkrat Trap Chain Beam, (Event Player).Projectile_Position, First Of((Event Player).Active_Affected_Players), Color(Team 1), Visible To Position and Radius);
            Set Player Variable At Index(Event Player, Active_Mod_FX_Array, 0, Last Created Entity);
            Damage(First Of((Event Player).Active_Affected_Players), Event Player, If-Then-Else(Compare((Event Player).Optimize, >, 0), 150, 100));
            Wait(3.5, Ignore Condition);
        End;
        Destroy Effect((Event Player).Active_Mod_FX_Array);
        Set Player Variable(Event Player, Cooldown_Chase, Subtract(10, (Event Player).Optimize));
        Set Player Variable(Event Player, Cd_Color, Custom Color(180, 180, 180, 255));
        Set Player Variable(Event Player, Cooldown_String_1, Custom String("Cooldown:", Null, Null, Null));
        Chase Player Variable At Rate(Event Player, Cooldown_Chase, 0, 1, Destination and Rate);
        Wait Until(Or(Compare((Event Player).Cooldown_Chase, ==, 0), Compare((Event Player).Mod_Menu_Select, !=, 3)), 9999);
        If(Compare((Event Player).Mod_Menu_Select, !=, 3));
            Set Player Variable(Event Player, Cd_Visible_To, Array(Null));
        End;
        Stop Chasing Player Variable(Event Player, Cooldown_Chase);
        Wait(0.016, Ignore Condition);
        Set Player Variable(Event Player, Cd_Color, Color(Green));
        Set Player Variable(Event Player, Cooldown_String_1, Custom String("Ready", Null, Null, Null));
        Set Player Variable(Event Player, Cooldown_Chase, Icon String(Checkmark));
    }
}

rule ("Workshop settings") {
    event {
        Ongoing - Global;
    }
    actions {
        Set Global Variable At Index(Debug, 0, Workshop Setting Toggle(Custom String("Host Debug options", Null, Null, Null), Custom String("Server load + Variables", Null, Null, Null), False, 0));
        Set Global Variable At Index(Debug, 1, Workshop Setting Toggle(Custom String("Host Debug options", Null, Null, Null), Custom String("Spawn bots", Null, Null, Null), False, 1));
        Set Global Variable At Index(Debug, 2, Workshop Setting Toggle(Custom String("Host Debug options", Null, Null, Null), Custom String("Damage enemy", Null, Null, Null), False, 2));
        Set Global Variable At Index(Debug, 3, Workshop Setting Toggle(Custom String("Host Debug options", Null, Null, Null), Custom String("Damage self", Null, Null, Null), False, 3));
        Set Global Variable At Index(Debug, 4, Workshop Setting Toggle(Custom String("Host Debug options", Null, Null, Null), Custom String("Spawn more bots", Null, Null, Null), False, 4));
        Set Global Variable At Index(Debug, 5, Workshop Setting Toggle(Custom String("Host Debug options", Null, Null, Null), Custom String("Show Damage", Null, Null, Null), False, 5));
    }
}

rule ("Spawnpoints") {
    event {
        Ongoing - Global;
    }
    conditions {
        Is Assembling Heroes == True;
    }
    actions {
        Set Match Time(15);
        If(Compare(Current Map, ==, Map(Black Forest)));
            Set Global Variable(Team_1_Spawns, Vector(15, 12, -20));
            Set Global Variable(Team_2_Spawns, Vector(15, 12, 30));
        Else If(Compare(Current Map, ==, Map(Blizzard World)));
            Set Global Variable(Team_1_Spawns, Vector(-70, 1, 125));
            Set Global Variable(Team_2_Spawns, Vector(-40, 1, 75));
        Else If(Compare(Current Map, ==, Map(Château Guillard)));
            Set Global Variable(Team_1_Spawns, Vector(195, 8, 100));
            Set Global Variable(Team_2_Spawns, Vector(210, 8, 50));
        Else If(Compare(Current Map, ==, Map(Dorado)));
            Set Global Variable(Team_1_Spawns, Vector(130, 12, 25));
            Set Global Variable(Team_2_Spawns, Vector(85, 8, 0));
        Else If(Compare(Current Map, ==, Map(Eichenwalde)));
            Set Global Variable(Team_1_Spawns, Vector(80, 13, -100));
            Set Global Variable(Team_2_Spawns, Vector(45, 7, -70));
        Else If(Compare(Current Map, ==, Map(Ecopoint: Antarctica)));
            Set Global Variable(Team_1_Spawns, Vector(6, 8, -35));
            Set Global Variable(Team_2_Spawns, Vector(6, 8, 35));
        Else If(Compare(Current Map, ==, Map(Hanamura)));
            Set Global Variable(Team_1_Spawns, Vector(14, 0, 0));
            Set Global Variable(Team_2_Spawns, Vector(10, 0, -85));
        Else If(Compare(Current Map, ==, Map(Hollywood)));
            Set Global Variable(Team_1_Spawns, Vector(-3, 2, -14));
            Set Global Variable(Team_2_Spawns, Vector(0, 2, -78));
        Else If(Compare(Current Map, ==, Map(Kanezaka)));
            Set Global Variable(Team_1_Spawns, Vector(-30, 6, 30));
            Set Global Variable(Team_2_Spawns, Vector(-30, 10, -45));
        Else If(Compare(Current Map, ==, Map(King's Row)));
            Set Global Variable(Team_1_Spawns, Vector(-90, 1, -10));
            Set Global Variable(Team_2_Spawns, Vector(-44, 0, -32));
        Else If(Compare(Current Map, ==, Map(Petra)));
            Set Global Variable(Team_1_Spawns, Vector(5, -14, 45));
            Set Global Variable(Team_2_Spawns, Vector(-30, -8, -10));
    }
}

rule ("Game time reset") {
    event {
        Ongoing - Global;
    }
    conditions {
        Match Time < 840;
        Is Assembling Heroes == False;
        Is In Setup == False;
    }
    actions {
        Set Match Time(900);
    }
}

rule ("Begin Match... and start a time-out every 3 minutes.") {
    event {
        Ongoing - Global;
    }
    conditions {
        Is Game In Progress == True;
    }
    actions {
        If(Global.Start_Intermission);
            "200"
            Wait(0.5, Ignore Condition);
            Set Global Variable(Start_Intermission, 0);
        Else;
            Wait(200, Ignore Condition);
            Set Global Variable(Time_To_Intermission, 10);
            Wait(0.016, Ignore Condition);
            Chase Global Variable Over Time(Time_To_Intermission, 0, 10, Destination and Duration);
            Create Progress Bar HUD Text(All Players(All Teams), Multiply(Round To Integer(Global.Time_To_Intermission, Down), 10), Custom String("Intermission in {0}...", Round To Integer(Global.Time_To_Intermission, Down), Null, Null), Top, 3, Color(White), Color(White), Visible To and Values, Default Visibility);
            Set Global Variable At Index(Intermission_Array, 5, Last Text ID);
            Wait(0.032, Ignore Condition);
            Wait Until(Compare(Global.Time_To_Intermission, ==, 0), 10);
            Wait(0.016, Ignore Condition);
            Stop Chasing Global Variable(Time_To_Intermission);
            Destroy Progress Bar HUD Text(Value In Array(Global.Intermission_Array, 5));
            Set Global Variable At Index(Intermission_Array, 5, Null);
            Wait(0.032, Ignore Condition);
        End;
        Set Global Variable(Intermission_In_Progress, True);
        Pause Match Time;
        Heal(All Players(All Teams), Null, 1000);
        Big Message(All Players(All Teams), Custom String("{0}", First Of(Global.Intermission_Array), Null, Null));
        For Global Variable(Global_Index, 0, Number Of Players(All Teams), 1);
            Set Status(Value In Array(All Players(All Teams), Global.Global_Index), Null, Rooted, Value In Array(Global.Intermission_Array, 2));
            Set Status(Value In Array(All Players(All Teams), Global.Global_Index), Null, Phased Out, Value In Array(Global.Intermission_Array, 2));
            Wait(0.016, Ignore Condition);
        End;
        For Global Variable(Global_Index, 0, Number Of Players(Team 1), 1);
            Teleport(Value In Array(All Players(Team 1), Global.Global_Index), Nearest Walkable Position(Add(Global.Team_1_Spawns, Vector(Random Real(-4, 4), 0, Random Real(-5, 5)))));
            Wait(0.05, Ignore Condition);
        End;
        For Global Variable(Global_Index, 0, Number Of Players(Team 2), 1);
            Teleport(Value In Array(All Players(Team 2), Global.Global_Index), Nearest Walkable Position(Add(Global.Team_2_Spawns, Vector(Random Real(-4, 4), 0, Random Real(-5, 5)))));
            Wait(0.05, Ignore Condition);
        End;
        For Global Variable(Global_Index, 0, Number Of Players(All Teams), 1);
            Start Holding Button(Value In Array(All Players(All Teams), Global.Global_Index), Button(Reload));
            Start Holding Button(Value In Array(All Players(All Teams), Global.Global_Index), Button(Interact));
            Wait(0.8, Ignore Condition);
            Stop Holding Button(Value In Array(All Players(All Teams), Global.Global_Index), Button(Reload));
            Stop Holding Button(Value In Array(All Players(All Teams), Global.Global_Index), Button(Interact));
            Wait(0.016, Ignore Condition);
        End;
        Play Effect(All Players(All Teams), Orisa Halt Implosion Sound, Null, Global.Team_1_Spawns, 200);
        Play Effect(All Players(All Teams), Orisa Halt Implosion Sound, Null, Global.Team_2_Spawns, 200);
        Wait(0.5, Ignore Condition);
        "countdown until can move again"
        Set Global Variable(Intermission_Duration, Value In Array(Global.Intermission_Array, 2));
        Chase Global Variable Over Time(Intermission_Duration, 0, Value In Array(Global.Intermission_Array, 2), Destination and Duration);
        Create HUD Text(All Players(All Teams), Null, Null, Custom String(" {0} in {1} seconds.", Value In Array(Global.Intermission_Array, 4), Round To Integer(Global.Intermission_Duration, Down), Null), Top, 3, Null, Null, Color(White), Visible To and String, Default Visibility);
        Set Global Variable At Index(Intermission_Array, 5, Last Text ID);
        Wait(0.02, Ignore Condition);
        Play Effect(All Players(All Teams), Good Explosion, Color(Sky Blue), Global.Team_1_Spawns, 30);
        Play Effect(All Players(All Teams), Good Explosion, Color(Orange), Global.Team_2_Spawns, 30);
        "this is the wait"
        For Global Variable(Global_Index, 0, Value In Array(Global.Intermission_Array, 3), 1);
            Play Effect(All Players(All Teams), Baptiste Biotic Launcher Explosion Sound, Color(Team 1), Global.Team_1_Spawns, 14);
            Play Effect(All Players(All Teams), Baptiste Biotic Launcher Explosion Sound, Color(Team 2), Global.Team_2_Spawns, 14);
            If(Compare(Global.Global_Index, ==, Subtract(Value In Array(Global.Intermission_Array, 2), 4)));
                Wait(0.032, Ignore Condition);
                Stop Chasing Global Variable(Intermission_Duration);
                Destroy HUD Text(Value In Array(Global.Intermission_Array, 5));
            End;
            Wait(1, Ignore Condition);
        End;
        Stop Chasing Global Variable(Intermission_Duration);
        Destroy HUD Text(Value In Array(Global.Intermission_Array, 5));
        Set Global Variable At Index(Intermission_Array, 5, Null);
        For Global Variable(Global_Index, 0, 3, 1);
            Play Effect(All Players(All Teams), Explosion Sound, Null, Global.Team_1_Spawns, 500);
            Play Effect(All Players(All Teams), Explosion Sound, Null, Global.Team_2_Spawns, 500);
            Wait(1, Ignore Condition);
        End;
        Play Effect(All Players(All Teams), Ring Explosion Sound, Null, Global.Team_1_Spawns, 200);
        Play Effect(All Players(All Teams), Ring Explosion Sound, Null, Global.Team_2_Spawns, 200);
        For Global Variable(Global_Index, 0, 6, 1);
            Play Effect(All Players(All Teams), Ring Explosion, Color(Sky Blue), Global.Team_1_Spawns, 20);
            Play Effect(All Players(All Teams), Ring Explosion, Color(Orange), Global.Team_2_Spawns, 20);
            Wait(0.085, Ignore Condition);
        End;
        Set Global Variable(Intermission_In_Progress, False);
        Unpause Match Time;
        Wait(0.022, Ignore Condition);
        Heal(All Players(All Teams), Null, 1000);
        Big Message(All Players(All Teams), Custom String("Fight!", Null, Null, Null));
        For Global Variable(Global_Index, 0, Number Of Players(All Teams), 1);
            If(Or(Compare((Value In Array(All Players(All Teams), Global.Global_Index)).Mod_Menu_Select, ==, 0), Compare((Value In Array(All Players(All Teams), Global.Global_Index)).Mod_Menu_Select, ==, 3)));
                Clear Status(Value In Array(All Players(All Teams), Global.Global_Index), Hacked);
                Clear Status(Value In Array(All Players(All Teams), Global.Global_Index), Rooted);
                Clear Status(Value In Array(All Players(All Teams), Global.Global_Index), Phased Out);
            End;
            Wait(0.016, Ignore Condition);
        End;
        Create Icon(All Players(Team 1), Add(Global.Team_2_Spawns, Vector(0, 2.5, 0)), Skull, Visible To and Position, Color(Red), True);
        Set Global Variable At Index(Intermission_Array, 6, Last Created Entity);
        Create In-World Text(All Players(Team 1), Custom String("ENEMY", Null, Null, Null), Add(Global.Team_2_Spawns, Vector(0, 1, 0)), 2.25, Do Not Clip, Visible To and Position, Color(Red), Default Visibility);
        Set Global Variable At Index(Intermission_Array, 7, Last Text ID);
        Play Effect(All Players(Team 1), Sombra EMP Explosion Sound, Color(Team 2), Global.Team_2_Spawns, 200);
        Play Effect(All Players(Team 1), McCree Flashbang Explosion Sound, Null, Global.Team_1_Spawns, 200);
        "‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî"
        Create Icon(All Players(Team 2), Add(Global.Team_1_Spawns, Vector(0, 2.5, 0)), Skull, Visible To and Position, Color(Red), True);
        Set Global Variable At Index(Intermission_Array, 8, Last Created Entity);
        Create In-World Text(All Players(Team 2), Custom String("ENEMY", Null, Null, Null), Add(Global.Team_1_Spawns, Vector(0, 1, 0)), 2.25, Do Not Clip, Visible To and Position, Color(Red), Default Visibility);
        Set Global Variable At Index(Intermission_Array, 9, Last Text ID);
        Play Effect(All Players(Team 2), Sombra EMP Explosion Sound, Color(Team 1), Global.Team_1_Spawns, 200);
        Play Effect(All Players(Team 2), McCree Flashbang Explosion Sound, Null, Global.Team_2_Spawns, 200);
        "....."
        Wait(4.5, Ignore Condition);
        Destroy Icon(Value In Array(Global.Intermission_Array, 6));
        Destroy Icon(Value In Array(Global.Intermission_Array, 8));
        Destroy In-World Text(Value In Array(Global.Intermission_Array, 7));
        Destroy In-World Text(Value In Array(Global.Intermission_Array, 9));
        Wait(0.016, Ignore Condition);
        Set Global Variable At Index(Intermission_Array, 0, Custom String("Intermission! Maybe change mods?", Null, Null, Null));
        Set Global Variable At Index(Intermission_Array, 2, 30);
        Set Global Variable At Index(Intermission_Array, 3, 27);
        Set Global Variable At Index(Intermission_Array, 4, Custom String("Intermission ends", Null, Null, Null));
        Set Global Variable At Index(Intermission_Array, 6, Null);
        Set Global Variable At Index(Intermission_Array, 7, Null);
        Set Global Variable At Index(Intermission_Array, 8, Null);
        Set Global Variable At Index(Intermission_Array, 9, Null);
        Set Global Variable At Index(Intermission_Array, 10, Custom String("Intermission isn't over", Null, Null, Null));
        Set Global Variable At Index(Intermission_Array, 11, Custom String("Intermission", Null, Null, Null));
        Loop;
    }
}

rule ("Once you've spawned, if in 'setup', TP to your teammates.") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        Global.Intermission_In_Progress != False;
    }
    actions {
        Wait Until(Has Spawned(Event Player), 99999);
        Wait(0.25, Abort When False);
        If(And(And(Global.Intermission_In_Progress, Compare(Match Time, >, 12)), Compare(Distance Between(Event Player, If-Then-Else(Compare(Team Of(Event Player), ==, Team 1), Global.Team_1_Spawns, Global.Team_2_Spawns)), >, 12)));
            If(Compare(Team Of(Event Player), ==, Team 1));
                Teleport(Event Player, Nearest Walkable Position(Add(Global.Team_1_Spawns, Vector(Random Real(-4, 4), 0, Random Real(-5, 5)))));
            End;
            If(Compare(Team Of(Event Player), ==, Team 2));
                Teleport(Event Player, Nearest Walkable Position(Add(Global.Team_2_Spawns, Vector(Random Real(-4, 4), 0, Random Real(-5, 5)))));
            End;
            Set Status(Event Player, Null, Rooted, 99999);
            Set Status(Event Player, Null, Phased Out, 99999);
            Wait(0.1, Ignore Condition);
            Start Holding Button(Event Player, Button(Reload));
            Start Holding Button(Event Player, Button(Interact));
            Wait(0.9, Ignore Condition);
            Stop Holding Button(Event Player, Button(Reload));
            Stop Holding Button(Event Player, Button(Interact));
            Wait(1, Ignore Condition);
            Big Message(Event Player, Custom String("Welcome! {0} isn't over yet. Choose abilities!", Value In Array(Global.Intermission_Array, 11), Null, Null));
            Wait Until(Not(Global.Intermission_In_Progress), 99999);
            If(Or(Compare((Event Player).Mod_Menu_Select, ==, 0), Compare((Event Player).Mod_Menu_Select, ==, 3)));
                Clear Status(Event Player, Rooted);
                Clear Status(Event Player, Phased Out);
            End;
        Else If(Compare(Distance Between(Event Player, If-Then-Else(Compare(Team Of(Event Player), ==, Team 1), Global.Team_1_Spawns, Global.Team_2_Spawns)), <, 12));
            Set Status(Event Player, Null, Rooted, 99999);
            Set Status(Event Player, Null, Phased Out, 99999);
            Wait(0.1, Ignore Condition);
            Start Holding Button(Event Player, Button(Reload));
            Start Holding Button(Event Player, Button(Interact));
            Wait(0.9, Ignore Condition);
            Stop Holding Button(Event Player, Button(Reload));
            Stop Holding Button(Event Player, Button(Interact));
            Wait(1, Ignore Condition);
            Big Message(Event Player, Custom String("Welcome! {0} isn't over yet. Choose abilities!", Value In Array(Global.Intermission_Array, 11), Null, Null));
            Wait Until(Not(Global.Intermission_In_Progress), 99999);
            If(Or(Compare((Event Player).Mod_Menu_Select, ==, 0), Compare((Event Player).Mod_Menu_Select, ==, 3)));
                Clear Status(Event Player, Rooted);
                Clear Status(Event Player, Phased Out);
            End;
        Else;
            Abort;
    }
}

rule ("Change heroes in intermission/setup") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        Is Button Held(Event Player, Button(Jump)) == True;
        Array Contains(Array(1, 2), (Event Player).Mod_Menu_Select) == True;
    }
    actions {
        "@Condition Intermission_In_Progress"
        Wait(1.5, Abort When False);
        Set Player Allowed Heroes(Event Player, Remove From Array(All Heroes, Hero Of(Event Player)));
        Wait(1, Ignore Condition);
        Reset Player Hero Availability(Event Player);
        Kill(Event Player, Null);
    }
}

rule ("Initialization - Passive/Active Mod Strings, HUD Instructions") {
    event {
        Ongoing - Global;
    }
    actions {
        Set Global Variable At Index(Passive_Mod_Strings, 0, Custom String("Primary/Secondary fire to scroll through passives. Ult/Ability 2 to change pages, Melee to choose", Null, Null, Null));
        Set Global Variable At Index(Passive_Mod_Strings, 1, Custom String("Random Passive Ability", Null, Null, Null));
        Set Global Variable At Index(Passive_Mod_Strings, 2, Custom String("140% Damage", Null, Null, Null));
        Set Global Variable At Index(Passive_Mod_Strings, 3, Custom String("160% Movement speed", Null, Null, Null));
        Set Global Variable At Index(Passive_Mod_Strings, 4, Custom String("50% Gravity + 133% movement speed", Null, Null, Null));
        Set Global Variable At Index(Passive_Mod_Strings, 5, Custom String("Recklessness: 30% Max HP, but 160% Speed and damage", Null, Null, Null));
        Set Global Variable At Index(Passive_Mod_Strings, 6, Custom String("Boots of Mobility: After 3 sec. of not taking damage, get 200% speed and 5% HP regen. per sec.", Null, Null, Null));
        Set Global Variable At Index(Passive_Mod_Strings, 7, Custom String("Resilient: Take 33% less damage from primary/secondary fire.", Null, Null, Null));
        Set Global Variable At Index(Passive_Mod_Strings, 8, Custom String("Raid Boss: 225% HP, 125% damage, but lose 75% speed and reveal your location.", Null, Null, Null));
        Set Global Variable At Index(Passive_Mod_Strings, 9, Custom String("150% HP + 150% Healing Received", Null, Null, Null));
        Set Global Variable At Index(Passive_Mod_Strings, 10, Custom String("150% Healing Dealt/Received", Null, Null, Null));
        Set Global Variable At Index(Passive_Mod_Strings, 11, Custom String("Rejuvenation: Regenerate 10% of your Max HP per sec.", Null, Null, Null));
        Set Global Variable At Index(Passive_Mod_Strings, 12, Custom String("Lifesteal: Heal for half the damage you deal.", Null, Null, Null));
        Set Global Variable At Index(Passive_Mod_Strings, 13, Custom String("Lifesplit: Heal nearby teammates for half the damage you deal.", Null, Null, Null));
        Set Global Variable At Index(Passive_Mod_Strings, 14, Custom String("Spellslinger: 70% max HP; refresh cooldowns every 3 seconds.", Null, Null, Null));
        Set Global Variable At Index(Passive_Mod_Strings, 15, Custom String("Archmage: 40% max HP, refresh cooldowns every 1.5 seconds.", Null, Null, Null));
        Set Global Variable At Index(Passive_Mod_Strings, 16, Custom String("300% Projectile Speed", Null, Null, Null));
        Set Global Variable At Index(Passive_Mod_Strings, 17, Custom String("Aimbot on targets below 50% HP", Null, Null, Null));
        Set Global Variable At Index(Passive_Mod_Strings, 18, Custom String("Smol Mode: You become tiny! (crouch to toggle) (excl. Zero-G, Colossus)", Null, Null, Null));
        Set Global Variable At Index(Passive_Mod_Strings, 19, Custom String("Immolation Aura: 50 damage per sec. to enemies within 6 meters", Null, Null, Null));
        Set Global Variable At Index(Passive_Mod_Strings, 20, Custom String("Forcefield: Repel enemies within 5 meters.", Null, Null, Null));
        Set Global Variable At Index(Passive_Mod_Strings, 21, Custom String("Corpse Explosion: Deals 60% of your Max HP in damage to nearby enemies shortly after death", Null, Null, Null));
        Set Global Variable At Index(Passive_Mod_Strings, 22, Custom String("Revenge: Respawn instantly at your killer's location (24 sec. CD)", Null, Null, Null));
        Set Global Variable At Index(Passive_Mod_Strings, 23, Custom String("Cheat Death: Fatal damage makes you unkillable for 3 sec. (10 sec. CD)", Null, Null, Null));
        Set Global Variable At Index(Passive_Mod_Strings, 24, Custom String("Victory Rush: Eliminations refresh your cooldowns, heal you, and grant a speed boost", Null, Null, Null));
        Set Global Variable At Index(Passive_Mod_Strings, 25, Custom String("Level Up: +4% damage/speed/max HP each final blow (resets if you swap mods, lvl. cap 15)", Null, Null, Null));
        Set Global Variable At Index(Passive_Mod_Strings, 26, Custom String("Killstreak: Start at 75% damage/speed/HP. 110%/125%/140% each final blow up to 3. Resets on death.", Null, Null, Null));
        Set Global Variable At Index(Passive_Mod_Strings, 27, Custom String("Dark Ritual: 75% Max HP. +15% ult charge every 4 sec. (excl. Echo hero)", Null, Null, Null));
        Set Global Variable At Index(Passive_Mod_Strings, 28, Custom String("+2.5% ultimate charge every second.", Null, Null, Null));
        Set Global Variable At Index(Passive_Mod_Strings, 29, Custom String("Omega Boost: Your ultimate becomes omega boost - supercharge a teammate! (Spray to display ult status)", Null, Null, Null));
        Set Global Variable At Index(Passive_Mod_Strings, 30, Custom String("Maximum Might: 30% damage/speed/health while at 100% ultimate", Null, Null, Null));
        Set Global Variable At Index(Passive_Mod_Strings, 31, Custom String("Mana Shield: While above 15% ultimate charge, heal for any damage taken, but drain charge", Null, Null, Null));
        Set Global Variable At Index(Passive_Mod_Strings, 32, Custom String("Thorns: Attackers take 15% of their Max HP in damage (up to 2 times per sec.)", Null, Null, Null));
        Set Global Variable At Index(Passive_Mod_Strings, 33, Custom String("Frost Armor: Attackers within 6 meters freeze when they damage you", Null, Null, Null));
        Set Global Variable At Index(Passive_Mod_Strings, 34, Custom String("Fury: Taking damage more than >25% of your max HP enrages you (150% damage/speed) (6 sec. CD).", Null, Null, Null));
        Set Global Variable At Index(Passive_Mod_Strings, 35, Custom String("Disruption: Damaging enemies hacks them for 1 sec. (3.5 sec cooldown)", Null, Null, Null));
        Set Global Variable At Index(Passive_Mod_Strings, 36, Custom String("Knockout: Melee attacks cause enemies to fall asleep (8 sec. CD)", Null, Null, Null));
        Set Global Variable At Index(Passive_Mod_Strings, 37, Custom String("Ambush: Melee attacking an enemy from behind insta-kills them", Null, Null, Null));
        Set Global Variable At Index(Passive_Mod_Strings, 38, Custom String("Infection: Melee turns enemies into your hero for 15s. Take half damage from your hero.", Null, Null, Null));
        Set Global Variable At Index(Passive_Mod_Strings, 39, Custom String("Boxer: 500% melee damage and 125% speed, but become permanently Hacked", Null, Null, Null));
        Set Global Variable At Index(Passive_Mod_Strings, 40, Custom String("Evil Eye: Keep an enemy in your crosshairs to gradually weaken them (-healing, -speed, -damage, +damaged).", Null, Null, Null));
        Set Global Variable At Index(Passive_Mod_Strings, 41, Custom String("Superhero Landing: Damage and knockdown nearby enemies when you hit the ground. The faster the better.", Null, Null, Null));
        Set Global Variable At Index(Passive_Mod_Strings, 42, Custom String("Personal Space: Damaging enemies knocks them away from you.", Null, Null, Null));
        Set Global Variable At Index(Passive_Mod_Strings, 43, Custom String("Optimize: Your active ability is better and has a lower cooldown. (some exceptions)", Null, Null, Null));
        Set Global Variable At Index(Passive_Mod_Strings, 44, Custom String("Power Points: Press F to start spending PP you gain over time. (excl. F-triggered active abilities)", Null, Null, Null));
        Set Global Variable At Index(Passive_Mod_Strings, 45, Custom String("Null Zone: Upon death, create a null zone that instantly kills enemies. (max. 3 null zones)", Null, Null, Null));
        Set Global Variable At Index(Passive_Mod_Strings, 46, Custom String("Mastery: Your hero abilities deal 180% damage.", Null, Null, Null));
        Set Global Variable At Index(Passive_Mod_Strings, 47, Custom String("47", Null, Null, Null));
        Set Global Variable At Index(Passive_Mod_Strings, 48, Custom String("48", Null, Null, Null));
        Set Global Variable At Index(Passive_Mod_Strings, 49, Custom String("49", Null, Null, Null));
        Set Global Variable At Index(Passive_Mod_Strings, 50, Custom String("50", Null, Null, Null));
        Set Global Variable At Index(Passive_Mod_Strings, 51, Custom String("51", Null, Null, Null));
        Set Global Variable At Index(Passive_Mod_Strings, 52, Custom String("52", Null, Null, Null));
        Set Global Variable At Index(Passive_Mod_Strings, 53, Custom String("53", Null, Null, Null));
        Set Global Variable At Index(Passive_Mod_Strings, 54, Custom String("54", Null, Null, Null));
        Set Global Variable At Index(Passive_Mod_Strings, 55, Custom String("55", Null, Null, Null));
        Set Global Variable At Index(Active_Mod_Strings, 0, Custom String("NOTE: Reinhardt and Brigitte press RELOAD, not MELEE for using active abilities.", Null, Null, Null));
        Set Global Variable At Index(Active_Mod_Strings, 1, Custom String("Random Active Ability", Null, Null, Null));
        Set Global Variable At Index(Active_Mod_Strings, 2, Custom String("Blink: Melee teleports you 7 meters in the direction you are looking. (3 sec. CD)", Null, Null, Null));
        Set Global Variable At Index(Active_Mod_Strings, 3, Custom String("Human Cannonball: Melee to launch yourself at high speed. Stun yourself/enemies where you land. (6 sec. CD)", Null, Null, Null));
        Set Global Variable At Index(Active_Mod_Strings, 4, Custom String("Shadowstep: Melee teleports you behind your target enemy after a delay (30m range, 12 sec. CD)", Null, Null, Null));
        Set Global Variable At Index(Active_Mod_Strings, 5, Custom String("Translocate: Melee to swap positions with an enemy (30m range, 8 sec. CD)", Null, Null, Null));
        Set Global Variable At Index(Active_Mod_Strings, 6, Custom String("Telekinesis: Melee to push an enemy towards your cursor after 0.5 sec. (30m range, 4 sec. CD)", Null, Null, Null));
        Set Global Variable At Index(Active_Mod_Strings, 7, Custom String("Death Grip: Melee roots an enemy for 1 sec. and pulls them to you (30m range) (11 sec. CD)", Null, Null, Null));
        Set Global Variable At Index(Active_Mod_Strings, 8, Custom String("Entangling Roots: Melee roots an enemy for 1.5 sec. (30m range, 9 sec. CD)", Null, Null, Null));
        Set Global Variable At Index(Active_Mod_Strings, 9, Custom String("Shift Burden: Melee at an enemy to set their gravity to 500% for 4 seconds. (7 sec. CD)", Null, Null, Null));
        Set Global Variable At Index(Active_Mod_Strings, 10, Custom String("Blind: Target an enemy and press melee to blind them (12 sec. CD)", Null, Null, Null));
        Set Global Variable At Index(Active_Mod_Strings, 11, Custom String("Fear: Melee forces a target enemy to run away from you (30m range, 10 sec. CD)", Null, Null, Null));
        Set Global Variable At Index(Active_Mod_Strings, 12, Custom String("Taunt: Melee forces your target to chase and attack you (30m range, 8 sec. CD)", Null, Null, Null));
        Set Global Variable At Index(Active_Mod_Strings, 13, Custom String("Duel: Root yourself and an enemy for 2.5 seconds. You both take double damage. (10 sec. CD)", Null, Null, Null));
        Set Global Variable At Index(Active_Mod_Strings, 14, Custom String("Cleanse: Press melee to clear any CC and become invulnerable for 4 sec. (6 sec. CD)", Null, Null, Null));
        Set Global Variable At Index(Active_Mod_Strings, 15, Custom String("Devour: Melee an enemy to eat them, then spit them out after 2.5 sec. (8 sec. CD) (excl. Sombra hero)", Null, Null, Null));
        Set Global Variable At Index(Active_Mod_Strings, 16, Custom String("Hex: Melee turns target enemy into Torbjorn for 8 sec. (30m range, 14 sec. CD)", Null, Null, Null));
        Set Global Variable At Index(Active_Mod_Strings, 17, Custom String("Spectralize: Melee phases out target enemy for 3.5 seconds. (8 sec. CD)", Null, Null, Null));
        Set Global Variable At Index(Active_Mod_Strings, 18, Custom String("Preparation: Press Reload + Melee to refresh your ability cooldowns (11 sec. CD)", Null, Null, Null));
        Set Global Variable At Index(Active_Mod_Strings, 19, Custom String("Zero Gravity (crouch in midair to toggle)", Null, Null, Null));
        Set Global Variable At Index(Active_Mod_Strings, 20, Custom String("Sneak: Become invisible after crouching for 1.25 sec. (Lasts until you uncrouch, deal or take damage)", Null, Null, Null));
        Set Global Variable At Index(Active_Mod_Strings, 21, Custom String("Save Disc: Press Reload + Melee to set a point you can return to by pressing them again (4 sec. CD) (resets on death)", Null, Null, Null));
        Set Global Variable At Index(Active_Mod_Strings, 22, Custom String("Inner Power: Hold crouch to convert your ult charge to temporary health. (Resets when used again)", Null, Null, Null));
        Set Global Variable At Index(Active_Mod_Strings, 23, Custom String("Feign Death: Press Reload + Melee to kill yourself. Press it again within 6 sec. to revive (12 sec. CD) (excl. Smol Mode)", Null, Null, Null));
        Set Global Variable At Index(Active_Mod_Strings, 24, Custom String("Colossus: Hold Interact to use 100% Ult and become a statue with +2500 Armor. Explode when you die. (15 sec. CD)", Null, Null, Null));
        Set Global Variable At Index(Active_Mod_Strings, 25, Custom String("Goomba Stomp: Land on an enemy's head to deal 50% of your Max HP in damage", Null, Null, Null));
        Set Global Variable At Index(Active_Mod_Strings, 26, Custom String("Thunderbolt: Press Melee to deal 75 damage to an enemy (30m range, costs 20% ult, 3 sec. CD)", Null, Null, Null));
        Set Global Variable At Index(Active_Mod_Strings, 27, Custom String("Corruption: Melee deals 40% of an enemy's max HP over 4 sec. (30m range) (10 sec. CD)", Null, Null, Null));
        Set Global Variable At Index(Active_Mod_Strings, 28, Custom String("Railgun: Hold F to charge a railgun shot that deals massive damage or burns an area. (7 sec. CD)", Null, Null, Null));
        Set Global Variable At Index(Active_Mod_Strings, 29, Custom String("Pocket Poison: Create a gas cloud at an enemy's feet. Enemies in it take 250 damage over 7 seconds. (11 sec. CD)", Null, Null, Null));
        Set Global Variable At Index(Active_Mod_Strings, 30, Custom String("ORA ORA!: Punch an enemy to lock them in place and punch them 20 more times before sending them flying. (~12 sec. CD)", Null, Null, Null));
        Set Global Variable At Index(Active_Mod_Strings, 31, Custom String("Power Glove: Reload primes your next punch to deal 20x knockback and 3x damage. (7 sec. CD)", Null, Null, Null));
        Set Global Variable At Index(Active_Mod_Strings, 32, Custom String("Elemental Charge: Interact to switch between your next damage burning, freeze, or pushing an enemy. (7 sec. CD)", Null, Null, Null));
        Set Global Variable At Index(Active_Mod_Strings, 33, Custom String("Bouncing Blades: For 10 seconds, damage you deal chains to other enemies. (Melee to activate) (9 sec. CD)", Null, Null, Null));
        Set Global Variable At Index(Active_Mod_Strings, 34, Custom String("Vs. Goliath: Melee to toggle between (dealing more/taking less) damage from enemies with more health than you.", Null, Null, Null));
        Set Global Variable At Index(Active_Mod_Strings, 35, Custom String("Ghosted: Melee in the air to phase out, become invisible, and get 200% speed for 2 seconds. (8 sec. CD)", Null, Null, Null));
        Set Global Variable At Index(Active_Mod_Strings, 36, Custom String("Life Tap: Press the Ultimate button to trade 30% HP for 20% ultimate charge (Excl. Echo hero)", Null, Null, Null));
        Set Global Variable At Index(Active_Mod_Strings, 37, Custom String("Healthing Hand: Melee at a teammate to add twice your HP to theirs for 8 seconds - but stun yourself. (11 sec. CD)", Null, Null, Null));
        Set Global Variable At Index(Active_Mod_Strings, 38, Custom String("Anti-injure: Melee a teammate close to you to restore their health over 4 seconds. (8 sec. CD, starts on cast)", Null, Null, Null));
        Set Global Variable At Index(Active_Mod_Strings, 39, Custom String("Get down: Melee at a critically injured teammate to swap places and health with them. (8 sec. CD)", Null, Null, Null));
        Set Global Variable At Index(Active_Mod_Strings, 40, Custom String("Med-E-Port: Hold Melee to teleport to a random teammate. Heal them and nearby teammates for half their max HP. (8 sec. CD)", Null, Null, Null));
        Set Global Variable At Index(Active_Mod_Strings, 41, Custom String("Armor Field: Melee to drop a 3m field that gives teammates 75 armor over 5 seconds. (10 sec. CD)", Null, Null, Null));
        Set Global Variable At Index(Active_Mod_Strings, 42, Custom String("Soul Link: Melee at a teammate. Gain 150HP. Non-fatal damage they take is redirected to you. (7 sec. CD on death)", Null, Null, Null));
        Set Global Variable At Index(Active_Mod_Strings, 43, Custom String("Pyroblast: Melee fires a slow-moving fireball that gets more powerful over time. (6 sec. CD)", Null, Null, Null));
        Set Global Variable At Index(Active_Mod_Strings, 44, Custom String("Meteor shower: Target an open-air area with melee. Meteors rain down, dealing damage to those in LOS. (15 sec. CD)", Null, Null, Null));
        Set Global Variable At Index(Active_Mod_Strings, 45, Custom String("Electrical Storm: Spend 50% Ult to deal 150 damage to all enemies in your LOS. (15 sec. CD)", Null, Null, Null));
        Set Global Variable At Index(Active_Mod_Strings, 46, Custom String("Shockwave: Melee sends out a shockwave that stuns and damages players (effect weakens with distance). (12 sec. CD)", Null, Null, Null));
        Set Global Variable At Index(Active_Mod_Strings, 47, Custom String("Trap Gun: Throw a beartrap. If it hits a player, they take 50 damage and are rooted for 2.5 sec. (10 sec. CD)", Null, Null, Null));
        Set Global Variable At Index(Active_Mod_Strings, 48, Custom String("48", Null, Null, Null));
        Set Global Variable At Index(Active_Mod_Strings, 49, Custom String("49", Null, Null, Null));
        Set Global Variable At Index(Active_Mod_Strings, 50, Custom String("50", Null, Null, Null));
        Set Global Variable At Index(Active_Mod_Strings, 51, Custom String("51", Null, Null, Null));
        Set Global Variable At Index(Active_Mod_Strings, 52, Custom String("52", Null, Null, Null));
        Set Global Variable At Index(Active_Mod_Strings, 53, Custom String("53", Null, Null, Null));
        Set Global Variable At Index(Active_Mod_Strings, 54, Custom String("54", Null, Null, Null));
        Set Global Variable At Index(Active_Mod_Strings, 55, Custom String("55", Null, Null, Null));
        Create HUD Text(All Players(All Teams), Null, Null, Custom String("Mod Menu...............Hold Reload + Interact", Null, Null, Null), Left, 2, Null, Null, Color(Lime Green), Visible To, Default Visibility);
        Create HUD Text(All Players(All Teams), Null, Null, Custom String("[you must be out of combat to open menu]", Null, Null, Null), Left, 3, Null, Null, Color(White), Visible To, Default Visibility);
        Create HUD Text(All Players(All Teams), Null, Custom String("Change Camera..............Hold Crouch + Interact", Null, Null, Null), Null, Left, 4, Null, Color(White), Null, Visible To, Default Visibility);
        Create HUD Text(All Players(All Teams), Null, Custom String("If you're stuck.................Hold Reload only", Null, Null, Null), Null, Left, 4, Null, Color(White), Null, Visible To, Default Visibility);
    }
}

rule ("Optional - Debugging") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        Event Player == Host Player;
        First Of(Global.Debug) == True;
    }
    actions {
        Create HUD Text(Host Player, Custom String("Average Load: {0}", Server Load Average, Null, Null), Null, Null, Left, 0, Color(White), Null, Null, Visible To and String, Default Visibility);
        Create HUD Text(Host Player, Custom String("Peak: {0}", Server Load Peak, Null, Null), Null, Null, Left, 0, Color(White), Null, Null, Visible To and String, Default Visibility);
        Create HUD Text(Host Player, Custom String("Server Load: {0}", Server Load, Null, Null), Null, Null, Left, 0, Color(White), Null, Null, Visible To and String, Default Visibility);
        Create HUD Text(Host Player, Custom String("CP0: {0}", First Of((Event Player).Choice_Color_P), Null, Null), Null, Null, Left, 4, Color(Green), Null, Null, Visible To and String, Default Visibility);
        Create HUD Text(Host Player, Custom String("CP1: {0}", Value In Array((Event Player).Choice_Color_P, 1), Null, Null), Null, Null, Left, 5, Color(Green), Null, Null, Visible To and String, Default Visibility);
        Create HUD Text(Host Player, Custom String("CP2: {0}", Value In Array((Event Player).Choice_Color_P, 2), Null, Null), Null, Null, Left, 6, Color(Green), Null, Null, Visible To and String, Default Visibility);
        Create HUD Text(Host Player, Custom String("CP3: {0}", Value In Array((Event Player).Choice_Color_P, 3), Null, Null), Null, Null, Left, 7, Color(Green), Null, Null, Visible To and String, Default Visibility);
        Create HUD Text(Host Player, Custom String("CP4: {0}", Value In Array((Event Player).Choice_Color_P, 4), Null, Null), Null, Null, Left, 8, Color(Green), Null, Null, Visible To and String, Default Visibility);
        Create HUD Text(Host Player, Custom String("CA0: {0}", First Of((Event Player).Choice_Color_A), Null, Null), Null, Null, Left, 9, Color(Orange), Null, Null, Visible To and String, Default Visibility);
        Create HUD Text(Host Player, Custom String("CA1: {0}", Value In Array((Event Player).Choice_Color_A, 1), Null, Null), Null, Null, Left, 10, Color(Orange), Null, Null, Visible To and String, Default Visibility);
        Create HUD Text(Host Player, Custom String("CA2: {0}", Value In Array((Event Player).Choice_Color_A, 2), Null, Null), Null, Null, Left, 11, Color(Orange), Null, Null, Visible To and String, Default Visibility);
        Create HUD Text(Host Player, Custom String("CA3: {0}", Value In Array((Event Player).Choice_Color_A, 3), Null, Null), Null, Null, Left, 12, Color(Orange), Null, Null, Visible To and String, Default Visibility);
        Create HUD Text(Host Player, Custom String("CA4: {0}", Value In Array((Event Player).Choice_Color_A, 4), Null, Null), Null, Null, Left, 13, Color(Orange), Null, Null, Visible To and String, Default Visibility);
        Create HUD Text(Host Player, Custom String("MU0: {0}", First Of((Event Player).Menu_Element), Null, Null), Null, Null, Left, 14, Color(Green), Null, Null, Visible To and String, Default Visibility);
        Create HUD Text(Host Player, Custom String("MU1: {0}", Value In Array((Event Player).Menu_Element, 1), Null, Null), Null, Null, Left, 15, Color(Orange), Null, Null, Visible To and String, Default Visibility);
        Create HUD Text(Host Player, Custom String("PIndex: {0}", (Event Player).Passive_Mod_Index, Null, Null), Null, Null, Left, 16, Color(Green), Null, Null, Visible To and String, Default Visibility);
        Create HUD Text(Host Player, Custom String("AIndex: {0}", (Event Player).Active_Mod_Index, Null, Null), Null, Null, Left, 17, Color(Orange), Null, Null, Visible To and String, Default Visibility);
        Create HUD Text(Host Player, Custom String("PNum0: {0}", First Of((Event Player).Page_Number), Null, Null), Null, Null, Left, 18, Color(Green), Null, Null, Visible To and String, Default Visibility);
        Create HUD Text(Host Player, Custom String("PNum1: {0}", Value In Array((Event Player).Page_Number, 1), Null, Null), Null, Null, Left, 19, Color(Orange), Null, Null, Visible To and String, Default Visibility);
        Create HUD Text(Host Player, Custom String("MMS: {0}", (Event Player).Mod_Menu_Select, Null, Null), Null, Null, Left, 20, Color(Sky Blue), Null, Null, Visible To and String, Default Visibility);
    }
}

rule ("Optional - Debugging 2") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        Event Player == Host Player;
        Value In Array(Global.Debug, 1) == True;
        Is Button Held(Event Player, Button(Reload)) == True;
        Is Button Held(Event Player, Button(Jump)) == True;
        Is Button Held(Event Player, Button(Secondary Fire)) == True;
        Is Button Held(Event Player, Button(Primary Fire)) == True;
    }
    actions {
        Create Dummy Bot(Hero(Roadhog), Color(Team 2), 10, Position Of(Event Player), Up);
        Wait(2, Ignore Condition);
        Create Dummy Bot(Hero(Roadhog), Color(Team 1), 10, Position Of(Event Player), Left);
        Wait(2, Ignore Condition);
        Wait Until(And(And(And(Is Button Held(Event Player, Button(Reload)), Is Button Held(Event Player, Button(Jump))), Is Button Held(Event Player, Button(Secondary Fire))), Is Button Held(Event Player, Button(Primary Fire))), 99999);
        Destroy All Dummy Bots;
        Wait(2, Ignore Condition);
    }
}

rule ("Optional - Debugging 3") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        Event Player == Host Player;
        Value In Array(Global.Debug, 2) == True;
        Is Button Held(Event Player, Button(Interact)) == True;
    }
    actions {
        Damage(Player Closest To Reticle(Event Player, All Teams), Null, 100);
        Wait(2, Ignore Condition);
    }
}

rule ("Optional - Debugging 4") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        Event Player == Host Player;
        Value In Array(Global.Debug, 3) == True;
        Is Button Held(Event Player, Button(Melee)) == True;
    }
    actions {
        Chase Player Variable Over Time(Event Player, Damage_Chase, 400, 6, Destination and Duration);
        Wait Until(Not(Is Button Held(Event Player, Button(Melee))), 7);
        Stop Chasing Player Variable(Event Player, Damage_Chase);
        Damage(Event Player, Player Closest To Reticle(Event Player, Team 2), (Event Player).Damage_Chase);
        Small Message(All Players(All Teams), Custom String("Damage: {0}", (Event Player).Damage_Chase, Null, Null));
        Wait(2, Ignore Condition);
        Set Player Variable(Event Player, Damage_Chase, 0);
    }
}

rule ("Optional - Debugging 5") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        Event Player == Host Player;
        Value In Array(Global.Debug, 4) == True;
        Is Button Held(Event Player, Button(Reload)) == True;
        Is Button Held(Event Player, Button(Jump)) == True;
        Is Button Held(Event Player, Button(Melee)) == True;
    }
    actions {
        Create Dummy Bot(Hero(Roadhog), Team 2, -1, Position Of(Event Player), Up);
        Wait(2, Ignore Condition);
    }
}

rule ("Optional - Debugging 6") {
    event {
        Player Dealt Damage;
        All;
        All;
    }
    conditions {
        Event Player == Host Player;
        Value In Array(Global.Debug, 5) == True;
        Is Dummy Bot(Victim) == True;
    }
    actions {
        "hudHeader(hostPlayer, \"Event Damage: {0}\".format(eventDamage), HudPosition.LEFT, 3, Color.RED, HudReeval.VISIBILITY_AND_STRING, SpecVisibility.DEFAULT)"
        Small Message(Host Player, Custom String("Damage: {0}", Event Damage, Null, Null));
    }
}

rule ("Initialization - Current Mods HUD Text") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    actions {
        Wait Until(Compare((Event Player).Mod_Menu_Select, ==, 1), 99999);
        Create HUD Text(Event Player, Null, Update Every Frame(Value In Array(Global.Passive_Mod_Strings, If-Then-Else(Compare(First Of((Event Player).Page_Number), !=, 8), Add(First Of((Event Player).Menu_Element), Multiply(5, First Of((Event Player).Page_Number))), Add(40, First Of((Event Player).Menu_Element))))), Null, Top, 1, Null, Color(Lime Green), Null, Visible To and String, Default Visibility);
        Wait Until(Compare((Event Player).Mod_Menu_Select, ==, 2), 99999);
        Create HUD Text(Event Player, Null, Update Every Frame(Value In Array(Global.Active_Mod_Strings, If-Then-Else(Compare(Value In Array((Event Player).Page_Number, 1), !=, 8), Add(Value In Array((Event Player).Menu_Element, 1), Multiply(5, Value In Array((Event Player).Page_Number, 1))), Add(40, Value In Array((Event Player).Menu_Element, 1))))), Null, Top, 2, Null, Color(Orange), Null, Visible To and String, Default Visibility);
    }
}

rule ("Player Welcome Message - Joined") {
    event {
        Player Joined Match;
        All;
        All;
    }
    conditions {
        Is Game In Progress == True;
    }
    actions {
        "wait."
        Wait(12, Ignore Condition);
        Play Effect(Event Player, Hanzo Sonic Arrow Initial Pulse Sound, Null, Position Of(Event Player), 4000);
        Big Message(Event Player, Custom String("Welcome to SUPERPOWERS! Hold {0} + {1} to get started and build your hero!", Input Binding String(Button(Reload)), Input Binding String(Button(Interact)), Null));
    }
}

rule ("Camera - 3rd Person Toggle") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        Is Button Held(Event Player, Button(Reload)) == False;
        Is Button Held(Event Player, Button(Crouch)) == True;
        Is Button Held(Event Player, Button(Interact)) == True;
        (Event Player).Is_Colossus == False;
        (Event Player).Is_Blind == False;
    }
    actions {
        If(Compare((Event Player).Third_Person_Camera_Toggle, ==, 0));
            Wait(0.07, Ignore Condition);
            "(-.8, .125, .8)"
            Start Camera(Event Player, Ray Cast Hit Position(Event Player, Add(Add(Add(Event Player, World Vector Of(Vector(-0.2, 0.06, 0.5), Event Player, Rotation)), Multiply(Up, 1.5)), Multiply(Facing Direction Of(Event Player), -3)), Null, Event Player, False), Add(Event Player, Multiply(Facing Direction Of(Event Player), 1000)), Update Every Frame(40));
            Set Player Variable(Event Player, Third_Person_Camera_Toggle, 1);
            Abort;
        Else If(Compare((Event Player).Third_Person_Camera_Toggle, ==, 1));
            Wait(0.07, Ignore Condition);
            Stop Camera(Event Player);
            Set Player Variable(Event Player, Third_Person_Camera_Toggle, 0);
    }
}

rule ("Get yourself unstuck") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        Global.Intermission_In_Progress == False;
        (Event Player).Is_In_Combat == False;
        Is Button Held(Event Player, Button(Reload)) == True;
        Is Button Held(Event Player, Button(Melee)) == False;
        Is Button Held(Event Player, Button(Interact)) == False;
        Is Button Held(Event Player, Button(Crouch)) == False;
    }
    actions {
        Wait(2.5, Abort When False);
        Small Message(Event Player, Custom String("Getting you unstuck...", Null, Null, Null));
        Play Effect(All Players(All Teams), Sombra Translocator Disappear Effect, Color(Team 1), Event Player, 1);
        Play Effect(All Players(All Teams), Sombra Translocating Sound, Color(Team 2), Position Of(Event Player), 100);
        Wait(0.1, Ignore Condition);
        If(Compare(Team Of(Event Player), ==, Team 1));
            Teleport(Event Player, Global.Team_1_Spawns);
            Wait(0.2, Ignore Condition);
            Play Effect(Event Player, Sombra Translocator Reappear Sound, Color(Team 2), Position Of(Event Player), 100);
            Play Effect(Event Player, Tracer Recall Reappear Effect, Color(Team 1), Event Player, 1);
        Else If(Compare(Team Of(Event Player), ==, Team 2));
            Teleport(Event Player, Global.Team_2_Spawns);
            Wait(0.2, Ignore Condition);
            Play Effect(Event Player, Sombra Translocator Reappear Sound, Color(Team 2), Position Of(Event Player), 100);
            Play Effect(Event Player, Tracer Recall Reappear Effect, Color(Team 1), Event Player, 1);
    }
}

rule ("Mechanics - Conditions to use Melee Cast Mods") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        Global.Intermission_In_Progress == False;
        Is Alive(Player Closest To Reticle(Event Player, Opposite Team Of(Team Of(Event Player)))) == True;
        And(Compare(Hero Of(Player Closest To Reticle(Event Player, Opposite Team Of(Team Of(Event Player)))), ==, Hero(Sombra)), Is Using Ability 1(Player Closest To Reticle(Event Player, Opposite Team Of(Team Of(Event Player))))) == False;
        Is In Line of Sight(Event Player, Player Closest To Reticle(Event Player, Opposite Team Of(Team Of(Event Player))), Enemy Barriers Block LOS) == True;
        Has Status(Player Closest To Reticle(Event Player, Opposite Team Of(Team Of(Event Player))), Phased Out) == False;
        Is In View Angle(Event Player, Player Closest To Reticle(Event Player, Opposite Team Of(Team Of(Event Player))), 30) == True;
        Or(Is Meleeing(Event Player), And(Array Contains(Array(Hero(Brigitte), Hero(Reinhardt)), Hero Of(Event Player)), Is Button Held(Event Player, Button(Reload)))) == True;
        (Event Player).OraOra == False;
    }
    actions {
        Abort If(Compare(Distance Between(Event Player, Player Closest To Reticle(Event Player, Opposite Team Of(Team Of(Event Player)))), >, 30));
        Set Player Variable(Event Player, CastMelee_Mod_Conditions, 1);
        Wait(0.66, Ignore Condition);
        Set Player Variable(Event Player, CastMelee_Mod_Conditions, 0);
    }
}

rule ("Mechanics - Conditions to use Friendly Melee Cast Mods") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        Global.Intermission_In_Progress == False;
        Is Alive(Player Closest To Reticle(Event Player, Team Of(Event Player))) == True;
        Is In Line of Sight(Event Player, Player Closest To Reticle(Event Player, Team Of(Event Player)), Enemy Barriers Block LOS) == True;
        Has Status(Player Closest To Reticle(Event Player, Team Of(Event Player)), Phased Out) == False;
        Is In View Angle(Event Player, Player Closest To Reticle(Event Player, Team Of(Event Player)), 30) == True;
        Or(Is Meleeing(Event Player), And(Array Contains(Array(Hero(Brigitte), Hero(Reinhardt)), Hero Of(Event Player)), Is Button Held(Event Player, Button(Reload)))) == True;
    }
    actions {
        Abort If(Compare(Distance Between(Event Player, Player Closest To Reticle(Event Player, Team Of(Event Player))), >, 30));
        Set Player Variable(Event Player, CastMelee_Mod_Conditions_Ally, 1);
        Wait(0.66, Ignore Condition);
        Set Player Variable(Event Player, CastMelee_Mod_Conditions_Ally, 0);
    }
}

rule ("Mechanics - Conditions to use Ultimate Cast Mods") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        Global.Intermission_In_Progress == False;
        Is In View Angle(Event Player, Player Closest To Reticle(Event Player, Team Of(Event Player)), 30) == True;
    }
    actions {
        If(Compare(And(And(And(Is Alive(Player Closest To Reticle(Event Player, Team Of(Event Player))), Is In Line of Sight(Event Player, Player Closest To Reticle(Event Player, Team Of(Event Player)), Enemy Barriers Block LOS)), Not(Has Status(Player Closest To Reticle(Event Player, Team Of(Event Player)), Phased Out))), Distance Between(Event Player, Player Closest To Reticle(Event Player, Team Of(Event Player)))), <, 35));
            Set Player Variable(Event Player, CastUltimate_Mod_Conditions_Ally, 1);
        Else;
            Set Player Variable(Event Player, CastUltimate_Mod_Conditions_Ally, 0);
        End;
        Wait(1, Ignore Condition);
        Loop If Condition Is True;
    }
}

rule ("Mechanics - Conditions to use LoS Mods") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        Global.Intermission_In_Progress == False;
        Is In View Angle(Event Player, Player Closest To Reticle(Event Player, Opposite Team Of(Team Of(Event Player))), 12) == True;
    }
    actions {
        Set Player Variable(Event Player, Target, Player Closest To Reticle(Event Player, Opposite Team Of(Team Of(Event Player))));
        If(And(And(And(And(Is In Line of Sight(Event Player, (Event Player).Target, Enemy Barriers Block LOS), Compare(Distance Between(Event Player, (Event Player).Target), <=, 25)), Is Alive((Event Player).Target)), Not(And(Is Using Ability 1((Event Player).Target), Compare(Hero Of((Event Player).Target), ==, Hero(Sombra))))), Not(Has Status((Event Player).Target, Phased Out))));
            Set Player Variable(Event Player, LoS_Mod_Conditions, True);
        Else;
            Set Player Variable(Event Player, LoS_Mod_Conditions, False);
        End;
        Wait(1, Ignore Condition);
        Loop If Condition Is True;
    }
}

rule ("Mechanics - Check out of combat") {
    event {
        Player Took Damage;
        All;
        All;
    }
    actions {
        Set Player Variable(Event Player, Is_In_Combat, True);
        Wait(5, Restart When True);
        Set Player Variable(Event Player, Is_In_Combat, False);
    }
}

rule ("Mechanics - Check out of combat") {
    event {
        Player Dealt Damage;
        All;
        All;
    }
    actions {
        Set Player Variable(Event Player, Is_In_Combat, True);
        Wait(5, Restart When True);
        Set Player Variable(Event Player, Is_In_Combat, False);
    }
}

rule ("Create cooldown indicator for each player") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    actions {
        Set Player Variable(Event Player, Cd_Visible_To, Array(Null));
        Set Player Variable(Event Player, Cooldown_String_1, Custom String("Ready:", Null, Null, Null));
        Set Player Variable(Event Player, Cooldown_Chase, Icon String(Checkmark));
        Set Player Variable(Event Player, Cd_Color, Color(Green));
        Create In-World Text((Event Player).Cd_Visible_To, Custom String("{0} {1}", (Event Player).Cooldown_String_1, (Event Player).Cooldown_Chase, Null), Update Every Frame(Add(Eye Position(Event Player), Multiply(100, Add(Add(Multiply(2.7, World Vector Of(Right, Event Player, Rotation)), Multiply(-1.43, Direction From Angles(Horizontal Angle From Direction(Facing Direction Of(Event Player)), Subtract(Vertical Angle From Direction(Facing Direction Of(Event Player)), 90)))), Multiply(3, Facing Direction Of(Event Player)))))), 1.5, Do Not Clip, Visible To Position String and Color, (Event Player).Cd_Color, Default Visibility);
        Set Player Variable(Event Player, Cooldown_Indicator, Last Text ID);
    }
}

rule ("Open mod menu") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        Array Contains(Array(0, 3), (Event Player).Mod_Menu_Select) == True;
        Is Button Held(Event Player, Button(Reload)) == True;
        Is Button Held(Event Player, Button(Interact)) == True;
        Is Standing(Event Player) == True;
        Is Alive(Event Player) == True;
        (Event Player).Is_In_Combat == False;
    }
    actions {
        Wait(0.75, Abort When False);
        Set Player Variable(Event Player, Cd_Visible_To, Array(Null));
        Start Facing(Event Player, Forward, 150, To Player, Direction and Turn Rate);
        Heal(Event Player, Null, 10000);
        For Player Variable(Event Player, Index, 0, Count Of((Event Player).Mod_Menu_Text), 1);
            Destroy In-World Text(Value In Array((Event Player).Mod_Menu_Text, (Event Player).Index));
        End;
        Play Effect(All Players(All Teams), Sombra Translocator Disappear Sound, Team Of(Event Player), Position Of(Event Player), 75);
        Play Effect(All Players(All Teams), Sombra Translocator Disappear Effect, Team Of(Event Player), Position Of(Event Player), 1);
        Play Effect(All Players(All Teams), Sombra Translocator Reappear Sound, Team Of(Event Player), Position Of(Event Player), 75);
        Play Effect(All Players(All Teams), Sombra Translocator Reappear Effect, Team Of(Event Player), Position Of(Event Player), 1);
        If(Or(Compare((Event Player).Passive_Mod, ==, 27), Compare((Event Player).Active_Mod, ==, 36)));
            Set Ultimate Charge(Event Player, 0);
        End;
        If(Compare(Value In Array((Event Player).Menu_Misc, 5), ==, 0));
            Set Player Variable At Index(Event Player, Choice_Color_P, 0, Color(Sky Blue));
            Set Player Variable At Index(Event Player, Choice_Color_A, 0, Color(Sky Blue));
        End;
        Set Player Variable(Event Player, Passive_Mod, 0);
        Set Player Variable(Event Player, Active_Mod, 0);
        Call Subroutine(PlayerReset);
        Wait(0.064, Ignore Condition);
        Create Effect(Event Player, Bad Aura, Color(Black), Add(Eye Position(Event Player), Multiply(Facing Direction Of(Event Player), 0.5)), 2, Visible To Position and Radius);
        Set Player Variable At Index(Event Player, Menu_Misc, 0, Last Created Entity);
        Create Effect(Event Player, Bad Aura, Color(Black), Add(Eye Position(Event Player), Multiply(Facing Direction Of(Event Player), 0.75)), 3, Visible To Position and Radius);
        Set Player Variable At Index(Event Player, Menu_Misc, 1, Last Created Entity);
        Create Effect(Event Player, Bad Aura, Color(Black), Add(Eye Position(Event Player), Multiply(Facing Direction Of(Event Player), 1.1)), 4, Visible To Position and Radius);
        Set Player Variable At Index(Event Player, Menu_Misc, 2, Last Created Entity);
        Create Effect(Event Player, Bad Aura, Color(Black), Add(Eye Position(Event Player), Multiply(Facing Direction Of(Event Player), 1.25)), 5, Visible To Position and Radius);
        Set Player Variable At Index(Event Player, Menu_Misc, 3, Last Created Entity);
        Create Effect(Event Player, Bad Aura, Color(Black), Add(Eye Position(Event Player), Multiply(Facing Direction Of(Event Player), 1.5)), 6, Visible To Position and Radius);
        Set Player Variable At Index(Event Player, Menu_Misc, 4, Last Created Entity);
        Disable Hero HUD(Event Player);
        Disallow Button(Event Player, Button(Primary Fire));
        Disallow Button(Event Player, Button(Secondary Fire));
        Set Status(Event Player, Null, Rooted, 9999);
        Set Status(Event Player, Null, Hacked, 9999);
        Set Status(Event Player, Null, Phased Out, 9999);
        If(True);
        Skip(Value In Array(Array(22, 0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20), Add(1, Index Of Array Value(Array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10), First Of((Event Player).Page_Number)))));
        //__label_switch_4_0__:
        Set Player Variable(Event Player, Passive_Mod_Index, 0);
        Else;
        //__label_switch_4_1__:
        Set Player Variable(Event Player, Passive_Mod_Index, 5);
        Else;
        //__label_switch_4_2__:
        Set Player Variable(Event Player, Passive_Mod_Index, 10);
        Else;
        //__label_switch_4_3__:
        Set Player Variable(Event Player, Passive_Mod_Index, 15);
        Else;
        //__label_switch_4_4__:
        Set Player Variable(Event Player, Passive_Mod_Index, 20);
        Else;
        //__label_switch_4_5__:
        Set Player Variable(Event Player, Passive_Mod_Index, 25);
        Else;
        //__label_switch_4_6__:
        Set Player Variable(Event Player, Passive_Mod_Index, 30);
        Else;
        //__label_switch_4_7__:
        Set Player Variable(Event Player, Passive_Mod_Index, 35);
        Else;
        //__label_switch_4_8__:
        Set Player Variable(Event Player, Passive_Mod_Index, 40);
        Else;
        //__label_switch_4_9__:
        Set Player Variable(Event Player, Passive_Mod_Index, 45);
        Else;
        //__label_switch_4_10__:
        Set Player Variable(Event Player, Passive_Mod_Index, 50);
        Else;
        //__label_switch_4_default__:
        End;
        If(True);
        Skip(Value In Array(Array(22, 0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20), Add(1, Index Of Array Value(Array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10), Value In Array((Event Player).Page_Number, 1)))));
        //__label_switch_5_0__:
        Set Player Variable(Event Player, Active_Mod_Index, 0);
        Else;
        //__label_switch_5_1__:
        Set Player Variable(Event Player, Active_Mod_Index, 5);
        Else;
        //__label_switch_5_2__:
        Set Player Variable(Event Player, Active_Mod_Index, 10);
        Else;
        //__label_switch_5_3__:
        Set Player Variable(Event Player, Active_Mod_Index, 15);
        Else;
        //__label_switch_5_4__:
        Set Player Variable(Event Player, Active_Mod_Index, 20);
        Else;
        //__label_switch_5_5__:
        Set Player Variable(Event Player, Active_Mod_Index, 25);
        Else;
        //__label_switch_5_6__:
        Set Player Variable(Event Player, Active_Mod_Index, 30);
        Else;
        //__label_switch_5_7__:
        Set Player Variable(Event Player, Active_Mod_Index, 35);
        Else;
        //__label_switch_5_8__:
        Set Player Variable(Event Player, Active_Mod_Index, 40);
        Else;
        //__label_switch_5_9__:
        Set Player Variable(Event Player, Active_Mod_Index, 45);
        Else;
        //__label_switch_5_10__:
        Set Player Variable(Event Player, Active_Mod_Index, 50);
        Else;
        //__label_switch_5_default__:
        End;
        Wait(0.016, Ignore Condition);
        Set Player Variable(Event Player, Mod_Menu_Select, 1);
        For Player Variable(Event Player, Index, 0, 5, 1);
            Create In-World Text(Event Player, Update Every Frame(Custom String("{0}", If-Then-Else(Array Contains(Array(0, 1), (Event Player).Mod_Menu_Select), Value In Array(Global.Passive_Mod_Strings, Add((Event Player).Passive_Mod_Index, Evaluate Once((Event Player).Index))), Value In Array(Global.Active_Mod_Strings, Add((Event Player).Active_Mod_Index, Evaluate Once((Event Player).Index)))), Null, Null)), Add(Add(Eye Position(Event Player), Vector(0, Subtract(0.15, Multiply(Evaluate Once((Event Player).Index), 0.1)), 0)), Multiply(Facing Direction Of(Event Player), 1.5)), 1.35, Do Not Clip, Visible To Position String and Color, Update Every Frame(If-Then-Else(Compare((Event Player).Mod_Menu_Select, ==, 1), Value In Array((Event Player).Choice_Color_P, Evaluate Once((Event Player).Index)), Value In Array((Event Player).Choice_Color_A, Evaluate Once((Event Player).Index)))), Default Visibility);
            Set Player Variable At Index(Event Player, Mod_Menu_Text, Evaluate Once((Event Player).Index), Last Text ID);
            Wait(0.032, Ignore Condition);
        End;
        Wait(0.016, Ignore Condition);
        Create In-World Text(Event Player, Custom String("{0} | up {1}", Input Binding String(Button(Primary Fire)), Icon String(Arrow: Up), Null), Add(Subtract(Eye Position(Event Player), Vector(0, 0.4, 0)), Multiply(Facing Direction Of(Event Player), 1.5)), 1.25, Do Not Clip, Visible To Position and String, Color(White), Default Visibility);
        Set Player Variable At Index(Event Player, Mod_Menu_Text, 5, Last Text ID);
        Wait(0.016, Ignore Condition);
        Create In-World Text(Event Player, Custom String("       {0} | down {1}", Input Binding String(Button(Secondary Fire)), Icon String(Arrow: Down), Null), Add(Subtract(Eye Position(Event Player), Vector(0, 0.485, 0)), Multiply(Facing Direction Of(Event Player), 1.5)), 1.25, Do Not Clip, Visible To Position and String, Color(White), Default Visibility);
        Set Player Variable At Index(Event Player, Mod_Menu_Text, 6, Last Text ID);
        Wait(0.016, Ignore Condition);
        Create In-World Text(Event Player, Custom String("                                                                                             PAGE {0}/11", If-Then-Else(Compare((Event Player).Mod_Menu_Select, ==, 1), Add(First Of((Event Player).Page_Number), 1), Add(Value In Array((Event Player).Page_Number, 1), 1)), Null, Null), Add(Add(Eye Position(Event Player), Vector(0, 0.275, 0)), Multiply(Facing Direction Of(Event Player), 1.5)), 1.2, Do Not Clip, Visible To Position and String, Color(White), Default Visibility);
        Set Player Variable At Index(Event Player, Mod_Menu_Text, 7, Last Text ID);
        Wait(0.016, Ignore Condition);
        Create In-World Text(Event Player, Custom String("                                                                                                                         P{0}", Custom String("age nav: {0} | {1}", Custom String("{0} {1}", Icon String(Arrow: Left), Input Binding String(Button(Ultimate)), Null), Custom String("{0} {1}", Input Binding String(Button(Ability 2)), Icon String(Arrow: Right), Null), Null), Null, Null), Add(Add(Eye Position(Event Player), Vector(0, -0.35, 0)), Multiply(Facing Direction Of(Event Player), 1.5)), 0.8, Do Not Clip, Visible To Position and String, Color(White), Default Visibility);
        Set Player Variable At Index(Event Player, Mod_Menu_Text, 8, Last Text ID);
        Wait(0.016, Ignore Condition);
        Create In-World Text(Event Player, Custom String("{0} ABILITIES", If-Then-Else(Compare((Event Player).Mod_Menu_Select, ==, 1), Custom String("PASSIVE", Null, Null, Null), Custom String("ACTIVE", Null, Null, Null)), Null, Null), Add(Add(Eye Position(Event Player), Vector(0, 0.275, 0)), Multiply(Facing Direction Of(Event Player), 1.5)), 2, Do Not Clip, Visible To Position and String, If-Then-Else(Compare((Event Player).Mod_Menu_Select, ==, 1), Color(Green), Color(Orange)), Default Visibility);
        Set Player Variable At Index(Event Player, Mod_Menu_Text, 9, Last Text ID);
        Wait(0.016, Ignore Condition);
        Create In-World Text(Event Player, Custom String("Hold {0} to change heroes                                                                                                 {1}", Input Binding String(Button(Jump)), Custom String("                                  ", Null, Null, Null), Null), Add(Add(Eye Position(Event Player), Vector(0, -0.35, 0)), Multiply(Facing Direction Of(Event Player), 1.5)), 0.8, Do Not Clip, Visible To Position and String, Color(White), Default Visibility);
        Set Player Variable At Index(Event Player, Mod_Menu_Text, 10, Last Text ID);
        Wait(0.15, Ignore Condition);
    }
}

rule ("Navigate through pages") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        Array Contains(Array(1, 2), (Event Player).Mod_Menu_Select) == True;
        Or(Is Button Held(Event Player, Button(Ultimate)), Is Button Held(Event Player, Button(Ability 2))) == True;
        Or(Is Button Held(Event Player, Button(Secondary Fire)), Is Button Held(Event Player, Button(Primary Fire))) == False;
    }
    actions {
        "Next Page"
        If(Is Button Held(Event Player, Button(Ability 2)));
            If(And(Compare((Event Player).Mod_Menu_Select, ==, 1), Compare(First Of((Event Player).Page_Number), <, 11)));
                Play Effect(Event Player, Brigitte Repair Pack Armor Sound, Null, Event Player, 90);
                Modify Player Variable At Index(Event Player, Page_Number, 0, Add, 1);
                Set Player Variable(Event Player, Passive_Mod_Index, Multiply(5, First Of((Event Player).Page_Number)));
                Set Player Variable At Index(Event Player, Menu_Element, 0, 0);
                Set Player Variable At Index(Event Player, Choice_Color_P, 0, Color(Sky Blue));
                Set Player Variable At Index(Event Player, Choice_Color_P, 1, Color(Lime Green));
                Set Player Variable At Index(Event Player, Choice_Color_P, 2, Color(Lime Green));
                Set Player Variable At Index(Event Player, Choice_Color_P, 3, Color(Lime Green));
                Set Player Variable At Index(Event Player, Choice_Color_P, 4, Color(Lime Green));
            Else If(And(Compare((Event Player).Mod_Menu_Select, ==, 2), Compare(Value In Array((Event Player).Page_Number, 1), <, 11)));
                Play Effect(Event Player, Brigitte Repair Pack Armor Sound, Null, Event Player, 90);
                Modify Player Variable At Index(Event Player, Page_Number, 1, Add, 1);
                Set Player Variable(Event Player, Active_Mod_Index, Multiply(5, Value In Array((Event Player).Page_Number, 1)));
                Set Player Variable At Index(Event Player, Menu_Element, 1, 0);
                Set Player Variable At Index(Event Player, Choice_Color_A, 0, Color(Sky Blue));
                Set Player Variable At Index(Event Player, Choice_Color_A, 1, Color(Orange));
                Set Player Variable At Index(Event Player, Choice_Color_A, 2, Color(Orange));
                Set Player Variable At Index(Event Player, Choice_Color_A, 3, Color(Orange));
                Set Player Variable At Index(Event Player, Choice_Color_A, 4, Color(Orange));
            End;
        "Previous Page"
        Else If(Is Button Held(Event Player, Button(Ultimate)));
            If(And(Compare((Event Player).Mod_Menu_Select, ==, 1), Compare(First Of((Event Player).Page_Number), >, 0)));
                Play Effect(Event Player, Brigitte Repair Pack Armor Sound, Null, Event Player, 90);
                Modify Player Variable At Index(Event Player, Page_Number, 0, Subtract, 1);
                Set Player Variable(Event Player, Passive_Mod_Index, Multiply(5, First Of((Event Player).Page_Number)));
                Set Player Variable At Index(Event Player, Menu_Element, 0, 0);
                Set Player Variable At Index(Event Player, Choice_Color_P, 0, Color(Sky Blue));
                Set Player Variable At Index(Event Player, Choice_Color_P, 1, Color(Lime Green));
                Set Player Variable At Index(Event Player, Choice_Color_P, 2, Color(Lime Green));
                Set Player Variable At Index(Event Player, Choice_Color_P, 3, Color(Lime Green));
                Set Player Variable At Index(Event Player, Choice_Color_P, 4, Color(Lime Green));
            Else If(And(Compare((Event Player).Mod_Menu_Select, ==, 2), Compare(Value In Array((Event Player).Page_Number, 1), >, 0)));
                Play Effect(Event Player, Brigitte Repair Pack Armor Sound, Null, Event Player, 90);
                Modify Player Variable At Index(Event Player, Page_Number, 1, Subtract, 1);
                Set Player Variable(Event Player, Active_Mod_Index, Multiply(5, Value In Array((Event Player).Page_Number, 1)));
                Set Player Variable At Index(Event Player, Menu_Element, 1, 0);
                Set Player Variable At Index(Event Player, Choice_Color_A, 0, Color(Sky Blue));
                Set Player Variable At Index(Event Player, Choice_Color_A, 1, Color(Orange));
                Set Player Variable At Index(Event Player, Choice_Color_A, 2, Color(Orange));
                Set Player Variable At Index(Event Player, Choice_Color_A, 3, Color(Orange));
                Set Player Variable At Index(Event Player, Choice_Color_A, 4, Color(Orange));
    }
}

rule ("Navigate within a single page") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        Array Contains(Array(1, 2), (Event Player).Mod_Menu_Select) == True;
        Or(Is Button Held(Event Player, Button(Secondary Fire)), Is Button Held(Event Player, Button(Primary Fire))) == True;
        Or(Is Button Held(Event Player, Button(Ultimate)), Is Button Held(Event Player, Button(Ability 2))) == False;
    }
    actions {
        "Scroll Down"
        If(Is Button Held(Event Player, Button(Secondary Fire)));
            "if eventPlayer.Page_Number[0] < 9 else eventPlayer.Menu_Element[0] < 2):"
            If(And(Compare((Event Player).Mod_Menu_Select, ==, 1), Compare(First Of((Event Player).Menu_Element), <, 4)));
                Wait(0.032, Ignore Condition);
                Play Effect(Event Player, Soldier: 76 Sprint Start Sound, Null, Event Player, 85);
                Set Player Variable At Index(Event Player, Choice_Color_P, First Of((Event Player).Menu_Element), Color(Lime Green));
                Modify Player Variable At Index(Event Player, Menu_Element, 0, Add, 1);
                Set Player Variable At Index(Event Player, Choice_Color_P, First Of((Event Player).Menu_Element), Color(Sky Blue));
            End;
            "if eventPlayer.Page_Number[1] < 9 else eventPlayer.Menu_Element[1] < 3):"
            If(And(Compare((Event Player).Mod_Menu_Select, ==, 2), Compare(Value In Array((Event Player).Menu_Element, 1), <, 4)));
                Wait(0.032, Ignore Condition);
                Play Effect(Event Player, Soldier: 76 Sprint Start Sound, Null, Event Player, 85);
                Set Player Variable At Index(Event Player, Choice_Color_A, Value In Array((Event Player).Menu_Element, 1), Color(Orange));
                Modify Player Variable At Index(Event Player, Menu_Element, 1, Add, 1);
                Set Player Variable At Index(Event Player, Choice_Color_A, Value In Array((Event Player).Menu_Element, 1), Color(Sky Blue));
            End;
        "Scroll Up"
        Else If(Is Button Held(Event Player, Button(Primary Fire)));
            If(And(Compare((Event Player).Mod_Menu_Select, ==, 1), Compare(First Of((Event Player).Menu_Element), >, 0)));
                Wait(0.032, Ignore Condition);
                Play Effect(Event Player, Soldier: 76 Sprint Start Sound, Null, Event Player, 85);
                Set Player Variable At Index(Event Player, Choice_Color_P, First Of((Event Player).Menu_Element), Color(Lime Green));
                Modify Player Variable At Index(Event Player, Menu_Element, 0, Subtract, 1);
                Set Player Variable At Index(Event Player, Choice_Color_P, First Of((Event Player).Menu_Element), Color(Sky Blue));
            End;
            If(And(Compare((Event Player).Mod_Menu_Select, ==, 2), Compare(Value In Array((Event Player).Menu_Element, 1), >, 0)));
                Wait(0.032, Ignore Condition);
                Play Effect(Event Player, Soldier: 76 Sprint Start Sound, Null, Event Player, 85);
                Set Player Variable At Index(Event Player, Choice_Color_A, Value In Array((Event Player).Menu_Element, 1), Color(Orange));
                Modify Player Variable At Index(Event Player, Menu_Element, 1, Subtract, 1);
                Set Player Variable At Index(Event Player, Choice_Color_A, Value In Array((Event Player).Menu_Element, 1), Color(Sky Blue));
    }
}

rule ("Close out of Mod Menu") {
    event {
        Ongoing - Each Player;
        All;
        All;
    }
    conditions {
        Is Button Held(Event Player, Button(Melee)) == True;
        Array Contains(Array(1, 2), (Event Player).Mod_Menu_Select) == True;
        Or(Not(Is Button Held(Event Player, Button(Secondary Fire))), Is Button Held(Event Player, Button(Primary Fire))) == True;
        Or(Not(Is Button Held(Event Player, Button(Ultimate))), Is Button Held(Event Player, Button(Ability 2))) == True;
    }
    actions {
        "Close passive menu, move to active menu"
        If(Compare((Event Player).Mod_Menu_Select, ==, 1));
            "if eventPlayer.Page_Number[0] != 8:"
            Set Player Variable(Event Player, Passive_Mod, Add(First Of((Event Player).Menu_Element), Multiply(5, First Of((Event Player).Page_Number))));
            "else:\r\neventPlayer.Passive_Mod = 40 + eventPlayer.Menu_Element[0]"
            Wait(0.032, Ignore Condition);
            "Get a random mod"
            If(Compare((Event Player).Passive_Mod, ==, 1));
                Set Player Variable(Event Player, Index, Random Integer(2, 52));
                If(And(Compare(Hero Of(Event Player), ==, Hero(Echo)), Compare((Event Player).Index, ==, 26)));
                    Set Player Variable(Event Player, Passive_Mod, 28);
                End;
                Wait(0.25, Ignore Condition);
                Set Player Variable(Event Player, Passive_Mod, (Event Player).Index);
            End;
            Wait(0.032, Ignore Condition);
            Set Player Variable(Event Player, Mod_Menu_Select, 2);
            Play Effect(Event Player, Buff Impact Sound, Null, Position Of(Event Player), 120);
            Play Effect(All Players(All Teams), Good Pickup Effect, Color(Lime Green), Add(Eye Position(Event Player), Facing Direction Of(Event Player)), 1);
        "Close active menu, fully exit"
        Else If(Compare((Event Player).Mod_Menu_Select, ==, 2));
            "if eventPlayer.Page_Number[1] != 8:"
            Set Player Variable(Event Player, Active_Mod, Add(Value In Array((Event Player).Menu_Element, 1), Multiply(5, Value In Array((Event Player).Page_Number, 1))));
            "else:\r\neventPlayer.Active_Mod = 40 + eventPlayer.Menu_Element[1]\r\nGet a random mod"
            If(Compare((Event Player).Active_Mod, ==, 1));
                Set Player Variable(Event Player, Index, Random Integer(2, 52));
                Wait(0.25, Ignore Condition);
                Set Player Variable(Event Player, Active_Mod, (Event Player).Index);
            End;
            Wait(0.032, Ignore Condition);
            If(Compare(Value In Array((Event Player).Menu_Misc, 5), ==, 0));
                Set Player Variable At Index(Event Player, Menu_Misc, 5, 1);
            End;
            "Incompatible mods"
            If(Or(Or(Or(Or(And(Compare((Event Player).Passive_Mod, ==, 18), Array Contains(Array(19, 23, 24), (Event Player).Active_Mod)), And(Compare((Event Player).Passive_Mod, ==, 39), Array Contains(Array(2, 4), (Event Player).Active_Mod))), And(Compare(Hero Of(Event Player), ==, Hero(Echo)), Compare((Event Player).Passive_Mod, ==, 27))), And(Compare((Event Player).Passive_Mod, ==, 29), Compare((Event Player).Active_Mod, ==, 22))), And(Compare((Event Player).Passive_Mod, ==, 44), Array Contains(Array(24, 25, 32, 36), (Event Player).Active_Mod))));
                Play Effect(Event Player, Debuff Impact Sound, Null, Position Of(Event Player), 100);
                Small Message(Event Player, Custom String("Incompatible mods! Choose again.", Null, Null, Null));
                Set Player Variable(Event Player, Mod_Menu_Select, 1);
                Wait(0.032, Ignore Condition);
            Else;
                Enable Hero HUD(Event Player);
                Play Effect(Event Player, Buff Impact Sound, Null, Position Of(Event Player), 120);
                Play Effect(All Players(All Teams), Good Pickup Effect, Color(Orange), Add(Eye Position(Event Player), Facing Direction Of(Event Player)), 1);
                Wait(0.064, Ignore Condition);
                Heal(Event Player, Null, 10000);
                For Player Variable(Event Player, Index, 0, Count Of((Event Player).Mod_Menu_Text), 1);
                    Destroy In-World Text(Value In Array((Event Player).Mod_Menu_Text, (Event Player).Index));
                End;
                Wait(0.016, Ignore Condition);
                For Player Variable(Event Player, Index, 0, Count Of((Event Player).Menu_Misc), 1);
                    Destroy Effect(Value In Array((Event Player).Menu_Misc, (Event Player).Index));
                End;
                Stop Facing(Event Player);
                Allow Button(Event Player, Button(Primary Fire));
                Allow Button(Event Player, Button(Secondary Fire));
                Allow Button(Event Player, Button(Interact));
                Allow Button(Event Player, Button(Reload));
                If(Global.Intermission_In_Progress);
                    Small Message(Event Player, Custom String("{0} {1}", Value In Array(Global.Intermission_Array, 10), Value In Array(Global.Intermission_Array, 1), Null));
                Else;
                    Clear Status(Event Player, Rooted);
                    Clear Status(Event Player, Phased Out);
                    Clear Status(Event Player, Hacked);
                    If(Not(Array Contains(Array(0, 12, 20, 22, 25, 32, 34), (Event Player).Active_Mod)));
                        Set Player Variable(Event Player, Cd_Visible_To, Event Player);
                    End;
                End;
                Wait(0.1, Ignore Condition);
                Clear Status(Event Player, Hacked);
                Wait(1, Ignore Condition);
                Set Player Variable(Event Player, Mod_Menu_Select, 3);
    }
}

rule ("Don't remove score from suiciding players") {
    event {
        Player Died;
        All;
        All;
    }
    conditions {
        Victim == Attacker;
    }
    actions {
        Modify Team Score(Team Of(Event Player), 1);
    }
}

rule ("Mods - Remove FX/Etc. on Death") {
    event {
        Subroutine;
        RemoveFXOnDeath;
    }
    actions {
        Destroy Effect((Event Player).Passive_Mod_FX);
        Destroy Icon((Event Player).Passive_Mod_FX);
        Destroy Effect((Event Player).Passive_Mod_FX_Array);
        Destroy Icon((Event Player).Passive_Mod_FX_Array);
        Destroy Effect((Event Player).Active_Mod_FX);
        Destroy Icon((Event Player).Active_Mod_FX);
        Destroy Effect((Event Player).Active_Mod_FX_Array);
        Destroy Icon((Event Player).Active_Mod_FX_Array);
        Destroy In-World Text((Event Player).Mod_Menu_Text);
        Allow Button(Event Player, Button(Reload));
        Allow Button(Event Player, Button(Interact));
        Allow Button(Event Player, Button(Secondary Fire));
        If(Compare((Event Player).Passive_Mod, ==, 26));
            Set Max Health(Event Player, 75);
        Else;
            Set Max Health(Event Player, 100);
        End;
        Remove All Health Pools From Player(Event Player);
    }
}

rule ("Passive Mods - Smol Mode (Deactivate) 2") {
    event {
        Subroutine;
        SmolModeDeath;
    }
    actions {
        Start Scaling Player(Event Player, 1, True);
        Set Player Variable(Event Player, Passive_Mod_Skill_Toggle, 0);
        Set Move Speed(Event Player, 100);
        Start Modifying Hero Voice Lines(Event Player, 1, True);
        Set Max Health(Event Player, 100);
        Set Damage Dealt(Event Player, 100);
    }
}

rule ("Passive Mods - Corpse Explosion (Active)") {
    event {
        Subroutine;
        CorpseExplosion;
    }
    actions {
        Play Effect(All Players(All Teams), Sigma Hypersphere Implosion Sound, Team Of(Event Player), Position Of(Event Player), 500);
        Wait(0.4, Ignore Condition);
        Play Effect(All Players(All Teams), Sigma Hypersphere Implosion Sound, Team Of(Event Player), Position Of(Event Player), 1000);
        Wait(0.25, Ignore Condition);
        Play Effect(All Players(All Teams), Sigma Hypersphere Implosion Effect, Team Of(Event Player), Position Of(Event Player), 2);
        Wait(0.116, Ignore Condition);
        Play Effect(All Players(All Teams), Bastion Tank Cannon Explosion Effect, Team Of(Event Player), Position Of(Event Player), 1);
        Play Effect(All Players(All Teams), Bastion Tank Cannon Explosion Sound, Team Of(Event Player), Position Of(Event Player), 200);
        Set Status(Players Within Radius(Event Player, 7, Opposite Team Of(Team Of(Event Player)), Surfaces And Enemy Barriers), Event Player, Knocked Down, 2);
        Damage(Players Within Radius(Event Player, 7, Opposite Team Of(Team Of(Event Player)), Surfaces And Enemy Barriers), Event Player, Multiply(Max Health(Event Player), 0.6));
    }
}

rule ("Passive Mods - Revenge (Active)") {
    event {
        Subroutine;
        Revenge;
    }
    actions {
        Wait(1.25, Ignore Condition);
        Resurrect(Event Player);
        Teleport(Event Player, World Vector Of(Vector(0, 0.25, -4), Attacker, Rotation And Translation));
        Play Effect(All Players(All Teams), Bad Pickup Effect, Color(Red), Position Of(Event Player), 1);
        Play Effect(All Players(All Teams), McCree Flashbang Explosion Sound, Null, Position Of(Event Player), 200);
        Set Facing(Event Player, Direction Towards(Event Player, Attacker), To World);
        Wait(24, Ignore Condition);
    }
}

rule ("Active Mods - Crouch for Zero Gravity (Deactivate) 2") {
    event {
        Subroutine;
        ZeroGDeath;
    }
    actions {
        Set Gravity(Event Player, 100);
        Set Player Variable(Event Player, Active_Mod_Skill_Toggle, 0);
    }
}

rule ("Active Mods - Colossus (Gravity Mods)") {
    event {
        Subroutine;
        ColossusDeath;
    }
    actions {
        Wait(3, Ignore Condition);
        Set Gravity(Event Player, 50);
    }
}

rule ("Passive Mods - Killstreak (Death)") {
    event {
        Subroutine;
        KillstreakDeath;
    }
    actions {
        Wait(2, Ignore Condition);
        Set Damage Dealt(Event Player, 75);
        Set Max Health(Event Player, 75);
        Set Move Speed(Event Player, 75);
        Set Player Variable(Event Player, Num_2, 0);
        Set Player Variable At Index(Event Player, Num_3, 0, Custom String("0", Null, Null, Null));
        Set Player Variable At Index(Event Player, Num_3, 1, Custom String("", Null, Null, Null));
        Set Player Variable At Index(Event Player, Num_3, 2, Custom String("", Null, Null, Null));
        Wait Until(Or(Is Alive(Event Player), Compare((Event Player).Mod_Menu_Select, !=, 3)), 9999);
        Abort If(Compare((Event Player).Mod_Menu_Select, !=, 3));
        Set Max Health(Event Player, 75);
        Set Damage Dealt(Event Player, 75);
        Set Healing Received(Event Player, 75);
    }
}

rule ("Passive Mods - Null Zone (Death)") {
    event {
        Subroutine;
        NullZoneDeath;
    }
    actions {
        Small Message(Event Player, Custom String("You died.", Null, Null, Null));
        If(Compare(First Of((Event Player).Num_0), <, 3));
            Small Message(Event Player, Custom String("In the first IF.", Null, Null, Null));
            If(Compare(First Of((Event Player).Num_0), ==, 3));
                Small Message(Event Player, Custom String("Num_0[0] == 3", Null, Null, Null));
                Set Player Variable At Index(Event Player, Num_0, 0, 0);
            End;
            If(Compare(First Of((Event Player).Num_0), ==, 0));
                Small Message(Event Player, Custom String("Num_0[0] == 0", Null, Null, Null));
                If(Entity Exists(First Of((Event Player).Passive_Mod_FX_Array)));
                    Destroy Effect(First Of((Event Player).Passive_Mod_FX_Array));
                    Destroy Effect(Value In Array((Event Player).Passive_Mod_FX_Array, 1));
                    Destroy Effect(Value In Array((Event Player).Passive_Mod_FX_Array, 2));
                    Wait(0.016, Ignore Condition);
                End;
                Wait(2, Ignore Condition);
                Small Message(Event Player, Custom String("Null_Zone[0]", Null, Null, Null));
                Set Player Variable At Index(Event Player, Null_Zone, 0, Position Of(Event Player));
                Chase Player Variable Over Time(Event Player, Num_2, 2.5, 3, Destination and Duration);
                Set Player Variable At Index(Event Player, Num_0, 1, (Event Player).Num_2);
                Create Effect(All Players(Opposite Team Of(Team Of(Event Player))), Cloud, Color(Black), First Of((Event Player).Null_Zone), Value In Array((Event Player).Num_0, 1), Visible To Position and Radius);
                Set Player Variable At Index(Event Player, Passive_Mod_FX_Array, 0, Last Created Entity);
                Create Effect(All Players(Opposite Team Of(Team Of(Event Player))), Ring, Color(Black), Add(First Of((Event Player).Null_Zone), Vector(0, 0.5, 0)), Value In Array((Event Player).Num_0, 1), Visible To Position and Radius);
                Set Player Variable At Index(Event Player, Passive_Mod_FX_Array, 1, Last Created Entity);
                Create Icon(All Players(Opposite Team Of(Team Of(Event Player))), First Of((Event Player).Null_Zone), Warning, Visible To and Position, Color(Black), False);
                Set Player Variable At Index(Event Player, Passive_Mod_FX_Array, 2, Last Created Entity);
                Wait Until(Compare((Event Player).Num_2, ==, 2.5), 9999);
                Stop Chasing Player Variable(Event Player, Num_2);
                Set Player Variable(Event Player, Num_2, 0);
                Modify Player Variable At Index(Event Player, Num_0, 0, Add, 1);
            Else If(Compare(First Of((Event Player).Num_0), ==, 1));
                Small Message(Event Player, Custom String("Num_0[0] == 1", Null, Null, Null));
                If(Entity Exists(Value In Array((Event Player).Passive_Mod_FX_Array, 3)));
                    Destroy Effect(Value In Array((Event Player).Passive_Mod_FX_Array, 3));
                    Destroy Effect(Value In Array((Event Player).Passive_Mod_FX_Array, 4));
                    Destroy Effect(Value In Array((Event Player).Passive_Mod_FX_Array, 5));
                    Wait(0.016, Ignore Condition);
                End;
                Wait(2, Ignore Condition);
                Small Message(Event Player, Custom String("Null_Zone[1]", Null, Null, Null));
                Set Player Variable At Index(Event Player, Null_Zone, 1, Position Of(Event Player));
                Chase Player Variable Over Time(Event Player, Num_2, 2.5, 3, Destination and Duration);
                Set Player Variable At Index(Event Player, Num_0, 2, (Event Player).Num_2);
                Create Effect(All Players(Opposite Team Of(Team Of(Event Player))), Cloud, Color(Black), Value In Array((Event Player).Null_Zone, 1), Value In Array((Event Player).Num_0, 2), Visible To Position and Radius);
                Set Player Variable At Index(Event Player, Passive_Mod_FX_Array, 3, Last Created Entity);
                Create Effect(All Players(Opposite Team Of(Team Of(Event Player))), Ring, Color(Black), Add(Value In Array((Event Player).Null_Zone, 1), Vector(0, 0.5, 0)), Value In Array((Event Player).Num_0, 2), Visible To Position and Radius);
                Set Player Variable At Index(Event Player, Passive_Mod_FX_Array, 4, Last Created Entity);
                Create Icon(All Players(Opposite Team Of(Team Of(Event Player))), Value In Array((Event Player).Null_Zone, 1), Warning, Visible To and Position, Color(Black), False);
                Set Player Variable At Index(Event Player, Passive_Mod_FX_Array, 5, Last Created Entity);
                Wait Until(Compare((Event Player).Num_2, ==, 2.5), 9999);
                Stop Chasing Player Variable(Event Player, Num_2);
                Set Player Variable(Event Player, Num_2, 0);
                Modify Player Variable At Index(Event Player, Num_0, 0, Add, 1);
            Else If(Compare(First Of((Event Player).Num_0), ==, 2));
                Small Message(Event Player, Custom String("Num_0[0] == 2", Null, Null, Null));
                If(Entity Exists(Value In Array((Event Player).Passive_Mod_FX_Array, 6)));
                    Destroy Effect(Value In Array((Event Player).Passive_Mod_FX_Array, 6));
                    Destroy Effect(Value In Array((Event Player).Passive_Mod_FX_Array, 7));
                    Destroy Effect(Value In Array((Event Player).Passive_Mod_FX_Array, 8));
                    Wait(0.016, Ignore Condition);
                End;
                Wait(2, Ignore Condition);
                Small Message(Event Player, Custom String("Null_Zone[2]", Null, Null, Null));
                Set Player Variable At Index(Event Player, Null_Zone, 2, Position Of(Event Player));
                Chase Player Variable Over Time(Event Player, Num_2, 2.5, 3, Destination and Duration);
                Set Player Variable At Index(Event Player, Num_0, 3, (Event Player).Num_2);
                Create Effect(All Players(Opposite Team Of(Team Of(Event Player))), Cloud, Color(Black), Value In Array((Event Player).Null_Zone, 2), Value In Array((Event Player).Num_0, 3), Visible To Position and Radius);
                Set Player Variable At Index(Event Player, Passive_Mod_FX_Array, 6, Last Created Entity);
                Create Effect(All Players(Opposite Team Of(Team Of(Event Player))), Ring, Color(Black), Add(Value In Array((Event Player).Null_Zone, 2), Vector(0, 0.5, 0)), Value In Array((Event Player).Num_0, 3), Visible To Position and Radius);
                Set Player Variable At Index(Event Player, Passive_Mod_FX_Array, 7, Last Created Entity);
                Create Icon(All Players(Opposite Team Of(Team Of(Event Player))), Value In Array((Event Player).Null_Zone, 2), Warning, Visible To and Position, Color(Black), False);
                Set Player Variable At Index(Event Player, Passive_Mod_FX_Array, 8, Last Created Entity);
                Wait Until(Compare((Event Player).Num_2, ==, 2.5), 9999);
                Stop Chasing Player Variable(Event Player, Num_2);
                Set Player Variable(Event Player, Num_2, 0);
                Modify Player Variable At Index(Event Player, Num_0, 0, Add, 1);
    }
}

rule ("Mods PlayerDied Events") {
    event {
        Player Died;
        All;
        All;
    }
    conditions {
        (Event Player).Mod_Menu_Select == 3;
    }
    actions {
        If(Compare((Event Player).Active_Mod, ==, 19));
            Call Subroutine(ZeroGDeath);
        Else If(Compare((Event Player).Passive_Mod, ==, 45));
            Start Rule(NullZoneDeath, Do Nothing);
        Else If(And(Compare((Event Player).Active_Mod, ==, 24), Compare((Event Player).Passive_Mod, ==, 4)));
            Start Rule(ColossusDeath, Do Nothing);
        End;
        If(Compare((Event Player).Passive_Mod, ==, 18));
            Call Subroutine(SmolModeDeath);
        Else If(Compare((Event Player).Passive_Mod, ==, 21));
            Call Subroutine(CorpseExplosion);
        Else If(And(And(Compare((Event Player).Passive_Mod, ==, 22), Compare(Attacker, !=, Victim)), Compare(Filtered Array(All Players(All Teams), Compare(Current Array Element, ==, Attacker)), ==, True)));
            Start Rule(Revenge, Do Nothing);
        Else If(Compare((Event Player).Passive_Mod, ==, 26));
            Start Rule(KillstreakDeath, Do Nothing);
        End;
        Wait(1, Ignore Condition);
        Call Subroutine(RemoveFXOnDeath);
    }
}

rule ("Passive Mods - Immolation Aura (Did Damage)") {
    event {
        Subroutine;
        Immolation;
    }
    actions {
        Damage(Event Player, Null, 0.001);
        Wait(1, Ignore Condition);
    }
}

rule ("Passive Mods - Ambush (Active)") {
    event {
        Subroutine;
        Ambush;
    }
    actions {
        Kill(Victim, Attacker);
    }
}

rule ("Passive Mods - Mastery (Damage Dealt)") {
    event {
        Subroutine;
        Mastery;
    }
    actions {
        If(Or(Or(Or(And(Array Contains(Array(Hero(Doomfist), Hero(Echo), Hero(Soldier: 76), Hero(Lúcio)), Hero Of(Event Player)), Compare(Event Ability, ==, Button(Secondary Fire))), Compare(Event Ability, ==, Button(Ability 1))), Compare(Event Ability, ==, Button(Ability 2))), Compare(Event Ability, ==, Button(Ultimate))));
            Damage(Victim, Attacker, Multiply(Event Damage, 0.8));
            Wait(0.016, Ignore Condition);
    }
}

rule ("Passive Mods - Knockout (Active)") {
    event {
        Subroutine;
        Knockout;
    }
    actions {
        Set Status(Victim, Null, Asleep, 3);
        Wait(8, Ignore Condition);
    }
}

rule ("Passive Mods - Boxer (Active 2)") {
    event {
        Subroutine;
        BoxerDealtDmg;
    }
    actions {
        Damage(Victim, Event Player, Multiply(Event Damage, 4));
        Wait(0.4, Ignore Condition);
    }
}

rule ("Active Mods 14 - Devour (Active)") {
    event {
        Subroutine;
        Devour;
    }
    actions {
        Wait(0.032, Ignore Condition);
        If(Compare((Event Player).Mod_Menu_Select, !=, 3));
            Set Player Variable(Event Player, Cd_Visible_To, Array(Null));
        End;
        Set Player Variable(Event Player, Cd_Color, Color(Yellow));
        Set Player Variable(Event Player, Cd_Visible_To, Event Player);
        Set Player Variable(Event Player, Cooldown_String_1, Custom String("Active", Null, Null, Null));
        Set Player Variable(Event Player, Cooldown_Chase, Ability Icon String(Hero(Soldier: 76), Button(Ability 1)));
        Wait(0.032, Ignore Condition);
        Play Effect(All Players(All Teams), Ring Explosion, Color(Red), World Vector Of(Vector(0, 0.5, 1.5), Event Player, Rotation And Translation), 5);
        Set Status(Victim, Event Player, Stunned, Add(2.53, Multiply((Event Player).Optimize, 0.5)));
        Wait(0.03, Ignore Condition);
        Set Status(Victim, Event Player, Phased Out, Add(2.5, Multiply((Event Player).Optimize, 0.5)));
        Set Invisible(Victim, All);
        Teleport(Victim, Nearest Walkable Position(Victim));
        Start Camera(Victim, Ray Cast Hit Position(Event Player, Add(Add(Add(Event Player, World Vector Of(Vector(-0.3, 0, 0.3), Event Player, Rotation)), Multiply(Up, 1.5)), Multiply(Facing Direction Of(Event Player), -2.5)), Null, Event Player, False), Add(Event Player, Multiply(Facing Direction Of(Event Player), 1000)), 40);
        Wait(Add(2.5, Multiply((Event Player).Optimize, 0.5)), Ignore Condition);
        Teleport(Victim, World Vector Of(Vector(0, 0.25, 1.5), Event Player, Rotation And Translation));
        Set Invisible(Victim, None);
        Set Player Variable(Victim, Third_Person_Camera_Toggle, 0);
        Stop Camera(Victim);
        Set Player Variable(Event Player, Cooldown_Chase, Subtract(8, (Event Player).Optimize));
        Set Player Variable(Event Player, Cd_Color, Custom Color(180, 180, 180, 255));
        Set Player Variable(Event Player, Cooldown_String_1, Custom String("Cooldown:", Null, Null, Null));
        Chase Player Variable At Rate(Event Player, Cooldown_Chase, 0, 1, Destination and Rate);
        Wait Until(Or(Compare((Event Player).Cooldown_Chase, ==, 0), Compare((Event Player).Mod_Menu_Select, !=, 3)), 9999);
        If(Compare((Event Player).Mod_Menu_Select, !=, 3));
            Set Player Variable(Event Player, Cd_Visible_To, Array(Null));
        End;
        Stop Chasing Player Variable(Event Player, Cooldown_Chase);
        Wait(0.016, Ignore Condition);
        Set Player Variable(Event Player, Cd_Color, Color(Green));
        Set Player Variable(Event Player, Cooldown_String_1, Custom String("Ready", Null, Null, Null));
        Set Player Variable(Event Player, Cooldown_Chase, Icon String(Checkmark));
    }
}

rule ("Passive Mods - Infection") {
    event {
        Subroutine;
        Infection;
    }
    actions {
        Set Player Variable(Victim, Current_Hero, Hero Of(Victim));
        Start Forcing Player To Be Hero(Victim, Hero Of(Attacker));
        Wait(0.25, Ignore Condition);
        Stop Forcing Player To Be Hero(Victim);
        If(Is Alive(Victim));
            Wait(15, Ignore Condition);
            Start Forcing Player To Be Hero(Victim, (Victim).Current_Hero);
            Wait(0.25, Ignore Condition);
            Stop Forcing Player To Be Hero(Victim);
        Else;
            Wait(6, Ignore Condition);
    }
}

rule ("Passive Mods - Boxer (Brig)") {
    event {
        Subroutine;
        BoxerBrig;
    }
    actions {
        Damage(Victim, Event Player, Multiply(Event Damage, 4));
        Wait(0.4, Ignore Condition);
    }
}

rule ("Passive Mods - Boxer (Rein)") {
    event {
        Subroutine;
        BoxerRein;
    }
    actions {
        Damage(Victim, Event Player, Multiply(Event Damage, 4));
        Wait(0.5, Ignore Condition);
    }
}

rule ("Active Mods - Sneak (Deactivate 3)") {
    event {
        Subroutine;
        SneakDealtDmg;
    }
    actions {
        Set Invisible(Event Player, None);
        Set Player Variable(Event Player, Is_Visible, True);
        Wait(0.116, Ignore Condition);
        Set Crouch Enabled(Event Player, False);
        Wait(0.2, Ignore Condition);
        Set Crouch Enabled(Event Player, True);
        Wait(0.116, Ignore Condition);
        Set Player Variable(Event Player, Active_Mod_Skill_Toggle, 0);
    }
}

rule ("Passive Mods - Disruption (Active)") {
    event {
        Subroutine;
        Disruption;
    }
    actions {
        Set Status(Victim, Event Player, Hacked, 1);
        Wait(4.5, Ignore Condition);
    }
}

rule ("Passive Mods - Lifesteal") {
    event {
        Subroutine;
        Lifesteal;
    }
    actions {
        Heal(Attacker, Attacker, Multiply(Event Damage, 0.5));
        Create Effect(All Players(All Teams), Cloud, Color(Red), Event Player, 1, Visible To Position and Radius);
        Set Player Variable(Event Player, Passive_Mod_FX, Last Created Entity);
        Wait(0.25, Ignore Condition);
        Destroy Effect((Event Player).Passive_Mod_FX);
    }
}

rule ("Active Mods 29 - ORA ORA!") {
    event {
        Subroutine;
        OraOra;
    }
    actions {
        Wait(0.032, Ignore Condition);
        If(Compare((Event Player).Mod_Menu_Select, !=, 3));
            Set Player Variable(Event Player, Cd_Visible_To, Array(Null));
        End;
        Set Player Variable(Event Player, Cd_Color, Color(Yellow));
        Set Player Variable(Event Player, Cd_Visible_To, Event Player);
        Set Player Variable(Event Player, Cooldown_String_1, Custom String("Active", Null, Null, Null));
        Set Player Variable(Event Player, Cooldown_Chase, Ability Icon String(Hero(Soldier: 76), Button(Ability 1)));
        Wait(0.032, Ignore Condition);
        Set Player Variable(Attacker, OraOra, True);
        Set Player Variable(Victim, OraOra, True);
        Set Player Variable(Attacker, Player_Position, Position Of(Attacker));
        Set Player Variable(Attacker, Target_Position, Position Of(Victim));
        Start Forcing Player Position(Attacker, (Attacker).Player_Position, False);
        Start Forcing Player Position(Victim, (Attacker).Target_Position, False);
        Set Ability Cooldown(Attacker, Button(Melee), 0);
        Start Facing(Attacker, Direction Towards(Eye Position(Attacker), Eye Position(Victim)), 2000, To World, Direction and Turn Rate);
        Start Facing(Victim, Direction Towards(Eye Position(Victim), Eye Position(Attacker)), 2000, To World, Direction and Turn Rate);
        Create Effect(All Players(All Teams), Wrecking Ball Adaptive Shield Target Effect, Color(White), Eye Position(Attacker), 1, Position and Radius);
        Set Player Variable(Attacker, Active_Mod_FX, Last Created Entity);
        Wait(0.3, Ignore Condition);
        Set Status(Attacker, Null, Unkillable, Add(2.25, Multiply(1.5, (Event Player).Optimize)));
        Start Damage Modification(Victim, Attacker, 75, Receivers Damagers and Damage Percent);
        Set Player Variable(Attacker, Active_Index_2, Last Damage Modification ID);
        Communicate(Attacker, Attacking);
        For Player Variable(Attacker, Active_Index, 0, Add(20, Multiply((Event Player).Optimize, 4)), 1);
            Set Ability Cooldown(Attacker, Button(Melee), 0);
            Start Holding Button(Attacker, Button(Melee));
            Wait(0.016, Ignore Condition);
            Cancel Primary Action(Attacker);
            Stop Holding Button(Attacker, Button(Melee));
            Play Effect(All Players(All Teams), Doomfist Rising Uppercut Impact Effect, Team Of(Attacker), Eye Position(Attacker), 1);
            Play Effect(All Players(All Teams), Doomfist Rising Uppercut Impact Sound, Team Of(Attacker), Eye Position(Attacker), 200);
            Set Status(Victim, Attacker, Stunned, 0.25);
            If(Or(Is Dead(Victim), Is Dead(Attacker)));
                Break;
            End;
            Wait(0.11, Ignore Condition);
        End;
        Stop Damage Modification((Attacker).Active_Index_2);
        Stop Facing(Attacker);
        Stop Facing(Victim);
        Stop Forcing Player Position(Attacker);
        Stop Forcing Player Position(Victim);
        Wait(0.1, Ignore Condition);
        Play Effect(All Players(All Teams), Bad Explosion, Team Of(Attacker), Attacker, 3);
        Play Effect(All Players(All Teams), Doomfist Meteor Strike Impact Sound, Team Of(Attacker), Position Of(Attacker), 200);
        Apply Impulse(Victim, Vector(0, 0.4, -1), 30, To Player, Cancel Contrary Motion);
        Wait(0.016, Ignore Condition);
        Stop Facing(Attacker);
        Stop Facing(Victim);
        Stop Forcing Player Position(Attacker);
        Stop Forcing Player Position(Victim);
        Set Player Variable(Attacker, OraOra, False);
        Set Player Variable(Victim, OraOra, False);
        Destroy Effect((Attacker).Active_Mod_FX);
        Wait Until(Compare(Altitude Of(Victim), <=, 1), 10);
        Play Effect(All Players(All Teams), Sigma Accretion Impact Effect, Null, Position Of(Victim), 1);
        Play Effect(All Players(All Teams), Sigma Accretion Impact Sound, Null, Position Of(Victim), 100);
        Set Status(Victim, Attacker, Knocked Down, 1);
        Damage(Victim, Attacker, 30);
        Set Player Variable(Event Player, Cooldown_Chase, Subtract(10, (Event Player).Optimize));
        Set Player Variable(Event Player, Cd_Color, Custom Color(180, 180, 180, 255));
        Set Player Variable(Event Player, Cooldown_String_1, Custom String("Cooldown:", Null, Null, Null));
        Chase Player Variable At Rate(Event Player, Cooldown_Chase, 0, 1, Destination and Rate);
        Wait Until(Or(Compare((Event Player).Cooldown_Chase, ==, 0), Compare((Event Player).Mod_Menu_Select, !=, 3)), 9999);
        If(Compare((Event Player).Mod_Menu_Select, !=, 3));
            Set Player Variable(Event Player, Cd_Visible_To, Array(Null));
        End;
        Stop Chasing Player Variable(Event Player, Cooldown_Chase);
        Wait(0.016, Ignore Condition);
        Set Player Variable(Event Player, Cd_Color, Color(Green));
        Set Player Variable(Event Player, Cooldown_String_1, Custom String("Ready", Null, Null, Null));
        Set Player Variable(Event Player, Cooldown_Chase, Icon String(Checkmark));
    }
}

rule ("Active Mod 32 - Bouncing Blades (Damage dealt)") {
    event {
        Subroutine;
        BouncingBlade;
    }
    actions {
        If(Compare(Count Of((Event Player).Other_Players), ==, (Event Player).Active_Index));
            Set Player Variable(Event Player, Victim_Chain, Players Within Radius(Victim, 25, Team Of(Victim), Off));
            Set Player Variable(Event Player, Active_Affected_Players, Sorted Array((Event Player).Victim_Chain, Distance Between(Value In Array((Event Player).Victim_Chain, Current Array Element), Value In Array((Event Player).Victim_Chain, Add(Current Array Element, 1)))));
            Set Player Variable(Event Player, Active_Affected_Players, Remove From Array((Event Player).Active_Affected_Players, Null));
            Set Player Variable(Event Player, Active_Index, Count Of((Event Player).Active_Affected_Players));
            Set Player Variable(Event Player, Other_Players, Empty Array);
            Wait(0.25, Ignore Condition);
        End;
        Set Player Variable(Event Player, Active_Affected_Players, Remove From Array((Event Player).Active_Affected_Players, (Event Player).Other_Players));
        If(Compare(Count Of((Event Player).Active_Affected_Players), >, 0));
            Set Player Variable(Event Player, Mod_Effect_Target, First Of((Event Player).Active_Affected_Players));
            Destroy Effect((Event Player).Active_Mod_FX);
            Play Effect(All Players(All Teams), Bad Explosion, Color(Red), Victim, 1);
            Play Effect(All Players(All Teams), Bad Explosion, Color(Red), (Event Player).Mod_Effect_Target, 1);
            Create Beam Effect(All Players(All Teams), Omnic Slicer Beam, Victim, (Event Player).Mod_Effect_Target, Null, Visible To Position and Radius);
            Set Player Variable(Event Player, Active_Mod_FX, Last Created Entity);
            Modify Player Variable(Event Player, Other_Players, Append To Array, (Event Player).Mod_Effect_Target);
            Damage((Event Player).Mod_Effect_Target, Attacker, If-Then-Else(Compare((Event Player).Optimize, >, 0), Event Damage, Multiply(Event Damage, 0.75)));
            Wait(0.25, Ignore Condition);
    }
}

rule ("Passive Mods 39 - Lifesplit") {
    event {
        Subroutine;
        Lifesplit;
    }
    actions {
        Set Player Variable(Attacker, Affected_Players, Remove From Array(Players Within Radius(Attacker, 18, Team Of(Attacker), Surfaces), Attacker));
        Wait(0.016, Ignore Condition);
        For Player Variable(Attacker, Passive_Index, 0, Count Of((Attacker).Affected_Players), 1);
            Heal(Value In Array((Attacker).Affected_Players, (Attacker).Passive_Index), Attacker, Multiply(Event Damage, 0.5));
            Play Effect(All Players(All Teams), Heal Target Active Effect, Color(Team 1), Position Of(Value In Array((Attacker).Affected_Players, (Attacker).Passive_Index)), 1);
            Wait(0.032, Ignore Condition);
        End;
        Wait(0.016, Ignore Condition);
    }
}

rule ("Active Mods 30 - Power Glove") {
    event {
        Subroutine;
        PowerGlove;
    }
    actions {
        Set Player Variable(Event Player, Boolean, False);
        If(Or(Compare(Event Ability, ==, Button(Melee)), And(Array Contains(Array(Hero(Brigitte), Hero(Reinhardt)), Hero Of(Event Player)), Compare(Event Ability, ==, Button(Primary Fire)))));
            Damage(Victim, Attacker, Multiply(Event Damage, 3));
            Apply Impulse(Victim, Add(Facing Direction Of(Attacker), Vector(0, 0.2, 0)), 30, To World, Cancel Contrary Motion);
            Play Effect(All Players(All Teams), Doomfist Rising Uppercut Impact Sound, Null, Position Of(Victim), 100);
            Play Effect(All Players(All Teams), Doomfist Rising Uppercut Impact Effect, Color(Team 2), Victim, 1);
            Set Player Variable(Event Player, Cooldown_Chase, Subtract(7, (Event Player).Optimize));
            Set Player Variable(Event Player, Cd_Color, Custom Color(180, 180, 180, 255));
            Set Player Variable(Event Player, Cooldown_String_1, Custom String("Cooldown:", Null, Null, Null));
            Chase Player Variable At Rate(Event Player, Cooldown_Chase, 0, 1, Destination and Rate);
            Wait Until(Or(Compare((Event Player).Cooldown_Chase, ==, 0), Compare((Event Player).Mod_Menu_Select, !=, 3)), 9999);
            If(Compare((Event Player).Mod_Menu_Select, !=, 3));
                Set Player Variable(Event Player, Cd_Visible_To, Array(Null));
            End;
            Stop Chasing Player Variable(Event Player, Cooldown_Chase);
            Wait(0.016, Ignore Condition);
            Set Player Variable(Event Player, Cd_Color, Color(Green));
            Set Player Variable(Event Player, Cooldown_String_1, Custom String("Ready", Null, Null, Null));
            Set Player Variable(Event Player, Cooldown_Chase, Icon String(Checkmark));
            Set Player Variable(Event Player, Active_Mod_Skill_Toggle, 0);
    }
}

rule ("Active Mods 31 - Elemental Charge") {
    event {
        Subroutine;
        ElementalCharge;
    }
    actions {
        If(Compare((Attacker).Active_String_2, ==, Custom String("(READY)", Null, Null, Null)));
            Wait(0.05, Ignore Condition);
            If(Compare((Attacker).Num_4, ==, Color(Rose)));
                Set Status(Victim, Attacker, Burning, 3);
                Start Damage Over Time(Victim, Attacker, 3, 25);
            Else If(Compare((Attacker).Num_4, ==, Color(Sky Blue)));
                Set Status(Victim, Attacker, Frozen, 1.25);
                Damage(Victim, Attacker, 25);
            Else If(Compare((Attacker).Num_4, ==, Color(Green)));
                Apply Impulse(Victim, Vector(0, 0.2, 0), 15, To World, Cancel Contrary Motion);
                Damage(Victim, Attacker, 35);
            End;
            Wait(0.25, Ignore Condition);
            Set Player Variable(Attacker, Active_String_2, Custom String("(NOT READY)", Null, Null, Null));
        End;
        Wait(Subtract(6.75, Multiply((Event Player).Optimize, 1.5)), Ignore Condition);
        Set Player Variable(Attacker, Active_String_2, Custom String("(READY)", Null, Null, Null));
        Play Effect(Attacker, Brigitte Whip Shot Heal Area Sound, Null, Position Of(Attacker), 100);
    }
}

rule ("Active Mods 33 - Vs. Goliath (Dealt Damage)") {
    event {
        Subroutine;
        VsGoliathDealtDmg;
    }
    actions {
        If(Compare(Health(Victim), >, Health(Attacker)));
            Damage(Victim, Null, Multiply(Event Damage, 0.33));
            Wait(0.016, Ignore Condition);
    }
}

rule ("Mods PlayerDealtDamage Events") {
    event {
        Player Dealt Damage;
        All;
        All;
    }
    conditions {
        (Event Player).Mod_Menu_Select == 3;
    }
    actions {
        "personal space"
        If(Compare((Event Player).Passive_Mod, ==, 42));
            Apply Impulse(Victim, Add(Facing Direction Of(Attacker), Vector(0, 0.5, 0)), Divide(Event Damage, 20), To World, Incorporate Contrary Motion);
        End;
        If(And(Compare((Event Player).Active_Mod, ==, 33), Compare((Event Player).Blade_Chase, >, 0)));
            Start Rule(BouncingBlade, Do Nothing);
        End;
        If(Compare((Event Player).Passive_Mod, ==, 13));
            Start Rule(Lifesplit, Do Nothing);
        End;
        If(Compare((Event Player).Passive_Mod, ==, 44));
            If(Compare(First Of((Event Player).Num_3), <, 300));
                Set Player Variable At Index(Event Player, Num_3, 0, If-Then-Else(Compare(Add(First Of((Event Player).Num_3), Round To Integer(Multiply(Event Damage, 0.1), Down)), <=, 300), Add(First Of((Event Player).Num_3), Round To Integer(Multiply(Event Damage, 0.1), Down)), 300));
            End;
        End;
        If(And(Compare((Event Player).Passive_Mod, ==, 46), Compare(Attacker, !=, Victim)));
            Start Rule(Mastery, Do Nothing);
        End;
        If(Is Meleeing(Event Player));
            If(And(And(Compare((Event Player).Active_Mod, ==, 15), Compare(Hero Of(Event Player), !=, Hero(Sombra))), Compare((Victim).OraOra, ==, False)));
                Start Rule(Devour, Do Nothing);
            End;
            If(Compare((Event Player).Passive_Mod, ==, 36));
                Start Rule(Knockout, Do Nothing);
            Else If(Compare((Event Player).Passive_Mod, ==, 37));
                If(Not(Is In View Angle(Victim, Attacker, 120)));
                    Call Subroutine(Ambush);
                End;
            Else If(Compare((Event Player).Active_Mod, ==, 30));
                If(And(Compare(Distance Between(Attacker, Victim), <, 3), Compare(Attacker, !=, Victim)));
                    Start Rule(OraOra, Do Nothing);
                End;
            Else If(Compare((Event Player).Passive_Mod, ==, 39));
                If(Compare(Distance Between(Event Player, Victim), <=, 6));
                    Start Rule(BoxerDealtDmg, Do Nothing);
                End;
            Else If(Compare((Event Player).Passive_Mod, ==, 38));
                If(And(Compare(Distance Between(Attacker, Victim), <=, 6), Compare(Hero Of(Victim), !=, Hero Of(Attacker))));
                    Start Rule(Infection, Do Nothing);
                End;
            End;
        Else If(And(And(Is Firing Primary(Event Player), Compare((Event Player).Passive_Mod, ==, 39)), Compare(Distance Between(Event Player, Victim), <=, 6)));
            If(Compare(Hero Of(Event Player), ==, Hero(Brigitte)));
                Start Rule(BoxerBrig, Do Nothing);
            Else If(Compare(Hero Of(Event Player), ==, Hero(Reinhardt)));
                Start Rule(BoxerRein, Do Nothing);
            End;
        End;
        If(And(Compare((Event Player).Active_Mod, ==, 20), Compare((Event Player).Active_Mod_Skill_Toggle, ==, 1)));
            Call Subroutine(SneakDealtDmg);
        End;
        If(And(Compare((Event Player).Active_Mod, ==, 34), Compare((Event Player).Active_Mod_Skill_Toggle, ==, 0)));
            Start Rule(VsGoliathDealtDmg, Do Nothing);
        End;
        If(Compare((Event Player).Boolean, ==, True));
            If(And(Compare((Event Player).Active_Mod, ==, 31), Compare((Event Player).Active_Mod_Skill_Toggle, ==, 1)));
                Start Rule(PowerGlove, Do Nothing);
            Else If(Compare((Event Player).Active_Mod, ==, 32));
                Start Rule(ElementalCharge, Do Nothing);
            End;
        End;
        If(Compare((Event Player).Passive_Mod, ==, 35));
            Start Rule(Disruption, Do Nothing);
        End;
        If(Compare((Event Player).Passive_Mod, ==, 12));
            Start Rule(Lifesteal, Do Nothing);
        End;
        If(And(And(Compare((Event Player).Passive_Mod, ==, 19), Compare(Hero Of(Event Player), ==, Hero(Sombra))), Is Using Ability 1(Event Player)));
            Start Rule(Immolation, Do Nothing);
    }
}

rule ("Passive Mods - Mana Shield (Drain)") {
    event {
        Subroutine;
        ManaShieldDamaged;
    }
    actions {
        If(Compare(Ultimate Charge Percent(Event Player), >=, 15));
            Heal(Event Player, Null, Event Damage);
            Set Ultimate Charge(Event Player, Subtract(Ultimate Charge Percent(Event Player), Multiply(Event Damage, 0.25)));
            Wait(0.016, Ignore Condition);
    }
}

rule ("Passive Mods - Thorns (Active)") {
    event {
        Subroutine;
        ThornsDamaged;
    }
    actions {
        Damage(Attacker, Event Player, Multiply(Max Health(Attacker), 0.15));
        Wait(0.5, Ignore Condition);
    }
}

rule ("Passive Mods - Frost Armor (Active)") {
    event {
        Subroutine;
        FrostArmorDamaged;
    }
    actions {
        Set Status(Attacker, Event Player, Frozen, 1.25);
        Wait(2.5, Ignore Condition);
    }
}

rule ("Passive Mods - Infection (Active)") {
    event {
        Subroutine;
        InfectionDamaged;
    }
    actions {
        Heal(Victim, Attacker, Divide(Event Damage, 2));
        Wait(1, Ignore Condition);
    }
}

rule ("Active Mods - Sneak (Deactivate 2)") {
    event {
        Subroutine;
        SneakDamaged;
    }
    actions {
        Set Invisible(Event Player, None);
        Set Player Variable(Event Player, Is_Visible, True);
        Wait(0.116, Ignore Condition);
        Set Crouch Enabled(Event Player, False);
        Wait(0.2, Ignore Condition);
        Set Crouch Enabled(Event Player, True);
        Wait(0.116, Ignore Condition);
        Set Player Variable(Event Player, Active_Mod_Skill_Toggle, 0);
    }
}

rule ("Active Mods - Colossus (Hook Prevention)") {
    event {
        Subroutine;
        ColossusHookDamaged;
    }
    actions {
        Cancel Primary Action(Attacker);
    }
}

rule ("Passive Mods - Fury (Active)") {
    event {
        Subroutine;
        FuryDamaged;
    }
    actions {
        If(And(Compare(Event Damage, >=, Multiply(0.25, Max Health(Victim))), Not(Has Status(Victim, Unkillable))));
            Create Effect(All Players(All Teams), Bad Aura, Color(Rose), Victim, 1, Visible To Position and Radius);
            Set Player Variable At Index(Victim, Passive_Mod_FX_Array, 0, Last Created Entity);
            Create Effect(All Players(All Teams), Winston Primal Rage Effect, Color(Team 2), Victim, 1, Position and Radius);
            Set Player Variable At Index(Victim, Passive_Mod_FX_Array, 1, Last Created Entity);
            Create Effect(All Players(All Teams), Winston Primal Rage Sound, Color(Team 2), Victim, 75, Position and Radius);
            Set Player Variable At Index(Victim, Passive_Mod_FX_Array, 2, Last Created Entity);
            Set Damage Dealt(Victim, 150);
            Set Move Speed(Victim, 150);
            Wait(4.5, Ignore Condition);
            Set Damage Dealt(Victim, 100);
            Set Move Speed(Victim, 100);
            Destroy Effect((Victim).Passive_Mod_FX_Array);
        End;
        Wait(6, Ignore Condition);
        Play Effect(Event Player, Buff Impact Sound, Null, Event Player, 50);
    }
}

rule ("Passive Mods - Resilient") {
    event {
        Subroutine;
        ResilientDamaged;
    }
    actions {
        If(Or(Not(Compare(Event Ability, ==, Button(Primary Fire))), Compare(Event Ability, ==, Button(Secondary Fire))));
            Damage(Victim, Null, Multiply(Event Damage, 0.33));
            Wait(0.016, Ignore Condition);
    }
}

rule ("Active Mods 39 - Vs. Goliath (Took Damage)") {
    event {
        Subroutine;
        VsGoliathDamaged;
    }
    actions {
        If(And(Compare(Attacker, !=, Null), Compare(Health(Victim), <, Health(Attacker))));
            Heal(Victim, Null, Multiply(Event Damage, 0.33));
            Wait(0.016, Ignore Condition);
    }
}

rule ("Active Mods 41 - Soul Link (Took Damage)") {
    event {
        Subroutine;
        SoulLinkDamaged;
    }
    actions {
        If(And(Compare(Value In Array((Victim).Linked, 1), ==, True), Compare(Event Damage, <, Health(Victim))));
            Heal(Victim, First Of((Victim).Linked), Event Damage);
            Damage(First Of((Victim).Linked), Attacker, If-Then-Else(Compare((Event Player).Optimize, >, 0), Multiply(Event Damage, 0.5), Event Damage));
    }
}

rule ("Mods PlayerTookDamage Events") {
    event {
        Player Took Damage;
        All;
        All;
    }
    conditions {
        (Event Player).Mod_Menu_Select == 3;
    }
    actions {
        If(Compare((Event Player).Active_Mod_Skill_Toggle, ==, 1));
            If(Compare((Event Player).Active_Mod, ==, 20));
                Call Subroutine(SneakDamaged);
            End;
            If(Compare((Event Player).Active_Mod, ==, 34));
                Start Rule(VsGoliathDamaged, Do Nothing);
            End;
        End;
        If(And(And(And(Compare((Event Player).Active_Mod, ==, 24), Compare((Event Player).Is_Colossus, ==, True)), Compare(Hero Of(Attacker), ==, Hero(Roadhog))), Compare(Event Ability, ==, Button(Ability 1))));
            Call Subroutine(ColossusHookDamaged);
        End;
        If(And(Compare((Event Player).Passive_Mod, ==, 38), Compare(Hero Of(Attacker), ==, Hero Of(Victim))));
            Start Rule(InfectionDamaged, Do Nothing);
        Else If(And(Is Alive(Event Player), Compare(Attacker, !=, Victim)));
            If(Compare((Event Player).Active_Mod, ==, 42));
                Start Rule(SoulLinkDamaged, Do Nothing);
            End;
            If(And(Compare((Event Player).Passive_Mod, ==, 32), Compare((Event Player).Is_Colossus, ==, False)));
                Start Rule(ThornsDamaged, Do Nothing);
            End;
            If(Compare((Event Player).Passive_Mod, ==, 31));
                Start Rule(ManaShieldDamaged, Do Nothing);
            End;
            If(And(And(Compare((Event Player).Passive_Mod, ==, 33), Compare(Distance Between(Attacker, Event Player), <=, 6)), Is In Line of Sight(Attacker, Event Player, Enemy Barriers Block LOS)));
                Start Rule(FrostArmorDamaged, Do Nothing);
            End;
            If(Compare((Event Player).Passive_Mod, ==, 34));
                Start Rule(FuryDamaged, Do Nothing);
            End;
            If(Compare((Event Player).Passive_Mod, ==, 7));
                Start Rule(ResilientDamaged, Do Nothing);
    }
}

rule ("Passive Mods - Victory Rush (Active)") {
    event {
        Subroutine;
        VictoryRush;
    }
    actions {
        Set Ability Cooldown(Event Player, Button(Ability 1), 0);
        Set Ability Cooldown(Event Player, Button(Ability 2), 0);
        Set Ability Cooldown(Event Player, Button(Secondary Fire), 0);
        Heal(Event Player, Null, Max Health(Event Player));
        Play Effect(All Players(All Teams), Good Pickup Effect, Color(Green), Event Player, 1);
        Set Move Speed(Event Player, 166);
        Wait(5, Ignore Condition);
        Set Move Speed(Event Player, 100);
    }
}

rule ("Mods PlayerEarnedElimination Events") {
    event {
        Player Earned Elimination;
        All;
        All;
    }
    conditions {
        (Event Player).Mod_Menu_Select == 3;
    }
    actions {
        If(Compare((Event Player).Passive_Mod, ==, 24));
            Start Rule(VictoryRush, Do Nothing);
    }
}

